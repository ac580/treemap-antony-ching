{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/batch.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/batch.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS9tb2RlbC9iYXRjaAogKi8KCi8qKgogKiBBIGJhdGNoIGluc3RhbmNlIGdyb3VwcyBtb2RlbCBjaGFuZ2VzICh7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9vcGVyYXRpb24vb3BlcmF0aW9ufk9wZXJhdGlvbiBvcGVyYXRpb25zfSkuIEFsbCBvcGVyYXRpb25zCiAqIGdyb3VwZWQgaW4gYSBzaW5nbGUgYmF0Y2ggY2FuIGJlIHJldmVydGVkIHRvZ2V0aGVyLCBzbyB5b3UgY2FuIGFsc28gdGhpbmsgYWJvdXQgYSBiYXRjaCBhcyBvZiBhIHNpbmdsZSB1bmRvIHN0ZXAuIElmIHlvdSB3YW50CiAqIHRvIGV4dGVuZCBhIGdpdmVuIHVuZG8gc3RlcCwgeW91IGNhbiBhZGQgbW9yZSBjaGFuZ2VzIHRvIHRoZSBiYXRjaCB1c2luZyB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9tb2RlbH5Nb2RlbCNlbnF1ZXVlQ2hhbmdlfToKICoKICoJCW1vZGVsLmVucXVldWVDaGFuZ2UoIGJhdGNoLCB3cml0ZXIgPT4gewogKgkJCXdyaXRlci5pbnNlcnRUZXh0KCAnZm9vJywgcGFyYWdyYXBoLCAnZW5kJyApOwogKgkJfSApOwogKgogKiBAc2VlIG1vZHVsZTplbmdpbmUvbW9kZWwvbW9kZWx+TW9kZWwjZW5xdWV1ZUNoYW5nZQogKiBAc2VlIG1vZHVsZTplbmdpbmUvbW9kZWwvbW9kZWx+TW9kZWwjY2hhbmdlCiAqLwpleHBvcnQgZGVmYXVsdCBjbGFzcyBCYXRjaCB7CiAgLyoqCiAgICogQ3JlYXRlcyBhIGJhdGNoIGluc3RhbmNlLgogICAqCiAgICogQHNlZSBtb2R1bGU6ZW5naW5lL21vZGVsL21vZGVsfk1vZGVsI2VucXVldWVDaGFuZ2UKICAgKiBAc2VlIG1vZHVsZTplbmdpbmUvbW9kZWwvbW9kZWx+TW9kZWwjY2hhbmdlCiAgICogQHBhcmFtIHsndHJhbnNwYXJlbnQnfCdkZWZhdWx0J30gW3R5cGU9J2RlZmF1bHQnXSBUaGUgdHlwZSBvZiB0aGUgYmF0Y2guCiAgICovCiAgY29uc3RydWN0b3IodHlwZSA9ICdkZWZhdWx0JykgewogICAgLyoqCiAgICAgKiBBbiBhcnJheSBvZiBvcGVyYXRpb25zIHRoYXQgY29tcG9zZSB0aGlzIGJhdGNoLgogICAgICoKICAgICAqIEByZWFkb25seQogICAgICogQHR5cGUge0FycmF5Ljxtb2R1bGU6ZW5naW5lL21vZGVsL29wZXJhdGlvbi9vcGVyYXRpb25+T3BlcmF0aW9uPn0KICAgICAqLwogICAgdGhpcy5vcGVyYXRpb25zID0gW107CiAgICAvKioKICAgICAqIFRoZSB0eXBlIG9mIHRoZSBiYXRjaC4KICAgICAqCiAgICAgKiBJdCBjYW4gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzOgogICAgICogKiBgJ2RlZmF1bHQnYCAmbmRhc2g7IEFsbCAibm9ybWFsIiBiYXRjaGVzLiBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbmx5IHVzZWQgdHlwZS4KICAgICAqICogYCd0cmFuc3BhcmVudCdgICZuZGFzaDsgQSBiYXRjaCB0aGF0IHNob3VsZCBiZSBpZ25vcmVkIGJ5IG90aGVyIGZlYXR1cmVzLCBpLmUuIGFuIGluaXRpYWwgYmF0Y2ggb3IgY29sbGFib3JhdGl2ZSBlZGl0aW5nCiAgICAgKiBjaGFuZ2VzLgogICAgICoKICAgICAqIEByZWFkb25seQogICAgICogQHR5cGUgeyd0cmFuc3BhcmVudCd8J2RlZmF1bHQnfQogICAgICovCgogICAgdGhpcy50eXBlID0gdHlwZTsKICB9CiAgLyoqCiAgICogUmV0dXJucyB0aGUgYmFzZSB2ZXJzaW9uIG9mIHRoaXMgYmF0Y2gsIHdoaWNoIGlzIGVxdWFsIHRvIHRoZSBiYXNlIHZlcnNpb24gb2YgdGhlIGZpcnN0IG9wZXJhdGlvbiBpbiB0aGUgYmF0Y2guCiAgICogSWYgdGhlcmUgYXJlIG5vIG9wZXJhdGlvbnMgaW4gdGhlIGJhdGNoIG9yIG5laXRoZXIgb3BlcmF0aW9uIGhhcyB0aGUgYmFzZSB2ZXJzaW9uIHNldCwgaXQgcmV0dXJucyBgbnVsbGAuCiAgICoKICAgKiBAcmVhZG9ubHkKICAgKiBAdHlwZSB7TnVtYmVyfG51bGx9CiAgICovCgoKICBnZXQgYmFzZVZlcnNpb24oKSB7CiAgICBmb3IgKGNvbnN0IG9wIG9mIHRoaXMub3BlcmF0aW9ucykgewogICAgICBpZiAob3AuYmFzZVZlcnNpb24gIT09IG51bGwpIHsKICAgICAgICByZXR1cm4gb3AuYmFzZVZlcnNpb247CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9CiAgLyoqCiAgICogQWRkcyBhbiBvcGVyYXRpb24gdG8gdGhlIGJhdGNoIGluc3RhbmNlLgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL29wZXJhdGlvbi9vcGVyYXRpb25+T3BlcmF0aW9ufSBvcGVyYXRpb24gQW4gb3BlcmF0aW9uIHRvIGFkZC4KICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS9tb2RlbC9vcGVyYXRpb24vb3BlcmF0aW9ufk9wZXJhdGlvbn0gVGhlIGFkZGVkIG9wZXJhdGlvbi4KICAgKi8KCgogIGFkZE9wZXJhdGlvbihvcGVyYXRpb24pIHsKICAgIG9wZXJhdGlvbi5iYXRjaCA9IHRoaXM7CiAgICB0aGlzLm9wZXJhdGlvbnMucHVzaChvcGVyYXRpb24pOwogICAgcmV0dXJuIG9wZXJhdGlvbjsKICB9Cgp9"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/batch.js"],"names":["Batch","constructor","type","operations","baseVersion","op","addOperation","operation","batch","push"],"mappings":"AAAA;;;;;AAKA;;;;AAIA;;;;;;;;;;;;AAYA,eAAe,MAAMA,KAAN,CAAY;AAC1B;;;;;;;AAOAC,EAAAA,WAAW,CAAEC,IAAI,GAAG,SAAT,EAAqB;AAC/B;;;;;;AAMA,SAAKC,UAAL,GAAkB,EAAlB;AAEA;;;;;;;;;;;;AAWA,SAAKD,IAAL,GAAYA,IAAZ;AACA;AAED;;;;;;;;;AAOA,MAAIE,WAAJ,GAAkB;AACjB,SAAM,MAAMC,EAAZ,IAAkB,KAAKF,UAAvB,EAAoC;AACnC,UAAKE,EAAE,CAACD,WAAH,KAAmB,IAAxB,EAA+B;AAC9B,eAAOC,EAAE,CAACD,WAAV;AACA;AACD;;AAED,WAAO,IAAP;AACA;AAED;;;;;;;;AAMAE,EAAAA,YAAY,CAAEC,SAAF,EAAc;AACzBA,IAAAA,SAAS,CAACC,KAAV,GAAkB,IAAlB;AACA,SAAKL,UAAL,CAAgBM,IAAhB,CAAsBF,SAAtB;AAEA,WAAOA,SAAP;AACA;;AA3DyB","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/batch\n */\n\n/**\n * A batch instance groups model changes ({@link module:engine/model/operation/operation~Operation operations}). All operations\n * grouped in a single batch can be reverted together, so you can also think about a batch as of a single undo step. If you want\n * to extend a given undo step, you can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\n *\n *\t\tmodel.enqueueChange( batch, writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * @see module:engine/model/model~Model#enqueueChange\n * @see module:engine/model/model~Model#change\n */\nexport default class Batch {\n\t/**\n\t * Creates a batch instance.\n\t *\n\t * @see module:engine/model/model~Model#enqueueChange\n\t * @see module:engine/model/model~Model#change\n\t * @param {'transparent'|'default'} [type='default'] The type of the batch.\n\t */\n\tconstructor( type = 'default' ) {\n\t\t/**\n\t\t * An array of operations that compose this batch.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Array.<module:engine/model/operation/operation~Operation>}\n\t\t */\n\t\tthis.operations = [];\n\n\t\t/**\n\t\t * The type of the batch.\n\t\t *\n\t\t * It can be one of the following values:\n\t\t * * `'default'` &ndash; All \"normal\" batches. This is the most commonly used type.\n\t\t * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\n\t\t * changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {'transparent'|'default'}\n\t\t */\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * Returns the base version of this batch, which is equal to the base version of the first operation in the batch.\n\t * If there are no operations in the batch or neither operation has the base version set, it returns `null`.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget baseVersion() {\n\t\tfor ( const op of this.operations ) {\n\t\t\tif ( op.baseVersion !== null ) {\n\t\t\t\treturn op.baseVersion;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Adds an operation to the batch instance.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation An operation to add.\n\t * @returns {module:engine/model/operation/operation~Operation} The added operation.\n\t */\n\taddOperation( operation ) {\n\t\toperation.batch = this;\n\t\tthis.operations.push( operation );\n\n\t\treturn operation;\n\t}\n}\n"]}]}