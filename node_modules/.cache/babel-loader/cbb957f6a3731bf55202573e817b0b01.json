{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIHV0aWxzL2tleXN0cm9rZWhhbmRsZXIKICovCmltcG9ydCBEb21FbWl0dGVyTWl4aW4gZnJvbSAnLi9kb20vZW1pdHRlcm1peGluJzsKaW1wb3J0IHsgZ2V0Q29kZSwgcGFyc2VLZXlzdHJva2UgfSBmcm9tICcuL2tleWJvYXJkJzsKLyoqCiAqIEtleXN0cm9rZSBoYW5kbGVyIGFsbG93cyByZWdpc3RlcmluZyBjYWxsYmFja3MgZm9yIGdpdmVuIGtleXN0cm9rZXMuCiAqCiAqIFRoZSBtb3N0IGZyZXF1ZW50IHVzZSBvZiB0aGlzIGNsYXNzIGlzIHRocm91Z2ggdGhlIHtAbGluayBtb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvciNrZXlzdHJva2VzIGBlZGl0b3Iua2V5c3Ryb2tlc2B9CiAqIHByb3BlcnR5LiBJdCBhbGxvd3MgbGlzdGVuaW5nIHRvIGtleXN0cm9rZXMgZXhlY3V0ZWQgaW4gdGhlIGVkaXRpbmcgdmlldzoKICoKICoJCWVkaXRvci5rZXlzdHJva2VzLnNldCggJ0N0cmwrQScsICgga2V5RXZ0RGF0YSwgY2FuY2VsICkgPT4gewogKgkJCWNvbnNvbGUubG9nKCAnQ3RybCtBIGhhcyBiZWVuIHByZXNzZWQnICk7CiAqCQkJY2FuY2VsKCk7CiAqCQl9ICk7CiAqCiAqIEhvd2V2ZXIsIHRoaXMgdXRpbGl0eSBjbGFzcyBjYW4gYmUgdXNlZCBpbiB2YXJpb3VzIHBhcnQgb2YgdGhlIFVJLiBGb3IgaW5zdGFuY2UsIGEgY2VydGFpbiB7QGxpbmsgbW9kdWxlOnVpL3ZpZXd+Vmlld30KICogY2FuIHVzZSBpdCBsaWtlIHRoaXM6CiAqCiAqCQljbGFzcyBNeVZpZXcgZXh0ZW5kcyBWaWV3IHsKICoJCQljb25zdHJ1Y3RvcigpIHsKICoJCQkJdGhpcy5rZXlzdHJva2VzID0gbmV3IEtleXN0cm9rZUhhbmRsZXIoKTsKICoKICogCQkJCXRoaXMua2V5c3Ryb2tlcy5zZXQoICd0YWInLCBoYW5kbGVUYWJLZXkgKTsKICoJCQl9CiAqCiAqCQkJcmVuZGVyKCkgewogKgkJCQlzdXBlci5yZW5kZXIoKTsKICoKICoJCQkJdGhpcy5rZXlzdHJva2VzLmxpc3RlblRvKCB0aGlzLmVsZW1lbnQgKTsKICoJCQl9CiAqCQl9CiAqCiAqIFRoYXQga2V5c3Ryb2tlIGhhbmRsZXIgd2lsbCBsaXN0ZW4gdG8gYGtleWRvd25gIGV2ZW50cyBmaXJlZCBpbiB0aGlzIHZpZXcncyBtYWluIGVsZW1lbnQuCiAqCiAqLwoKZXhwb3J0IGRlZmF1bHQgY2xhc3MgS2V5c3Ryb2tlSGFuZGxlciB7CiAgLyoqCiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUga2V5c3Ryb2tlIGhhbmRsZXIuCiAgICovCiAgY29uc3RydWN0b3IoKSB7CiAgICAvKioKICAgICAqIExpc3RlbmVyIHVzZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBmb3IgZWFzaWVyIGtleXN0cm9rZSBoYW5kbGVyIGRlc3RydWN0aW9uLgogICAgICoKICAgICAqIEBwcm90ZWN0ZWQKICAgICAqIEBtZW1iZXIge21vZHVsZTp1dGlscy9kb20vZW1pdHRlcm1peGlufkVtaXR0ZXJ9CiAgICAgKi8KICAgIHRoaXMuX2xpc3RlbmVyID0gT2JqZWN0LmNyZWF0ZShEb21FbWl0dGVyTWl4aW4pOwogIH0KICAvKioKICAgKiBTdGFydHMgbGlzdGVuaW5nIGZvciBga2V5ZG93bmAgZXZlbnRzIGZyb20gYSBnaXZlbiBlbWl0dGVyLgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6dXRpbHMvZW1pdHRlcm1peGlufkVtaXR0ZXJ9IGVtaXR0ZXIKICAgKi8KCgogIGxpc3RlblRvKGVtaXR0ZXIpIHsKICAgIC8vIFRoZSAjX2xpc3RlbmVyIHdvcmtzIGhlcmUgYXMgYSBraW5kIG9mIGRpc3BhdGNoZXIuIEl0IGdyb3VwcyB0aGUgZXZlbnRzIGNvbWluZyBmcm9tIHRoZSBzYW1lCiAgICAvLyBrZXlzdHJva2Ugc28gdGhlIGxpc3RlbmVycyBjYW4gYmUgYXR0YWNoZWQgdG8gdGhlbSB3aXRoIGRpZmZlcmVudCBwcmlvcml0aWVzLgogICAgLy8KICAgIC8vIEUuZy4gYWxsIHRoZSBrZXlzdHJva2VzIHdpdGggdGhlIGBrZXlDb2RlYCBvZiA0MiBjb21pbmcgZnJvbSB0aGUgYGVtaXR0ZXJgIGFyZSBwcm9wYWdhdGVkCiAgICAvLyBhcyBhIGBfa2V5ZG93bjo0MmAgZXZlbnQgYnkgdGhlIGBfbGlzdGVuZXJgLiBJZiB0aGVyZSdzIGEgY2FsbGJhY2sgY3JlYXRlZCBieSB0aGUgYHNldGAKICAgIC8vIG1ldGhvZCBmb3IgdGhpcyA0MiBrZXlzdHJva2UsIGl0IGxpc3RlbnMgdG8gdGhlIGBfbGlzdGVuZXIjX2tleWRvd246NDJgIGV2ZW50IG9ubHkgYW5kIGludGVyYWN0cwogICAgLy8gb25seSB3aXRoIG90aGVyIGxpc3RlbmVycyBvZiB0aGlzIHBhcnRpY3VsYXIgZXZlbnQsIHRodXMgbWFraW5nIGl0IHBvc3NpYmxlIHRvIHByaW9yaXRpemUKICAgIC8vIHRoZSBsaXN0ZW5lcnMgYW5kIHNhZmVseSBjYW5jZWwgZXhlY3V0aW9uLCB3aGVuIG5lZWRlZC4gSW5zdGVhZCBvZiBkdXBsaWNhdGluZyB0aGUgRW1pdHRlciBsb2dpYywKICAgIC8vIHRoZSBLZXlzdHJva2VIYW5kbGVyIHJl4oCTdXNlcyBpdCB0byBkbyBpdHMgam9iLgogICAgdGhpcy5fbGlzdGVuZXIubGlzdGVuVG8oZW1pdHRlciwgJ2tleWRvd24nLCAoZXZ0LCBrZXlFdnREYXRhKSA9PiB7CiAgICAgIHRoaXMuX2xpc3RlbmVyLmZpcmUoJ19rZXlkb3duOicgKyBnZXRDb2RlKGtleUV2dERhdGEpLCBrZXlFdnREYXRhKTsKICAgIH0pOwogIH0KICAvKioKICAgKiBSZWdpc3RlcnMgYSBoYW5kbGVyIGZvciB0aGUgc3BlY2lmaWVkIGtleXN0cm9rZS4KICAgKgogICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5LjxTdHJpbmd8TnVtYmVyPn0ga2V5c3Ryb2tlIEtleXN0cm9rZSBkZWZpbmVkIGluIGEgZm9ybWF0IGFjY2VwdGVkIGJ5CiAgICogdGhlIHtAbGluayBtb2R1bGU6dXRpbHMva2V5Ym9hcmR+cGFyc2VLZXlzdHJva2V9IGZ1bmN0aW9uLgogICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIEEgZnVuY3Rpb24gY2FsbGVkIHdpdGggdGhlCiAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9rZXlvYnNlcnZlcn5LZXlFdmVudERhdGEga2V5IGV2ZW50IGRhdGF9IG9iamVjdCBhbmQKICAgKiBhIGhlbHBlciBmdW5jaW9uIHRvIGNhbGwgYm90aCBgcHJldmVudERlZmF1bHQoKWAgYW5kIGBzdG9wUHJvcGFnYXRpb24oKWAgb24gdGhlIHVuZGVybHlpbmcgZXZlbnQuCiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBBZGRpdGlvbmFsIG9wdGlvbnMuCiAgICogQHBhcmFtIHttb2R1bGU6dXRpbHMvcHJpb3JpdGllc35Qcmlvcml0eVN0cmluZ3xOdW1iZXJ9IFtvcHRpb25zLnByaW9yaXR5PSdub3JtYWwnXSBUaGUgcHJpb3JpdHkgb2YgdGhlIGtleXN0cm9rZQogICAqIGNhbGxiYWNrLiBUaGUgaGlnaGVyIHRoZSBwcmlvcml0eSB2YWx1ZSB0aGUgc29vbmVyIHRoZSBjYWxsYmFjayB3aWxsIGJlIGV4ZWN1dGVkLiBLZXlzdHJva2VzIGhhdmluZyB0aGUgc2FtZSBwcmlvcml0eQogICAqIGFyZSBjYWxsZWQgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZSBhZGRlZC4KICAgKi8KCgogIHNldChrZXlzdHJva2UsIGNhbGxiYWNrLCBvcHRpb25zID0ge30pIHsKICAgIGNvbnN0IGtleUNvZGUgPSBwYXJzZUtleXN0cm9rZShrZXlzdHJva2UpOwogICAgY29uc3QgcHJpb3JpdHkgPSBvcHRpb25zLnByaW9yaXR5OyAvLyBFeGVjdXRlIHRoZSBwYXNzZWQgY2FsbGJhY2sgb24gS2V5c3Ryb2tlSGFuZGxlciNfa2V5ZG93bi4KICAgIC8vIFRPRE86IGh0dHBzOi8vZ2l0aHViLmNvbS9ja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvaXNzdWVzLzE0NAoKICAgIHRoaXMuX2xpc3RlbmVyLmxpc3RlblRvKHRoaXMuX2xpc3RlbmVyLCAnX2tleWRvd246JyArIGtleUNvZGUsIChldnQsIGtleUV2dERhdGEpID0+IHsKICAgICAgY2FsbGJhY2soa2V5RXZ0RGF0YSwgKCkgPT4gewogICAgICAgIC8vIFN0b3AgdGhlIGV2ZW50IGluIHRoZSBET006IG5vIGxpc3RlbmVyIGluIHRoZSB3ZWIgcGFnZQogICAgICAgIC8vIHdpbGwgYmUgdHJpZ2dlcmVkIGJ5IHRoaXMgZXZlbnQuCiAgICAgICAga2V5RXZ0RGF0YS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGtleUV2dERhdGEuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIFN0b3AgdGhlIGV2ZW50IGluIHRoZSBLZXlzdHJva2VIYW5kbGVyOiBubyBtb3JlIGNhbGxiYWNrcwogICAgICAgIC8vIHdpbGwgYmUgZXhlY3V0ZWQgZm9yIHRoaXMga2V5c3Ryb2tlLgoKICAgICAgICBldnQuc3RvcCgpOwogICAgICB9KTsgLy8gTWFyayB0aGlzIGtleXN0cm9rZSBhcyBoYW5kbGVkIGJ5IHRoZSBjYWxsYmFjay4gU2VlOiAjcHJlc3MuCgogICAgICBldnQucmV0dXJuID0gdHJ1ZTsKICAgIH0sIHsKICAgICAgcHJpb3JpdHkKICAgIH0pOwogIH0KICAvKioKICAgKiBUcmlnZ2VycyBhIGtleXN0cm9rZSBoYW5kbGVyIGZvciBhIHNwZWNpZmllZCBrZXkgY29tYmluYXRpb24sIGlmIHN1Y2ggYSBrZXlzdHJva2Ugd2FzIHtAbGluayAjc2V0IGRlZmluZWR9LgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIva2V5b2JzZXJ2ZXJ+S2V5RXZlbnREYXRhfSBrZXlFdnREYXRhIEtleSBldmVudCBkYXRhLgogICAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIHRoZSBrZXlzdHJva2Ugd2FzIGhhbmRsZWQuCiAgICovCgoKICBwcmVzcyhrZXlFdnREYXRhKSB7CiAgICByZXR1cm4gISF0aGlzLl9saXN0ZW5lci5maXJlKCdfa2V5ZG93bjonICsgZ2V0Q29kZShrZXlFdnREYXRhKSwga2V5RXZ0RGF0YSk7CiAgfQogIC8qKgogICAqIERlc3Ryb3lzIHRoZSBrZXlzdHJva2UgaGFuZGxlci4KICAgKi8KCgogIGRlc3Ryb3koKSB7CiAgICB0aGlzLl9saXN0ZW5lci5zdG9wTGlzdGVuaW5nKCk7CiAgfQoKfQ=="},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js"],"names":["DomEmitterMixin","getCode","parseKeystroke","KeystrokeHandler","constructor","_listener","Object","create","listenTo","emitter","evt","keyEvtData","fire","set","keystroke","callback","options","keyCode","priority","preventDefault","stopPropagation","stop","return","press","destroy","stopListening"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,eAAP,MAA4B,oBAA5B;AACA,SAASC,OAAT,EAAkBC,cAAlB,QAAwC,YAAxC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,eAAe,MAAMC,gBAAN,CAAuB;AACrC;;;AAGAC,EAAAA,WAAW,GAAG;AACb;;;;;;AAMA,SAAKC,SAAL,GAAiBC,MAAM,CAACC,MAAP,CAAeP,eAAf,CAAjB;AACA;AAED;;;;;;;AAKAQ,EAAAA,QAAQ,CAAEC,OAAF,EAAY;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAKJ,SAAL,CAAeG,QAAf,CAAyBC,OAAzB,EAAkC,SAAlC,EAA6C,CAAEC,GAAF,EAAOC,UAAP,KAAuB;AACnE,WAAKN,SAAL,CAAeO,IAAf,CAAqB,cAAcX,OAAO,CAAEU,UAAF,CAA1C,EAA0DA,UAA1D;AACA,KAFD;AAGA;AAED;;;;;;;;;;;;;;;AAaAE,EAAAA,GAAG,CAAEC,SAAF,EAAaC,QAAb,EAAuBC,OAAO,GAAG,EAAjC,EAAsC;AACxC,UAAMC,OAAO,GAAGf,cAAc,CAAEY,SAAF,CAA9B;AACA,UAAMI,QAAQ,GAAGF,OAAO,CAACE,QAAzB,CAFwC,CAIxC;AACA;;AACA,SAAKb,SAAL,CAAeG,QAAf,CAAyB,KAAKH,SAA9B,EAAyC,cAAcY,OAAvD,EAAgE,CAAEP,GAAF,EAAOC,UAAP,KAAuB;AACtFI,MAAAA,QAAQ,CAAEJ,UAAF,EAAc,MAAM;AAC3B;AACA;AACAA,QAAAA,UAAU,CAACQ,cAAX;AACAR,QAAAA,UAAU,CAACS,eAAX,GAJ2B,CAM3B;AACA;;AACAV,QAAAA,GAAG,CAACW,IAAJ;AACA,OATO,CAAR,CADsF,CAYtF;;AACAX,MAAAA,GAAG,CAACY,MAAJ,GAAa,IAAb;AACA,KAdD,EAcG;AAAEJ,MAAAA;AAAF,KAdH;AAeA;AAED;;;;;;;;AAMAK,EAAAA,KAAK,CAAEZ,UAAF,EAAe;AACnB,WAAO,CAAC,CAAC,KAAKN,SAAL,CAAeO,IAAf,CAAqB,cAAcX,OAAO,CAAEU,UAAF,CAA1C,EAA0DA,UAA1D,CAAT;AACA;AAED;;;;;AAGAa,EAAAA,OAAO,GAAG;AACT,SAAKnB,SAAL,CAAeoB,aAAf;AACA;;AArFoC","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/keystrokehandler\n */\n\nimport DomEmitterMixin from './dom/emittermixin';\nimport { getCode, parseKeystroke } from './keyboard';\n\n/**\n * Keystroke handler allows registering callbacks for given keystrokes.\n *\n * The most frequent use of this class is through the {@link module:core/editor/editor~Editor#keystrokes `editor.keystrokes`}\n * property. It allows listening to keystrokes executed in the editing view:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+A', ( keyEvtData, cancel ) => {\n *\t\t\tconsole.log( 'Ctrl+A has been pressed' );\n *\t\t\tcancel();\n *\t\t} );\n *\n * However, this utility class can be used in various part of the UI. For instance, a certain {@link module:ui/view~View}\n * can use it like this:\n *\n *\t\tclass MyView extends View {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.keystrokes = new KeystrokeHandler();\n *\n * \t\t\t\tthis.keystrokes.set( 'tab', handleTabKey );\n *\t\t\t}\n *\n *\t\t\trender() {\n *\t\t\t\tsuper.render();\n *\n *\t\t\t\tthis.keystrokes.listenTo( this.element );\n *\t\t\t}\n *\t\t}\n *\n * That keystroke handler will listen to `keydown` events fired in this view's main element.\n *\n */\nexport default class KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Listener used to listen to events for easier keystroke handler destruction.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/dom/emittermixin~Emitter}\n\t\t */\n\t\tthis._listener = Object.create( DomEmitterMixin );\n\t}\n\n\t/**\n\t * Starts listening for `keydown` events from a given emitter.\n\t *\n\t * @param {module:utils/emittermixin~Emitter} emitter\n\t */\n\tlistenTo( emitter ) {\n\t\t// The #_listener works here as a kind of dispatcher. It groups the events coming from the same\n\t\t// keystroke so the listeners can be attached to them with different priorities.\n\t\t//\n\t\t// E.g. all the keystrokes with the `keyCode` of 42 coming from the `emitter` are propagated\n\t\t// as a `_keydown:42` event by the `_listener`. If there's a callback created by the `set`\n\t\t// method for this 42 keystroke, it listens to the `_listener#_keydown:42` event only and interacts\n\t\t// only with other listeners of this particular event, thus making it possible to prioritize\n\t\t// the listeners and safely cancel execution, when needed. Instead of duplicating the Emitter logic,\n\t\t// the KeystrokeHandler re–uses it to do its job.\n\t\tthis._listener.listenTo( emitter, 'keydown', ( evt, keyEvtData ) => {\n\t\t\tthis._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t\t} );\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function} callback A function called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a helper funcion to call both `preventDefault()` and `stopPropagation()` on the underlying event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tconst keyCode = parseKeystroke( keystroke );\n\t\tconst priority = options.priority;\n\n\t\t// Execute the passed callback on KeystrokeHandler#_keydown.\n\t\t// TODO: https://github.com/ckeditor/ckeditor5-utils/issues/144\n\t\tthis._listener.listenTo( this._listener, '_keydown:' + keyCode, ( evt, keyEvtData ) => {\n\t\t\tcallback( keyEvtData, () => {\n\t\t\t\t// Stop the event in the DOM: no listener in the web page\n\t\t\t\t// will be triggered by this event.\n\t\t\t\tkeyEvtData.preventDefault();\n\t\t\t\tkeyEvtData.stopPropagation();\n\n\t\t\t\t// Stop the event in the KeystrokeHandler: no more callbacks\n\t\t\t\t// will be executed for this keystroke.\n\t\t\t\tevt.stop();\n\t\t\t} );\n\n\t\t\t// Mark this keystroke as handled by the callback. See: #press.\n\t\t\tevt.return = true;\n\t\t}, { priority } );\n\t}\n\n\t/**\n\t * Triggers a keystroke handler for a specified key combination, if such a keystroke was {@link #set defined}.\n\t *\n\t * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEvtData Key event data.\n\t * @returns {Boolean} Whether the keystroke was handled.\n\t */\n\tpress( keyEvtData ) {\n\t\treturn !!this._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t}\n\n\t/**\n\t * Destroys the keystroke handler.\n\t */\n\tdestroy() {\n\t\tthis._listener.stopListening();\n\t}\n}\n"]}]}