{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mutationobserver.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mutationobserver.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS92aWV3L29ic2VydmVyL211dGF0aW9ub2JzZXJ2ZXIKICovCgovKiBnbG9iYWxzIHdpbmRvdyAqLwppbXBvcnQgT2JzZXJ2ZXIgZnJvbSAnLi9vYnNlcnZlcic7CmltcG9ydCBWaWV3U2VsZWN0aW9uIGZyb20gJy4uL3NlbGVjdGlvbic7CmltcG9ydCB7IHN0YXJ0c1dpdGhGaWxsZXIsIGdldERhdGFXaXRob3V0RmlsbGVyIH0gZnJvbSAnLi4vZmlsbGVyJzsKaW1wb3J0IHsgaXNFcXVhbFdpdGggfSBmcm9tICdsb2Rhc2gtZXMnOwovKioKICogTXV0YXRpb24gb2JzZXJ2ZXIgY2xhc3Mgb2JzZXJ2ZXMgY2hhbmdlcyBpbiB0aGUgRE9NLCBmaXJlcyB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50fkRvY3VtZW50I2V2ZW50Om11dGF0aW9uc30gZXZlbnQsIG1hcmsgdmlldwogKiBlbGVtZW50cyBhcyBjaGFuZ2VkIGFuZCBjYWxsIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvcmVuZGVyZXJ+UmVuZGVyZXIjcmVuZGVyfS4KICogQmVjYXVzZSBhbGwgbXV0YXRlZCBub2RlcyBhcmUgbWFya2VkIGFzICJ0byBiZSByZW5kZXJlZCIgYW5kIHRoZQogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3JlbmRlcmVyflJlbmRlcmVyI3JlbmRlcn0gaXMgY2FsbGVkLCBhbGwgY2hhbmdlcyB3aWxsIGJlIHJldmVydGVkLCB1bmxlc3MgdGhlIG11dGF0aW9uIHdpbGwgYmUgaGFuZGxlZCBieSB0aGUKICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9kb2N1bWVudH5Eb2N1bWVudCNldmVudDptdXRhdGlvbnN9IGV2ZW50IGxpc3RlbmVyLiBJdCBtZWFucyB1c2VyIHdpbGwgc2VlIG9ubHkgaGFuZGxlZCBjaGFuZ2VzLCBhbmQgdGhlIGVkaXRvcgogKiB3aWxsIGJsb2NrIGFsbCBjaGFuZ2VzIHdoaWNoIGFyZSBub3QgaGFuZGxlZC4KICoKICogTXV0YXRpb24gT2JzZXJ2ZXIgYWxzbyB0YWtlIGNhcmUgb2YgcmVkdWNpbmcgbnVtYmVyIG9mIG11dGF0aW9ucyB3aGljaCBhcmUgZmlyZWQuIEl0IHJlbW92ZXMgZHVwbGljYXRlcyBhbmQKICogbXV0YXRpb25zIG9uIGVsZW1lbnRzIHdoaWNoIGRvIG5vdCBoYXZlIGNvcnJlc3BvbmRpbmcgdmlldyBlbGVtZW50cy4gQWxzbwogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L29ic2VydmVyL211dGF0aW9ub2JzZXJ2ZXJ+TXV0YXRlZFRleHQgdGV4dCBtdXRhdGlvbn0gaXMgZmlyZWQgb25seSBpZiBwYXJlbnQgZWxlbWVudCBkbyBub3QgY2hhbmdlIGNoaWxkIGxpc3QuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIG9ic2VydmVyIGlzIGF0dGFjaGVkIGJ5IHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3ZpZXd+Vmlld30gYW5kIGlzIGF2YWlsYWJsZSBieSBkZWZhdWx0LgogKgogKiBAZXh0ZW5kcyBtb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIvb2JzZXJ2ZXJ+T2JzZXJ2ZXIKICovCgpleHBvcnQgZGVmYXVsdCBjbGFzcyBNdXRhdGlvbk9ic2VydmVyIGV4dGVuZHMgT2JzZXJ2ZXIgewogIGNvbnN0cnVjdG9yKHZpZXcpIHsKICAgIHN1cGVyKHZpZXcpOwogICAgLyoqCiAgICAgKiBOYXRpdmUgbXV0YXRpb24gb2JzZXJ2ZXIgY29uZmlnLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAbWVtYmVyIHtPYmplY3R9CiAgICAgKi8KCiAgICB0aGlzLl9jb25maWcgPSB7CiAgICAgIGNoaWxkTGlzdDogdHJ1ZSwKICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSwKICAgICAgY2hhcmFjdGVyRGF0YU9sZFZhbHVlOiB0cnVlLAogICAgICBzdWJ0cmVlOiB0cnVlCiAgICB9OwogICAgLyoqCiAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvdmlld35WaWV3I2RvbUNvbnZlcnRlcn0uCiAgICAgKgogICAgICogQG1lbWJlciB7bW9kdWxlOmVuZ2luZS92aWV3L2RvbWNvbnZlcnRlcn5Eb21Db252ZXJ0ZXJ9CiAgICAgKi8KCiAgICB0aGlzLmRvbUNvbnZlcnRlciA9IHZpZXcuZG9tQ29udmVydGVyOwogICAgLyoqCiAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvdmlld35WaWV3I19yZW5kZXJlcn0uCiAgICAgKgogICAgICogQG1lbWJlciB7bW9kdWxlOmVuZ2luZS92aWV3L3JlbmRlcmVyflJlbmRlcmVyfQogICAgICovCgogICAgdGhpcy5yZW5kZXJlciA9IHZpZXcuX3JlbmRlcmVyOwogICAgLyoqCiAgICAgKiBPYnNlcnZlZCBET00gZWxlbWVudHMuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBtZW1iZXIge0FycmF5LjxIVE1MRWxlbWVudD59CiAgICAgKi8KCiAgICB0aGlzLl9kb21FbGVtZW50cyA9IFtdOwogICAgLyoqCiAgICAgKiBOYXRpdmUgbXV0YXRpb24gb2JzZXJ2ZXIuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBtZW1iZXIge011dGF0aW9uT2JzZXJ2ZXJ9CiAgICAgKi8KCiAgICB0aGlzLl9tdXRhdGlvbk9ic2VydmVyID0gbmV3IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyKHRoaXMuX29uTXV0YXRpb25zLmJpbmQodGhpcykpOwogIH0KICAvKioKICAgKiBTeW5jaHJvbm91c2x5IGZpcmVzIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnR+RG9jdW1lbnQjZXZlbnQ6bXV0YXRpb25zfSBldmVudCB3aXRoIGFsbCBtdXRhdGlvbnMgaW4gcmVjb3JkIHF1ZXVlLgogICAqIEF0IHRoZSBzYW1lIHRpbWUgZW1wdGllcyB0aGUgcXVldWUgc28gbXV0YXRpb25zIHdpbGwgbm90IGJlIGZpcmVkIHR3aWNlLgogICAqLwoKCiAgZmx1c2goKSB7CiAgICB0aGlzLl9vbk11dGF0aW9ucyh0aGlzLl9tdXRhdGlvbk9ic2VydmVyLnRha2VSZWNvcmRzKCkpOwogIH0KICAvKioKICAgKiBAaW5oZXJpdERvYwogICAqLwoKCiAgb2JzZXJ2ZShkb21FbGVtZW50KSB7CiAgICB0aGlzLl9kb21FbGVtZW50cy5wdXNoKGRvbUVsZW1lbnQpOwoKICAgIGlmICh0aGlzLmlzRW5hYmxlZCkgewogICAgICB0aGlzLl9tdXRhdGlvbk9ic2VydmVyLm9ic2VydmUoZG9tRWxlbWVudCwgdGhpcy5fY29uZmlnKTsKICAgIH0KICB9CiAgLyoqCiAgICogQGluaGVyaXREb2MKICAgKi8KCgogIGVuYWJsZSgpIHsKICAgIHN1cGVyLmVuYWJsZSgpOwoKICAgIGZvciAoY29uc3QgZG9tRWxlbWVudCBvZiB0aGlzLl9kb21FbGVtZW50cykgewogICAgICB0aGlzLl9tdXRhdGlvbk9ic2VydmVyLm9ic2VydmUoZG9tRWxlbWVudCwgdGhpcy5fY29uZmlnKTsKICAgIH0KICB9CiAgLyoqCiAgICogQGluaGVyaXREb2MKICAgKi8KCgogIGRpc2FibGUoKSB7CiAgICBzdXBlci5kaXNhYmxlKCk7CgogICAgdGhpcy5fbXV0YXRpb25PYnNlcnZlci5kaXNjb25uZWN0KCk7CiAgfQogIC8qKgogICAqIEBpbmhlcml0RG9jCiAgICovCgoKICBkZXN0cm95KCkgewogICAgc3VwZXIuZGVzdHJveSgpOwoKICAgIHRoaXMuX211dGF0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpOwogIH0KICAvKioKICAgKiBIYW5kbGVzIG11dGF0aW9ucy4gRGVkdXBsaWNhdGVzLCBtYXJrIHZpZXcgZWxlbWVudHMgdG8gc3luYywgZmlyZSBldmVudCBhbmQgY2FsbCByZW5kZXIuCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IGRvbU11dGF0aW9ucyBBcnJheSBvZiBuYXRpdmUgbXV0YXRpb25zLgogICAqLwoKCiAgX29uTXV0YXRpb25zKGRvbU11dGF0aW9ucykgewogICAgLy8gQXMgYSByZXN1bHQgb2YgdGhpcy5mbHVzaCgpIHdlIGNhbiBoYXZlIGFuIGVtcHR5IGNvbGxlY3Rpb24uCiAgICBpZiAoZG9tTXV0YXRpb25zLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgY29uc3QgZG9tQ29udmVydGVyID0gdGhpcy5kb21Db252ZXJ0ZXI7IC8vIFVzZSBtYXAgYW5kIHNldCBmb3IgZGVkdXBsaWNhdGlvbi4KCiAgICBjb25zdCBtdXRhdGVkVGV4dHMgPSBuZXcgTWFwKCk7CiAgICBjb25zdCBtdXRhdGVkRWxlbWVudHMgPSBuZXcgU2V0KCk7IC8vIEhhbmRsZSBgY2hpbGRMaXN0YCBtdXRhdGlvbnMgZmlyc3QsIHNvIHdlIHdpbGwgYmUgYWJsZSB0byBjaGVjayBpZiB0aGUgYGNoYXJhY3RlckRhdGFgIG11dGF0aW9uIGlzIGluIHRoZQogICAgLy8gZWxlbWVudCB3aXRoIGNoYW5nZWQgc3RydWN0dXJlIGFueXdheS4KCiAgICBmb3IgKGNvbnN0IG11dGF0aW9uIG9mIGRvbU11dGF0aW9ucykgewogICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCcpIHsKICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9tQ29udmVydGVyLm1hcERvbVRvVmlldyhtdXRhdGlvbi50YXJnZXQpOyAvLyBEbyBub3QgY29sbGVjdCBtdXRhdGlvbnMgZnJvbSBVSUVsZW1lbnRzLgoKICAgICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LmlzKCd1aUVsZW1lbnQnKSkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICBpZiAoZWxlbWVudCAmJiAhdGhpcy5faXNCb2d1c0JyTXV0YXRpb24obXV0YXRpb24pKSB7CiAgICAgICAgICBtdXRhdGVkRWxlbWVudHMuYWRkKGVsZW1lbnQpOwogICAgICAgIH0KICAgICAgfQogICAgfSAvLyBIYW5kbGUgYGNoYXJhY3RlckRhdGFgIG11dGF0aW9ucyBsYXRlciwgd2hlbiB3ZSBoYXZlIHRoZSBmdWxsIGxpc3Qgb2Ygbm9kZXMgd2hpY2ggY2hhbmdlZCBzdHJ1Y3R1cmUuCgoKICAgIGZvciAoY29uc3QgbXV0YXRpb24gb2YgZG9tTXV0YXRpb25zKSB7CiAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb21Db252ZXJ0ZXIubWFwRG9tVG9WaWV3KG11dGF0aW9uLnRhcmdldCk7IC8vIERvIG5vdCBjb2xsZWN0IG11dGF0aW9ucyBmcm9tIFVJRWxlbWVudHMuCgogICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LmlzKCd1aUVsZW1lbnQnKSkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CgogICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoYXJhY3RlckRhdGEnKSB7CiAgICAgICAgY29uc3QgdGV4dCA9IGRvbUNvbnZlcnRlci5maW5kQ29ycmVzcG9uZGluZ1ZpZXdUZXh0KG11dGF0aW9uLnRhcmdldCk7CgogICAgICAgIGlmICh0ZXh0ICYmICFtdXRhdGVkRWxlbWVudHMuaGFzKHRleHQucGFyZW50KSkgewogICAgICAgICAgLy8gVXNlIHRleHQgYXMgYSBrZXksIGZvciBkZWR1cGxpY2F0aW9uLiBJZiB0aGVyZSB3aWxsIGJlIGFub3RoZXIgbXV0YXRpb24gb24gdGhlIHNhbWUgdGV4dCBlbGVtZW50CiAgICAgICAgICAvLyB3ZSB3aWxsIGhhdmUgb25seSBvbmUgaW4gdGhlIG1hcC4KICAgICAgICAgIG11dGF0ZWRUZXh0cy5zZXQodGV4dCwgewogICAgICAgICAgICB0eXBlOiAndGV4dCcsCiAgICAgICAgICAgIG9sZFRleHQ6IHRleHQuZGF0YSwKICAgICAgICAgICAgbmV3VGV4dDogZ2V0RGF0YVdpdGhvdXRGaWxsZXIobXV0YXRpb24udGFyZ2V0KSwKICAgICAgICAgICAgbm9kZTogdGV4dAogICAgICAgICAgfSk7CiAgICAgICAgfSAvLyBXaGVuIHdlIGFkZGVkIGZpcnN0IGxldHRlciB0byB0aGUgdGV4dCBub2RlIHdoaWNoIGhhZCBvbmx5IGlubGluZSBmaWxsZXIsIGZvciB0aGUgRE9NIGl0IGlzIG11dGF0aW9uCiAgICAgICAgLy8gb24gdGV4dCwgYnV0IGZvciB0aGUgdmlldywgd2hlcmUgZmlsbGVyIHRleHQgbm9kZSBkaWQgbm90IGV4aXN0ZWQsIG5ldyB0ZXh0IG5vZGUgd2FzIGNyZWF0ZWQsIHNvIHdlCiAgICAgICAgLy8gbmVlZCB0byBmaXJlICdjaGlsZHJlbicgbXV0YXRpb24gaW5zdGVhZCBvZiAndGV4dCcuCiAgICAgICAgZWxzZSBpZiAoIXRleHQgJiYgc3RhcnRzV2l0aEZpbGxlcihtdXRhdGlvbi50YXJnZXQpKSB7CiAgICAgICAgICAgIG11dGF0ZWRFbGVtZW50cy5hZGQoZG9tQ29udmVydGVyLm1hcERvbVRvVmlldyhtdXRhdGlvbi50YXJnZXQucGFyZW50Tm9kZSkpOwogICAgICAgICAgfQogICAgICB9CiAgICB9IC8vIE5vdyB3ZSBidWlsZCB0aGUgbGlzdCBvZiBtdXRhdGlvbnMgdG8gZmlyZSBhbmQgbWFyayBlbGVtZW50cy4gV2UgZGlkIG5vdCBkbyBpdCBlYXJsaWVyIHRvIGF2b2lkIG1hcmtpbmcgdGhlCiAgICAvLyBzYW1lIG5vZGUgbXVsdGlwbGUgdGltZXMgaW4gY2FzZSBvZiBkdXBsaWNhdGlvbi4KICAgIC8vIExpc3Qgb2YgbXV0YXRpb25zIHdlIHdpbGwgZmlyZS4KCgogICAgY29uc3Qgdmlld011dGF0aW9ucyA9IFtdOwoKICAgIGZvciAoY29uc3QgbXV0YXRlZFRleHQgb2YgbXV0YXRlZFRleHRzLnZhbHVlcygpKSB7CiAgICAgIHRoaXMucmVuZGVyZXIubWFya1RvU3luYygndGV4dCcsIG11dGF0ZWRUZXh0Lm5vZGUpOwogICAgICB2aWV3TXV0YXRpb25zLnB1c2gobXV0YXRlZFRleHQpOwogICAgfQoKICAgIGZvciAoY29uc3Qgdmlld0VsZW1lbnQgb2YgbXV0YXRlZEVsZW1lbnRzKSB7CiAgICAgIGNvbnN0IGRvbUVsZW1lbnQgPSBkb21Db252ZXJ0ZXIubWFwVmlld1RvRG9tKHZpZXdFbGVtZW50KTsKICAgICAgY29uc3Qgdmlld0NoaWxkcmVuID0gQXJyYXkuZnJvbSh2aWV3RWxlbWVudC5nZXRDaGlsZHJlbigpKTsKICAgICAgY29uc3QgbmV3Vmlld0NoaWxkcmVuID0gQXJyYXkuZnJvbShkb21Db252ZXJ0ZXIuZG9tQ2hpbGRyZW5Ub1ZpZXcoZG9tRWxlbWVudCwgewogICAgICAgIHdpdGhDaGlsZHJlbjogZmFsc2UKICAgICAgfSkpOyAvLyBJdCBtYXkgaGFwcGVuIHRoYXQgYXMgYSByZXN1bHQgb2YgbWFueSBjaGFuZ2VzIChzdGggd2FzIGluc2VydGVkIGFuZCB0aGVuIHJlbW92ZWQpLAogICAgICAvLyBib3RoIGVsZW1lbnRzIGhhdmVuJ3QgcmVhbGx5IGNoYW5nZWQuICMxMDMxCgogICAgICBpZiAoIWlzRXF1YWxXaXRoKHZpZXdDaGlsZHJlbiwgbmV3Vmlld0NoaWxkcmVuLCBzYW1lTm9kZXMpKSB7CiAgICAgICAgdGhpcy5yZW5kZXJlci5tYXJrVG9TeW5jKCdjaGlsZHJlbicsIHZpZXdFbGVtZW50KTsKICAgICAgICB2aWV3TXV0YXRpb25zLnB1c2goewogICAgICAgICAgdHlwZTogJ2NoaWxkcmVuJywKICAgICAgICAgIG9sZENoaWxkcmVuOiB2aWV3Q2hpbGRyZW4sCiAgICAgICAgICBuZXdDaGlsZHJlbjogbmV3Vmlld0NoaWxkcmVuLAogICAgICAgICAgbm9kZTogdmlld0VsZW1lbnQKICAgICAgICB9KTsKICAgICAgfQogICAgfSAvLyBSZXRyaWV2ZSBgZG9tU2VsZWN0aW9uYCB1c2luZyBgb3duZXJEb2N1bWVudGAgb2Ygb25lIG9mIG11dGF0ZWQgbm9kZXMuCiAgICAvLyBUaGVyZSBzaG91bGQgbm90IGJlIHNpbXVsdGFuZW91cyBtdXRhdGlvbiBpbiBtdWx0aXBsZSBkb2N1bWVudHMsIHNvIGl0J3MgZmluZS4KCgogICAgY29uc3QgZG9tU2VsZWN0aW9uID0gZG9tTXV0YXRpb25zWzBdLnRhcmdldC5vd25lckRvY3VtZW50LmdldFNlbGVjdGlvbigpOwogICAgbGV0IHZpZXdTZWxlY3Rpb24gPSBudWxsOwoKICAgIGlmIChkb21TZWxlY3Rpb24gJiYgZG9tU2VsZWN0aW9uLmFuY2hvck5vZGUpIHsKICAgICAgLy8gSWYgYGRvbVNlbGVjdGlvbmAgaXMgaW5zaWRlIGEgZG9tIG5vZGUgdGhhdCBpcyBhbHJlYWR5IGJvdW5kIHRvIGEgdmlldyBub2RlIGZyb20gdmlldyB0cmVlLCBnZXQKICAgICAgLy8gY29ycmVzcG9uZGluZyBzZWxlY3Rpb24gaW4gdGhlIHZpZXcgYW5kIHBhc3MgaXQgdG9nZXRoZXIgd2l0aCBgdmlld011dGF0aW9uc2AuIFRoZSBgdmlld1NlbGVjdGlvbmAgbWF5CiAgICAgIC8vIGJlIHVzZWQgYnkgZmVhdHVyZXMgaGFuZGxpbmcgbXV0YXRpb25zLgogICAgICAvLyBPbmx5IG9uZSByYW5nZSBpcyBzdXBwb3J0ZWQuCiAgICAgIGNvbnN0IHZpZXdTZWxlY3Rpb25BbmNob3IgPSBkb21Db252ZXJ0ZXIuZG9tUG9zaXRpb25Ub1ZpZXcoZG9tU2VsZWN0aW9uLmFuY2hvck5vZGUsIGRvbVNlbGVjdGlvbi5hbmNob3JPZmZzZXQpOwogICAgICBjb25zdCB2aWV3U2VsZWN0aW9uRm9jdXMgPSBkb21Db252ZXJ0ZXIuZG9tUG9zaXRpb25Ub1ZpZXcoZG9tU2VsZWN0aW9uLmZvY3VzTm9kZSwgZG9tU2VsZWN0aW9uLmZvY3VzT2Zmc2V0KTsgLy8gQW5jaG9yIGFuZCBmb2N1cyBoYXMgdG8gYmUgcHJvcGVybHkgbWFwcGVkIHRvIHZpZXcuCgogICAgICBpZiAodmlld1NlbGVjdGlvbkFuY2hvciAmJiB2aWV3U2VsZWN0aW9uRm9jdXMpIHsKICAgICAgICB2aWV3U2VsZWN0aW9uID0gbmV3IFZpZXdTZWxlY3Rpb24odmlld1NlbGVjdGlvbkFuY2hvcik7CiAgICAgICAgdmlld1NlbGVjdGlvbi5zZXRGb2N1cyh2aWV3U2VsZWN0aW9uRm9jdXMpOwogICAgICB9CiAgICB9CgogICAgdGhpcy5kb2N1bWVudC5maXJlKCdtdXRhdGlvbnMnLCB2aWV3TXV0YXRpb25zLCB2aWV3U2VsZWN0aW9uKTsgLy8gSWYgbm90aGluZyBjaGFuZ2VzIG9uIGBtdXRhdGlvbnNgIGV2ZW50LCBhdCB0aGlzIHBvaW50IHdlIGhhdmUgImRpcnR5IERPTSIgKGNoYW5nZWQpIGFuZCBkZS1zeW5jaGVkCiAgICAvLyB2aWV3ICh3aGljaCBoYXMgbm90IGJlZW4gY2hhbmdlZCkuIEluIG9yZGVyIHRvICJyZXNldCBET00iIHdlIHJlbmRlciB0aGUgdmlldyBhZ2Fpbi4KCiAgICB0aGlzLnZpZXcuZm9yY2VSZW5kZXIoKTsKCiAgICBmdW5jdGlvbiBzYW1lTm9kZXMoY2hpbGQxLCBjaGlsZDIpIHsKICAgICAgLy8gRmlyc3QgbGV2ZWwgb2YgY29tcGFyaXNvbiAoYXJyYXkgb2YgY2hpbGRyZW4gdnMgYXJyYXkgb2YgY2hpbGRyZW4pIOKAkyB1c2UgdGhlIExvZGFzaCdzIGRlZmF1bHQgYmVoYXZpb3IuCiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkMSkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0gLy8gRWxlbWVudHMuCgoKICAgICAgaWYgKGNoaWxkMSA9PT0gY2hpbGQyKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gLy8gVGV4dHMuCiAgICAgIGVsc2UgaWYgKGNoaWxkMS5pcygndGV4dCcpICYmIGNoaWxkMi5pcygndGV4dCcpKSB7CiAgICAgICAgICByZXR1cm4gY2hpbGQxLmRhdGEgPT09IGNoaWxkMi5kYXRhOwogICAgICAgIH0gLy8gTm90IG1hdGNoaW5nIHR5cGVzLgoKCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CiAgLyoqCiAgICogQ2hlY2tzIGlmIG11dGF0aW9uIHdhcyBnZW5lcmF0ZWQgYnkgdGhlIGJyb3dzZXIgaW5zZXJ0aW5nIGJvZ3VzIGJyIG9uIHRoZSBlbmQgb2YgdGhlIGJsb2NrIGVsZW1lbnQuCiAgICogU3VjaCBtdXRhdGlvbnMgYXJlIGdlbmVyYXRlZCB3aGlsZSBwcmVzc2luZyBzcGFjZSBvciBwZXJmb3JtaW5nIG5hdGl2ZSBzcGVsbGNoZWNrZXIgY29ycmVjdGlvbgogICAqIG9uIHRoZSBlbmQgb2YgdGhlIGJsb2NrIGVsZW1lbnQgaW4gRmlyZWZveCBicm93c2VyLgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcGFyYW0ge09iamVjdH0gbXV0YXRpb24gTmF0aXZlIG11dGF0aW9uIG9iamVjdC4KICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0KICAgKi8KCgogIF9pc0JvZ3VzQnJNdXRhdGlvbihtdXRhdGlvbikgewogICAgbGV0IGFkZGVkTm9kZSA9IG51bGw7IC8vIENoZWNrIGlmIG11dGF0aW9uIGFkZGVkIG9ubHkgb25lIG5vZGUgb24gdGhlIGVuZCBvZiBpdHMgcGFyZW50LgoKICAgIGlmIChtdXRhdGlvbi5uZXh0U2libGluZyA9PT0gbnVsbCAmJiBtdXRhdGlvbi5yZW1vdmVkTm9kZXMubGVuZ3RoID09PSAwICYmIG11dGF0aW9uLmFkZGVkTm9kZXMubGVuZ3RoID09IDEpIHsKICAgICAgYWRkZWROb2RlID0gdGhpcy5kb21Db252ZXJ0ZXIuZG9tVG9WaWV3KG11dGF0aW9uLmFkZGVkTm9kZXNbMF0sIHsKICAgICAgICB3aXRoQ2hpbGRyZW46IGZhbHNlCiAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiBhZGRlZE5vZGUgJiYgYWRkZWROb2RlLmlzKCdlbGVtZW50JywgJ2JyJyk7CiAgfQoKfQovKioKICogRmlyZWQgd2hlbiBtdXRhdGlvbiBvY2N1cnJlZC4gSWYgdHJlZSB2aWV3IGlzIG5vdCBjaGFuZ2VkIG9uIHRoaXMgZXZlbnQsIERPTSB3aWxsIGJlIHJldmVydGVkIHRvIHRoZSBzdGF0ZSBiZWZvcmUKICogbXV0YXRpb24sIHNvIGFsbCBjaGFuZ2VzIHdoaWNoIHNob3VsZCBiZSBhcHBsaWVkLCBzaG91bGQgYmUgaGFuZGxlZCBvbiB0aGlzIGV2ZW50LgogKgogKiBJbnRyb2R1Y2VkIGJ5IHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIvbXV0YXRpb25vYnNlcnZlcn5NdXRhdGlvbk9ic2VydmVyfS4KICoKICogTm90ZSB0aGF0IGJlY2F1c2Uge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9tdXRhdGlvbm9ic2VydmVyfk11dGF0aW9uT2JzZXJ2ZXJ9IGlzIGF0dGFjaGVkIGJ5IHRoZQogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3ZpZXd+Vmlld30gdGhpcyBldmVudCBpcyBhdmFpbGFibGUgYnkgZGVmYXVsdC4KICoKICogQHNlZSBtb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIvbXV0YXRpb25vYnNlcnZlcn5NdXRhdGlvbk9ic2VydmVyCiAqIEBldmVudCBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnR+RG9jdW1lbnQjZXZlbnQ6bXV0YXRpb25zCiAqIEBwYXJhbSB7QXJyYXkuPG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9tdXRhdGlvbm9ic2VydmVyfk11dGF0ZWRUZXh0fG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9tdXRhdGlvbm9ic2VydmVyfk11dGF0ZWRDaGlsZHJlbj59CiAqIHZpZXdNdXRhdGlvbnMgQXJyYXkgb2YgbXV0YXRpb25zLgogKiBGb3IgbXV0YXRlZCB0ZXh0cyBpdCB3aWxsIGJlIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIvbXV0YXRpb25vYnNlcnZlcn5NdXRhdGVkVGV4dH0gYW5kIGZvciBtdXRhdGVkIGVsZW1lbnRzIGl0IHdpbGwgYmUKICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9tdXRhdGlvbm9ic2VydmVyfk11dGF0ZWRDaGlsZHJlbn0uIFlvdSBjYW4gcmVjb2duaXplIHRoZSB0eXBlIGJhc2VkIG9uIHRoZSBgdHlwZWAgcHJvcGVydHkuCiAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L3NlbGVjdGlvbn5TZWxlY3Rpb258bnVsbH0gdmlld1NlbGVjdGlvbiBWaWV3IHNlbGVjdGlvbiB0aGF0IGlzIGEgcmVzdWx0IG9mIGNvbnZlcnRpbmcgRE9NIHNlbGVjdGlvbiB0byB2aWV3LgogKiBLZWVwIGluCiAqIG1pbmQgdGhhdCB0aGUgRE9NIHNlbGVjdGlvbiBpcyBhbHJlYWR5ICJ1cGRhdGVkIiwgbWVhbmluZyB0aGF0IGl0IGFscmVhZHkgYWNrbm93bGVkZ2VzIGNoYW5nZXMgZG9uZSBpbiBtdXRhdGlvbi4KICovCgovKioKICogTXV0YXRpb24gaXRlbSBmb3IgdGV4dC4KICoKICogQHNlZSBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnR+RG9jdW1lbnQjZXZlbnQ6bXV0YXRpb25zCiAqIEBzZWUgbW9kdWxlOmVuZ2luZS92aWV3L29ic2VydmVyL211dGF0aW9ub2JzZXJ2ZXJ+TXV0YXRlZENoaWxkcmVuCiAqCiAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9tdXRhdGlvbm9ic2VydmVyfk11dGF0ZWRUZXh0CiAqCiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB0eXBlIEZvciB0ZXh0IG11dGF0aW9ucyBpdCBpcyBhbHdheXMgJ3RleHQnLgogKiBAcHJvcGVydHkge21vZHVsZTplbmdpbmUvdmlldy90ZXh0flRleHR9IG5vZGUgTXV0YXRlZCB0ZXh0IG5vZGUuCiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBvbGRUZXh0IE9sZCB0ZXh0LgogKiBAcHJvcGVydHkge1N0cmluZ30gbmV3VGV4dCBOZXcgdGV4dC4KICovCgovKioKICogTXV0YXRpb24gaXRlbSBmb3IgY2hpbGQgbm9kZXMuCiAqCiAqIEBzZWUgbW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50fkRvY3VtZW50I2V2ZW50Om11dGF0aW9ucwogKiBAc2VlIG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9tdXRhdGlvbm9ic2VydmVyfk11dGF0ZWRUZXh0CiAqCiAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9tdXRhdGlvbm9ic2VydmVyfk11dGF0ZWRDaGlsZHJlbgogKgogKiBAcHJvcGVydHkge1N0cmluZ30gdHlwZSBGb3IgY2hpbGQgbm9kZXMgbXV0YXRpb25zIGl0IGlzIGFsd2F5cyAnY2hpbGRyZW4nLgogKiBAcHJvcGVydHkge21vZHVsZTplbmdpbmUvdmlldy9lbGVtZW50fkVsZW1lbnR9IG5vZGUgUGFyZW50IG9mIHRoZSBtdXRhdGVkIGNoaWxkcmVuLgogKiBAcHJvcGVydHkge0FycmF5Ljxtb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlPn0gb2xkQ2hpbGRyZW4gT2xkIGNoaWxkIG5vZGVzLgogKiBAcHJvcGVydHkge0FycmF5Ljxtb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlPn0gbmV3Q2hpbGRyZW4gTmV3IGNoaWxkIG5vZGVzLgogKi8="},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mutationobserver.js"],"names":["Observer","ViewSelection","startsWithFiller","getDataWithoutFiller","isEqualWith","MutationObserver","constructor","view","_config","childList","characterData","characterDataOldValue","subtree","domConverter","renderer","_renderer","_domElements","_mutationObserver","window","_onMutations","bind","flush","takeRecords","observe","domElement","push","isEnabled","enable","disable","disconnect","destroy","domMutations","length","mutatedTexts","Map","mutatedElements","Set","mutation","type","element","mapDomToView","target","is","_isBogusBrMutation","add","text","findCorrespondingViewText","has","parent","set","oldText","data","newText","node","parentNode","viewMutations","mutatedText","values","markToSync","viewElement","mapViewToDom","viewChildren","Array","from","getChildren","newViewChildren","domChildrenToView","withChildren","sameNodes","oldChildren","newChildren","domSelection","ownerDocument","getSelection","viewSelection","anchorNode","viewSelectionAnchor","domPositionToView","anchorOffset","viewSelectionFocus","focusNode","focusOffset","setFocus","document","fire","forceRender","child1","child2","isArray","addedNode","nextSibling","removedNodes","addedNodes","domToView"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/mutationobserver\n */\n\n/* globals window */\n\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { startsWithFiller, getDataWithoutFiller } from '../filler';\nimport { isEqualWith } from 'lodash-es';\n\n/**\n * Mutation observer class observes changes in the DOM, fires {@link module:engine/view/document~Document#event:mutations} event, mark view\n * elements as changed and call {@link module:engine/view/renderer~Renderer#render}.\n * Because all mutated nodes are marked as \"to be rendered\" and the\n * {@link module:engine/view/renderer~Renderer#render} is called, all changes will be reverted, unless the mutation will be handled by the\n * {@link module:engine/view/document~Document#event:mutations} event listener. It means user will see only handled changes, and the editor\n * will block all changes which are not handled.\n *\n * Mutation Observer also take care of reducing number of mutations which are fired. It removes duplicates and\n * mutations on elements which do not have corresponding view elements. Also\n * {@link module:engine/view/observer/mutationobserver~MutatedText text mutation} is fired only if parent element do not change child list.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class MutationObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Native mutation observer config.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._config = {\n\t\t\tchildList: true,\n\t\t\tcharacterData: true,\n\t\t\tcharacterDataOldValue: true,\n\t\t\tsubtree: true\n\t\t};\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#domConverter}.\n\t\t *\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = view.domConverter;\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#_renderer}.\n\t\t *\n\t\t * @member {module:engine/view/renderer~Renderer}\n\t\t */\n\t\tthis.renderer = view._renderer;\n\n\t\t/**\n\t\t * Observed DOM elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<HTMLElement>}\n\t\t */\n\t\tthis._domElements = [];\n\n\t\t/**\n\t\t * Native mutation observer.\n\t\t *\n\t\t * @private\n\t\t * @member {MutationObserver}\n\t\t */\n\t\tthis._mutationObserver = new window.MutationObserver( this._onMutations.bind( this ) );\n\t}\n\n\t/**\n\t * Synchronously fires {@link module:engine/view/document~Document#event:mutations} event with all mutations in record queue.\n\t * At the same time empties the queue so mutations will not be fired twice.\n\t */\n\tflush() {\n\t\tthis._onMutations( this._mutationObserver.takeRecords() );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tthis._domElements.push( domElement );\n\n\t\tif ( this.isEnabled ) {\n\t\t\tthis._mutationObserver.observe( domElement, this._config );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tenable() {\n\t\tsuper.enable();\n\n\t\tfor ( const domElement of this._domElements ) {\n\t\t\tthis._mutationObserver.observe( domElement, this._config );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisable() {\n\t\tsuper.disable();\n\n\t\tthis._mutationObserver.disconnect();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._mutationObserver.disconnect();\n\t}\n\n\t/**\n\t * Handles mutations. Deduplicates, mark view elements to sync, fire event and call render.\n\t *\n\t * @private\n\t * @param {Array.<Object>} domMutations Array of native mutations.\n\t */\n\t_onMutations( domMutations ) {\n\t\t// As a result of this.flush() we can have an empty collection.\n\t\tif ( domMutations.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domConverter = this.domConverter;\n\n\t\t// Use map and set for deduplication.\n\t\tconst mutatedTexts = new Map();\n\t\tconst mutatedElements = new Set();\n\n\t\t// Handle `childList` mutations first, so we will be able to check if the `characterData` mutation is in the\n\t\t// element with changed structure anyway.\n\t\tfor ( const mutation of domMutations ) {\n\t\t\tif ( mutation.type === 'childList' ) {\n\t\t\t\tconst element = domConverter.mapDomToView( mutation.target );\n\n\t\t\t\t// Do not collect mutations from UIElements.\n\t\t\t\tif ( element && element.is( 'uiElement' ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( element && !this._isBogusBrMutation( mutation ) ) {\n\t\t\t\t\tmutatedElements.add( element );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle `characterData` mutations later, when we have the full list of nodes which changed structure.\n\t\tfor ( const mutation of domMutations ) {\n\t\t\tconst element = domConverter.mapDomToView( mutation.target );\n\n\t\t\t// Do not collect mutations from UIElements.\n\t\t\tif ( element && element.is( 'uiElement' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( mutation.type === 'characterData' ) {\n\t\t\t\tconst text = domConverter.findCorrespondingViewText( mutation.target );\n\n\t\t\t\tif ( text && !mutatedElements.has( text.parent ) ) {\n\t\t\t\t\t// Use text as a key, for deduplication. If there will be another mutation on the same text element\n\t\t\t\t\t// we will have only one in the map.\n\t\t\t\t\tmutatedTexts.set( text, {\n\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\toldText: text.data,\n\t\t\t\t\t\tnewText: getDataWithoutFiller( mutation.target ),\n\t\t\t\t\t\tnode: text\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\t// When we added first letter to the text node which had only inline filler, for the DOM it is mutation\n\t\t\t\t// on text, but for the view, where filler text node did not existed, new text node was created, so we\n\t\t\t\t// need to fire 'children' mutation instead of 'text'.\n\t\t\t\telse if ( !text && startsWithFiller( mutation.target ) ) {\n\t\t\t\t\tmutatedElements.add( domConverter.mapDomToView( mutation.target.parentNode ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Now we build the list of mutations to fire and mark elements. We did not do it earlier to avoid marking the\n\t\t// same node multiple times in case of duplication.\n\n\t\t// List of mutations we will fire.\n\t\tconst viewMutations = [];\n\n\t\tfor ( const mutatedText of mutatedTexts.values() ) {\n\t\t\tthis.renderer.markToSync( 'text', mutatedText.node );\n\t\t\tviewMutations.push( mutatedText );\n\t\t}\n\n\t\tfor ( const viewElement of mutatedElements ) {\n\t\t\tconst domElement = domConverter.mapViewToDom( viewElement );\n\t\t\tconst viewChildren = Array.from( viewElement.getChildren() );\n\t\t\tconst newViewChildren = Array.from( domConverter.domChildrenToView( domElement, { withChildren: false } ) );\n\n\t\t\t// It may happen that as a result of many changes (sth was inserted and then removed),\n\t\t\t// both elements haven't really changed. #1031\n\t\t\tif ( !isEqualWith( viewChildren, newViewChildren, sameNodes ) ) {\n\t\t\t\tthis.renderer.markToSync( 'children', viewElement );\n\n\t\t\t\tviewMutations.push( {\n\t\t\t\t\ttype: 'children',\n\t\t\t\t\toldChildren: viewChildren,\n\t\t\t\t\tnewChildren: newViewChildren,\n\t\t\t\t\tnode: viewElement\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\t// Retrieve `domSelection` using `ownerDocument` of one of mutated nodes.\n\t\t// There should not be simultaneous mutation in multiple documents, so it's fine.\n\t\tconst domSelection = domMutations[ 0 ].target.ownerDocument.getSelection();\n\n\t\tlet viewSelection = null;\n\n\t\tif ( domSelection && domSelection.anchorNode ) {\n\t\t\t// If `domSelection` is inside a dom node that is already bound to a view node from view tree, get\n\t\t\t// corresponding selection in the view and pass it together with `viewMutations`. The `viewSelection` may\n\t\t\t// be used by features handling mutations.\n\t\t\t// Only one range is supported.\n\n\t\t\tconst viewSelectionAnchor = domConverter.domPositionToView( domSelection.anchorNode, domSelection.anchorOffset );\n\t\t\tconst viewSelectionFocus = domConverter.domPositionToView( domSelection.focusNode, domSelection.focusOffset );\n\n\t\t\t// Anchor and focus has to be properly mapped to view.\n\t\t\tif ( viewSelectionAnchor && viewSelectionFocus ) {\n\t\t\t\tviewSelection = new ViewSelection( viewSelectionAnchor );\n\t\t\t\tviewSelection.setFocus( viewSelectionFocus );\n\t\t\t}\n\t\t}\n\n\t\tthis.document.fire( 'mutations', viewMutations, viewSelection );\n\n\t\t// If nothing changes on `mutations` event, at this point we have \"dirty DOM\" (changed) and de-synched\n\t\t// view (which has not been changed). In order to \"reset DOM\" we render the view again.\n\t\tthis.view.forceRender();\n\n\t\tfunction sameNodes( child1, child2 ) {\n\t\t\t// First level of comparison (array of children vs array of children) – use the Lodash's default behavior.\n\t\t\tif ( Array.isArray( child1 ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Elements.\n\t\t\tif ( child1 === child2 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// Texts.\n\t\t\telse if ( child1.is( 'text' ) && child2.is( 'text' ) ) {\n\t\t\t\treturn child1.data === child2.data;\n\t\t\t}\n\n\t\t\t// Not matching types.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if mutation was generated by the browser inserting bogus br on the end of the block element.\n\t * Such mutations are generated while pressing space or performing native spellchecker correction\n\t * on the end of the block element in Firefox browser.\n\t *\n\t * @private\n\t * @param {Object} mutation Native mutation object.\n\t * @returns {Boolean}\n\t */\n\t_isBogusBrMutation( mutation ) {\n\t\tlet addedNode = null;\n\n\t\t// Check if mutation added only one node on the end of its parent.\n\t\tif ( mutation.nextSibling === null && mutation.removedNodes.length === 0 && mutation.addedNodes.length == 1 ) {\n\t\t\taddedNode = this.domConverter.domToView( mutation.addedNodes[ 0 ], {\n\t\t\t\twithChildren: false\n\t\t\t} );\n\t\t}\n\n\t\treturn addedNode && addedNode.is( 'element', 'br' );\n\t}\n}\n\n/**\n * Fired when mutation occurred. If tree view is not changed on this event, DOM will be reverted to the state before\n * mutation, so all changes which should be applied, should be handled on this event.\n *\n * Introduced by {@link module:engine/view/observer/mutationobserver~MutationObserver}.\n *\n * Note that because {@link module:engine/view/observer/mutationobserver~MutationObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @event module:engine/view/document~Document#event:mutations\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|module:engine/view/observer/mutationobserver~MutatedChildren>}\n * viewMutations Array of mutations.\n * For mutated texts it will be {@link module:engine/view/observer/mutationobserver~MutatedText} and for mutated elements it will be\n * {@link module:engine/view/observer/mutationobserver~MutatedChildren}. You can recognize the type based on the `type` property.\n * @param {module:engine/view/selection~Selection|null} viewSelection View selection that is a result of converting DOM selection to view.\n * Keep in\n * mind that the DOM selection is already \"updated\", meaning that it already acknowledges changes done in mutation.\n */\n\n/**\n * Mutation item for text.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedText\n *\n * @property {String} type For text mutations it is always 'text'.\n * @property {module:engine/view/text~Text} node Mutated text node.\n * @property {String} oldText Old text.\n * @property {String} newText New text.\n */\n\n/**\n * Mutation item for child nodes.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedText\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @property {String} type For child nodes mutations it is always 'children'.\n * @property {module:engine/view/element~Element} node Parent of the mutated children.\n * @property {Array.<module:engine/view/node~Node>} oldChildren Old child nodes.\n * @property {Array.<module:engine/view/node~Node>} newChildren New child nodes.\n */\n"]}]}