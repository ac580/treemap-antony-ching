{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-autoformat/src/inlineautoformatediting.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-autoformat/src/inlineautoformatediting.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-autoformat/src/inlineautoformatediting.js"],"names":["getLastTextLine","InlineAutoformatEditing","pluginName","constructor","editor","testRegexpOrCallback","attributeOrCallback","regExp","attributeKey","testCallback","formatCallback","RegExp","text","result","remove","format","exec","length","index","leftDel","content","rightDel","found","delStart","delEnd","push","writer","rangesToFormat","validRanges","model","schema","getValidRanges","range","setAttribute","removeSelectionAttribute","document","on","evt","batch","type","selection","isCollapsed","changes","Array","from","differ","getChanges","entry","name","focus","block","parent","createRange","createPositionAt","testOutput","testOutputToRanges","start","rangesToRemove","enqueueChange","hasChanged","reverse","arrays","filter","array","undefined","map","getShiftedBy"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/inlineautoformatediting\n */\n\nimport getLastTextLine from '@ckeditor/ckeditor5-typing/src/utils/getlasttextline';\n\n/**\n * The inline autoformatting engine. It allows to format various inline patterns. For example,\n * it can be configured to make \"foo\" bold when typed `**foo**` (the `**` markers will be removed).\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the constructors documentation to learn how to create custom inline autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n */\nexport default class InlineAutoformatEditing {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'InlineAutoformatEditing';\n\t}\n\n\t/**\n\t * Enables autoformatting mechanism for a given {@link module:core/editor/editor~Editor}.\n\t *\n\t * It formats the matched text by applying the given model attribute or by running the provided formatting callback.\n\t * On every change applied to the model the autoformatting engine checks the text on the left of the selection\n\t * and executes the provided action if the text matches given criteria (regular expression or callback).\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {Function|RegExp} testRegexpOrCallback The regular expression or callback to execute on text.\n\t * Provided regular expression *must* have three capture groups. The first and the third capture group\n\t * should match opening and closing delimiters. The second capture group should match the text to format.\n\t *\n\t *\t\t// Matches the `**bold text**` pattern.\n\t *\t\t// There are three capturing groups:\n\t *\t\t// - The first to match the starting `**` delimiter.\n\t *\t\t// - The second to match the text to format.\n\t *\t\t// - The third to match the ending `**` delimiter.\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, 'bold' );\n\t *\n\t * When a function is provided instead of the regular expression, it will be executed with the text to match as a parameter.\n\t * The function should return proper \"ranges\" to delete and format.\n\t *\n\t *\t\t{\n\t *\t\t\tremove: [\n\t *\t\t\t\t[ 0, 1 ],\t// Remove the first letter from the given text.\n\t *\t\t\t\t[ 5, 6 ]\t// Remove the 6th letter from the given text.\n\t *\t\t\t],\n\t *\t\t\tformat: [\n\t *\t\t\t\t[ 1, 5 ]\t// Format all letters from 2nd to 5th.\n\t *\t\t\t]\n\t *\t\t}\n\t *\n\t * @param {Function|String} attributeOrCallback The name of attribute to apply on matching text or a callback for manual\n\t * formatting. If callback is passed it should return `false` if changes should not be applied (e.g. if a command is disabled).\n\t *\n\t *\t\t// Use attribute name:\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, 'bold' );\n\t *\n\t *\t\t// Use formatting callback:\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, ( writer, rangesToFormat ) => {\n\t *\t\t\tconst command = editor.commands.get( 'bold' );\n\t *\n\t *\t\t\tif ( !command.isEnabled ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\n\t *\t\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, 'bold' );\n\t *\n\t *\t\t\tfor ( let range of validRanges ) {\n\t *\t\t\t\twriter.setAttribute( 'bold', true, range );\n\t *\t\t\t}\n\t *\t\t} );\n\t */\n\tconstructor( editor, testRegexpOrCallback, attributeOrCallback ) {\n\t\tlet regExp;\n\t\tlet attributeKey;\n\t\tlet testCallback;\n\t\tlet formatCallback;\n\n\t\tif ( testRegexpOrCallback instanceof RegExp ) {\n\t\t\tregExp = testRegexpOrCallback;\n\t\t} else {\n\t\t\ttestCallback = testRegexpOrCallback;\n\t\t}\n\n\t\tif ( typeof attributeOrCallback == 'string' ) {\n\t\t\tattributeKey = attributeOrCallback;\n\t\t} else {\n\t\t\tformatCallback = attributeOrCallback;\n\t\t}\n\n\t\t// A test callback run on changed text.\n\t\ttestCallback = testCallback || ( text => {\n\t\t\tlet result;\n\t\t\tconst remove = [];\n\t\t\tconst format = [];\n\n\t\t\twhile ( ( result = regExp.exec( text ) ) !== null ) {\n\t\t\t\t// There should be full match and 3 capture groups.\n\t\t\t\tif ( result && result.length < 4 ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet {\n\t\t\t\t\tindex,\n\t\t\t\t\t'1': leftDel,\n\t\t\t\t\t'2': content,\n\t\t\t\t\t'3': rightDel\n\t\t\t\t} = result;\n\n\t\t\t\t// Real matched string - there might be some non-capturing groups so we need to recalculate starting index.\n\t\t\t\tconst found = leftDel + content + rightDel;\n\t\t\t\tindex += result[ 0 ].length - found.length;\n\n\t\t\t\t// Start and End offsets of delimiters to remove.\n\t\t\t\tconst delStart = [\n\t\t\t\t\tindex,\n\t\t\t\t\tindex + leftDel.length\n\t\t\t\t];\n\t\t\t\tconst delEnd = [\n\t\t\t\t\tindex + leftDel.length + content.length,\n\t\t\t\t\tindex + leftDel.length + content.length + rightDel.length\n\t\t\t\t];\n\n\t\t\t\tremove.push( delStart );\n\t\t\t\tremove.push( delEnd );\n\n\t\t\t\tformat.push( [ index + leftDel.length, index + leftDel.length + content.length ] );\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tremove,\n\t\t\t\tformat\n\t\t\t};\n\t\t} );\n\n\t\t// A format callback run on matched text.\n\t\tformatCallback = formatCallback || ( ( writer, rangesToFormat ) => {\n\t\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, attributeKey );\n\n\t\t\tfor ( const range of validRanges ) {\n\t\t\t\twriter.setAttribute( attributeKey, true, range );\n\t\t\t}\n\n\t\t\t// After applying attribute to the text, remove given attribute from the selection.\n\t\t\t// This way user is able to type a text without attribute used by auto formatter.\n\t\t\twriter.removeSelectionAttribute( attributeKey );\n\t\t} );\n\n\t\teditor.model.document.on( 'change', ( evt, batch ) => {\n\t\t\tif ( batch.type == 'transparent' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst model = editor.model;\n\t\t\tconst selection = model.document.selection;\n\n\t\t\t// Do nothing if selection is not collapsed.\n\t\t\tif ( !selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst changes = Array.from( model.document.differ.getChanges() );\n\t\t\tconst entry = changes[ 0 ];\n\n\t\t\t// Typing is represented by only a single change.\n\t\t\tif ( changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst focus = selection.focus;\n\t\t\tconst block = focus.parent;\n\t\t\tconst { text, range } = getLastTextLine( model.createRange( model.createPositionAt( block, 0 ), focus ), model );\n\t\t\tconst testOutput = testCallback( text );\n\t\t\tconst rangesToFormat = testOutputToRanges( range.start, testOutput.format, model );\n\t\t\tconst rangesToRemove = testOutputToRanges( range.start, testOutput.remove, model );\n\n\t\t\tif ( !( rangesToFormat.length && rangesToRemove.length ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n\t\t\tmodel.enqueueChange( writer => {\n\t\t\t\t// Apply format.\n\t\t\t\tconst hasChanged = formatCallback( writer, rangesToFormat );\n\n\t\t\t\t// Strict check on `false` to have backward compatibility (when callbacks were returning `undefined`).\n\t\t\t\tif ( hasChanged === false ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Remove delimiters - use reversed order to not mix the offsets while removing.\n\t\t\t\tfor ( const range of rangesToRemove.reverse() ) {\n\t\t\t\t\twriter.remove( range );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n}\n\n// Converts output of the test function provided to the InlineAutoformatEditing and converts it to the model ranges\n// inside provided block.\n//\n// @private\n// @param {module:engine/model/position~Position} start\n// @param {Array.<Array>} arrays\n// @param {module:engine/model/model~Model} model\nfunction testOutputToRanges( start, arrays, model ) {\n\treturn arrays\n\t\t.filter( array => ( array[ 0 ] !== undefined && array[ 1 ] !== undefined ) )\n\t\t.map( array => {\n\t\t\treturn model.createRange( start.getShiftedBy( array[ 0 ] ), start.getShiftedBy( array[ 1 ] ) );\n\t\t} );\n}\n"]}]}