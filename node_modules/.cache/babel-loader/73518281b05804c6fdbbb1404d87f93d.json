{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/upcastwriter.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/upcastwriter.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/upcastwriter.js"],"names":["DocumentFragment","Element","Text","isPlainObject","Position","Range","Selection","UpcastWriter","createDocumentFragment","children","createElement","name","attrs","createText","data","clone","element","deep","_clone","appendChild","items","_appendChild","insertChild","index","_insertChild","removeChildren","howMany","_removeChildren","remove","parent","getChildIndex","replace","oldElement","newElement","unwrapElement","getChildren","rename","newName","getAttributes","setAttribute","key","value","_setAttribute","removeAttribute","_removeAttribute","addClass","className","_addClass","removeClass","_removeClass","setStyle","property","undefined","_setStyle","removeStyle","_removeStyle","setCustomProperty","_setCustomProperty","removeCustomProperty","_removeCustomProperty","createPositionAt","itemOrPosition","offset","_createAt","createPositionAfter","item","_createAfter","createPositionBefore","_createBefore","createRange","start","end","createRangeOn","_createOn","createRangeIn","_createIn","createSelection","selectable","placeOrOffset","options"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/view/upcastwriter\n */\n\nimport DocumentFragment from './documentfragment';\nimport Element from './element';\nimport Text from './text';\nimport { isPlainObject } from 'lodash-es';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\n\n/**\n * View upcast writer. It provides a set of methods used to manipulate non-semantic view trees.\n *\n * It should be used only while working on a non-semantic view\n * (e.g. a view created from HTML string on paste).\n * To manipulate a view which was or is being downcasted from the the model use the\n * {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.\n *\n * Read more about changing the view in the {@glink framework/guides/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide.\n *\n * Unlike `DowncastWriter`, which is available in the {@link module:engine/view/view~View#change `View#change()`} block,\n * `UpcastWriter` can be created wherever you need it:\n *\n *\t\tconst writer = new UpcastWriter();\n *\t\tconst text = writer.createText( 'foo!' );\n *\n *\t\twriter.appendChild( text, someViewElement );\n */\nexport default class UpcastWriter {\n\t/**\n\t * Creates a new {@link module:engine/view/documentfragment~DocumentFragment} instance.\n\t *\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into the created document fragment.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} The created document fragment.\n\t */\n\tcreateDocumentFragment( children ) {\n\t\treturn new DocumentFragment( children );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/element~Element} instance.\n\t *\n\t * Attributes can be passed in various formats:\n\t *\n\t *\t\tupcastWriter.createElement( 'div', { class: 'editor', contentEditable: 'true' } ); // object\n\t *\t\tupcastWriter.createElement( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n\t *\t\tupcastWriter.createElement( 'div', mapOfAttributes ); // map\n\t *\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into created element.\n\t * @returns {module:engine/view/element~Element} Created element.\n\t */\n\tcreateElement( name, attrs, children ) {\n\t\treturn new Element( name, attrs, children );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/text~Text} instance.\n\t *\n\t * @param {String} data The text's data.\n\t * @returns {module:engine/view/text~Text} The created text node.\n\t */\n\tcreateText( data ) {\n\t\treturn new Text( data );\n\t}\n\n\t/**\n\t * Clones the provided element.\n\t *\n\t * @see module:engine/view/element~Element#_clone\n\t * @param {module:engine/view/element~Element} element Element to be cloned.\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/element~Element} Clone of this element.\n\t */\n\tclone( element, deep = false ) {\n\t\treturn element._clone( deep );\n\t}\n\n\t/**\n\t * Appends a child node or a list of child nodes at the end of this node\n\t * and sets the parent of these nodes to this element.\n\t *\n\t * @see module:engine/view/element~Element#_appendChild\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n\t * to which items will be appended.\n\t * @fires module:engine/view/node~Node#event:change\n\t * @returns {Number} Number of appended nodes.\n\t */\n\tappendChild( items, element ) {\n\t\treturn element._appendChild( items );\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this element.\n\t *\n\t * @see module:engine/view/element~Element#_insertChild\n\t * @param {Number} index Offset at which nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n\t * to which items will be inserted.\n\t * @fires module:engine/view/node~Node#event:change\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\tinsertChild( index, items, element ) {\n\t\treturn element._insertChild( index, items );\n\t}\n\n\t/**\n\t * Removes the given number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @see module:engine/view/element~Element#_removeChildren\n\t * @param {Number} index Offset from which nodes will be removed.\n\t * @param {Number} howMany Number of nodes to remove.\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n\t * which children will be removed.\n\t * @fires module:engine/view/node~Node#event:change\n\t * @returns {Array.<module:engine/view/node~Node>} The array containing removed nodes.\n\t */\n\tremoveChildren( index, howMany, element ) {\n\t\treturn element._removeChildren( index, howMany );\n\t}\n\n\t/**\n\t * Removes given element from the view structure. Will not have effect on detached elements.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which will be removed.\n\t * @returns {Array.<module:engine/view/node~Node>} The array containing removed nodes.\n\t */\n\tremove( element ) {\n\t\tconst parent = element.parent;\n\n\t\tif ( parent ) {\n\t\t\treturn this.removeChildren( parent.getChildIndex( element ), 1, parent );\n\t\t}\n\n\t\treturn [];\n\t}\n\n\t/**\n\t * Replaces given element with the new one in the view structure. Will not have effect on detached elements.\n\t *\n\t * @param {module:engine/view/element~Element} oldElement Element which will be replaced.\n\t * @param {module:engine/view/element~Element} newElement Element which will be inserted in the place of the old element.\n\t * @returns {Boolean} Whether old element was successfully replaced.\n\t */\n\treplace( oldElement, newElement ) {\n\t\tconst parent = oldElement.parent;\n\n\t\tif ( parent ) {\n\t\t\tconst index = parent.getChildIndex( oldElement );\n\n\t\t\tthis.removeChildren( index, 1, parent );\n\t\t\tthis.insertChild( index, newElement, parent );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Removes given element from view structure and places its children in its position.\n\t * It does nothing if element has no parent.\n\t *\n\t * @param {module:engine/view/element~Element} element Element to unwrap.\n\t */\n\tunwrapElement( element ) {\n\t\tconst parent = element.parent;\n\n\t\tif ( parent ) {\n\t\t\tconst index = parent.getChildIndex( element );\n\n\t\t\tthis.remove( element );\n\t\t\tthis.insertChild( index, element.getChildren(), parent );\n\t\t}\n\t}\n\n\t/**\n\t * Renames element by creating a copy of a given element but with its name changed and then moving contents of the\n\t * old element to the new one.\n\t *\n\t * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n\t *\n\t * @param {String} newName New element name.\n\t * @param {module:engine/view/element~Element} element Element to be renamed.\n\t * @returns {module:engine/view/element~Element|null} New element or null if the old element\n\t * was not replaced (happens for detached elements).\n\t */\n\trename( newName, element ) {\n\t\tconst newElement = new Element( newName, element.getAttributes(), element.getChildren() );\n\n\t\treturn this.replace( element, newElement ) ? newElement : null;\n\t}\n\n\t/**\n\t * Adds or overwrites element's attribute with a specified key and value.\n\t *\n\t *\t\twriter.setAttribute( linkElement, 'href', 'http://ckeditor.com' );\n\t *\n\t * @see module:engine/view/element~Element#_setAttribute\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @param {module:engine/view/element~Element} element Element for which attribute will be set.\n\t */\n\tsetAttribute( key, value, element ) {\n\t\telement._setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t *\t\twriter.removeAttribute( linkElement, 'href' );\n\t *\n\t * @see module:engine/view/element~Element#_removeAttribute\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/view/element~Element} element Element from which attribute will be removed.\n\t */\n\tremoveAttribute( key, element ) {\n\t\telement._removeAttribute( key );\n\t}\n\n\t/**\n\t * Adds specified class to the element.\n\t *\n\t *\t\twriter.addClass( linkElement, 'foo' );\n\t *\t\twriter.addClass( linkElement, [ 'foo', 'bar' ] );\n\t *\n\t * @see module:engine/view/element~Element#_addClass\n\t * @param {Array.<String>|String} className Single class name or array of class names which will be added.\n\t * @param {module:engine/view/element~Element} element Element for which class will be added.\n\t */\n\taddClass( className, element ) {\n\t\telement._addClass( className );\n\t}\n\n\t/**\n\t * Removes specified class from the element.\n\t *\n\t *\t\twriter.removeClass( linkElement, 'foo' );\n\t *\t\twriter.removeClass( linkElement, [ 'foo', 'bar' ] );\n\t *\n\t * @see module:engine/view/element~Element#_removeClass\n\t * @param {Array.<String>|String} className Single class name or array of class names which will be removed.\n\t * @param {module:engine/view/element~Element} element Element from which class will be removed.\n\t */\n\tremoveClass( className, element ) {\n\t\telement._removeClass( className );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\twriter.setStyle( element, 'color', 'red' );\n\t *\t\twriter.setStyle( element, {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t} );\n\t *\n\t * @see module:engine/view/element~Element#_setStyle\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @param {module:engine/view/element~Element} element Element for which style will be added.\n\t */\n\tsetStyle( property, value, element ) {\n\t\tif ( isPlainObject( property ) && element === undefined ) {\n\t\t\telement = value;\n\t\t}\n\t\telement._setStyle( property, value );\n\t}\n\n\t/**\n\t * Removes specified style from the element.\n\t *\n\t *\t\twriter.removeStyle( element, 'color' );  // Removes 'color' style.\n\t *\t\twriter.removeStyle( element, [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @see module:engine/view/element~Element#_removeStyle\n\t * @param {Array.<String>|String} property Style property name or names to be removed.\n\t * @param {module:engine/view/element~Element} element Element from which style will be removed.\n\t */\n\tremoveStyle( property, element ) {\n\t\telement._removeStyle( property );\n\t}\n\n\t/**\n\t * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @see module:engine/view/element~Element#_setCustomProperty\n\t * @param {String|Symbol} key Custom property name/key.\n\t * @param {*} value Custom property value to be stored.\n\t * @param {module:engine/view/element~Element} element Element for which custom property will be set.\n\t */\n\tsetCustomProperty( key, value, element ) {\n\t\telement._setCustomProperty( key, value );\n\t}\n\n\t/**\n\t * Removes a custom property stored under the given key.\n\t *\n\t * @see module:engine/view/element~Element#_removeCustomProperty\n\t * @param {String|Symbol} key Name/key of the custom property to be removed.\n\t * @param {module:engine/view/element~Element} element Element from which the custom property will be removed.\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\tremoveCustomProperty( key, element ) {\n\t\treturn element._removeCustomProperty( key );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n}\n"]}]}