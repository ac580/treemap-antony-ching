{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/containerelement.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/containerelement.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS92aWV3L2NvbnRhaW5lcmVsZW1lbnQKICovCmltcG9ydCBFbGVtZW50IGZyb20gJy4vZWxlbWVudCc7Ci8qKgogKiBDb250YWluZXJzIGFyZSBlbGVtZW50cyB3aGljaCBkZWZpbmUgZG9jdW1lbnQgc3RydWN0dXJlLiBUaGV5IGRlZmluZSBib3VuZGFyaWVzIGZvcgogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2F0dHJpYnV0ZWVsZW1lbnR+QXR0cmlidXRlRWxlbWVudCBhdHRyaWJ1dGVzfS4gVGhleSBhcmUgbW9zdGx5IHVzZWQgZm9yIGJsb2NrIGVsZW1lbnRzIGxpa2UgYDxwPmAgb3IgYDxkaXY+YC4KICoKICogRWRpdGluZyBlbmdpbmUgZG9lcyBub3QgZGVmaW5lIGEgZml4ZWQgSFRNTCBEVEQuIFRoaXMgaXMgd2h5IGEgZmVhdHVyZSBkZXZlbG9wZXIgbmVlZHMgdG8gY2hvb3NlIGJldHdlZW4gdmFyaW91cwogKiB0eXBlcyAoY29udGFpbmVyIGVsZW1lbnQsIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvYXR0cmlidXRlZWxlbWVudH5BdHRyaWJ1dGVFbGVtZW50IGF0dHJpYnV0ZSBlbGVtZW50fSwKICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9lbXB0eWVsZW1lbnR+RW1wdHlFbGVtZW50IGVtcHR5IGVsZW1lbnR9LCBldGMpIHdoZW4gZGV2ZWxvcGluZyBhIGZlYXR1cmUuCiAqCiAqIFRoZSBjb250YWluZXIgZWxlbWVudCBzaG91bGQgYmUgeW91ciBkZWZhdWx0IGNob2ljZSB3aGVuIHdyaXRpbmcgYSBjb252ZXJ0ZXIsIHVubGVzczoKICoKICogKiB0aGlzIGVsZW1lbnQgcmVwcmVzZW50cyBhIG1vZGVsIHRleHQgYXR0cmlidXRlICh0aGVuIHVzZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2F0dHJpYnV0ZWVsZW1lbnR+QXR0cmlidXRlRWxlbWVudH0pLAogKiAqIHRoaXMgaXMgYW4gZW1wdHkgZWxlbWVudCBsaWtlIGA8aW1nPmAgKHRoZW4gdXNlIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZW1wdHllbGVtZW50fkVtcHR5RWxlbWVudH0pLAogKiAqIHRoaXMgaXMgYSByb290IGVsZW1lbnQsCiAqICogdGhpcyBpcyBhIG5lc3RlZCBlZGl0YWJsZSBlbGVtZW50ICh0aGVuIHVzZSAge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9lZGl0YWJsZWVsZW1lbnR+RWRpdGFibGVFbGVtZW50fSkuCiAqCiAqIFRvIGNyZWF0ZSBhIG5ldyBjb250YWluZXIgZWxlbWVudCBpbnN0YW5jZSB1c2UgdGhlCiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG93bmNhc3R3cml0ZXJ+RG93bmNhc3RXcml0ZXIjY3JlYXRlQ29udGFpbmVyRWxlbWVudCBgRG93bmNhc3RXcml0ZXIjY3JlYXRlQ29udGFpbmVyRWxlbWVudCgpYH0KICogbWV0aG9kLgogKgogKiBAZXh0ZW5kcyBtb2R1bGU6ZW5naW5lL3ZpZXcvZWxlbWVudH5FbGVtZW50CiAqLwoKZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGFpbmVyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQgewogIC8qKgogICAqIENyZWF0ZXMgYSBjb250YWluZXIgZWxlbWVudC4KICAgKgogICAqIEBzZWUgbW9kdWxlOmVuZ2luZS92aWV3L2Rvd25jYXN0d3JpdGVyfkRvd25jYXN0V3JpdGVyI2NyZWF0ZUNvbnRhaW5lckVsZW1lbnQKICAgKiBAc2VlIG1vZHVsZTplbmdpbmUvdmlldy9lbGVtZW50fkVsZW1lbnQKICAgKiBAcHJvdGVjdGVkCiAgICovCiAgY29uc3RydWN0b3IobmFtZSwgYXR0cnMsIGNoaWxkcmVuKSB7CiAgICBzdXBlcihuYW1lLCBhdHRycywgY2hpbGRyZW4pOwogICAgLyoqCiAgICAgKiBSZXR1cm5zIGJsb2NrIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZmlsbGVyIGZpbGxlcn0gb2Zmc2V0IG9yIGBudWxsYCBpZiBibG9jayBmaWxsZXIgaXMgbm90IG5lZWRlZC4KICAgICAqCiAgICAgKiBAbWV0aG9kICNnZXRGaWxsZXJPZmZzZXQKICAgICAqIEByZXR1cm5zIHtOdW1iZXJ8bnVsbH0gQmxvY2sgZmlsbGVyIG9mZnNldCBvciBgbnVsbGAgaWYgYmxvY2sgZmlsbGVyIGlzIG5vdCBuZWVkZWQuCiAgICAgKi8KCiAgICB0aGlzLmdldEZpbGxlck9mZnNldCA9IGdldEZpbGxlck9mZnNldDsKICB9CiAgLyoqCiAgICogQ2hlY2tzIHdoZXRoZXIgdGhpcyBvYmplY3QgaXMgb2YgdGhlIGdpdmVuLgogICAqCiAgICoJCWNvbnRhaW5lckVsZW1lbnQuaXMoICdjb250YWluZXJFbGVtZW50JyApOyAvLyAtPiB0cnVlCiAgICoJCWNvbnRhaW5lckVsZW1lbnQuaXMoICdlbGVtZW50JyApOyAvLyAtPiB0cnVlCiAgICoJCWNvbnRhaW5lckVsZW1lbnQuaXMoICdub2RlJyApOyAvLyAtPiB0cnVlCiAgICoJCWNvbnRhaW5lckVsZW1lbnQuaXMoICd2aWV3OmNvbnRhaW5lckVsZW1lbnQnICk7IC8vIC0+IHRydWUKICAgKgkJY29udGFpbmVyRWxlbWVudC5pcyggJ3ZpZXc6ZWxlbWVudCcgKTsgLy8gLT4gdHJ1ZQogICAqCQljb250YWluZXJFbGVtZW50LmlzKCAndmlldzpub2RlJyApOyAvLyAtPiB0cnVlCiAgICoKICAgKgkJY29udGFpbmVyRWxlbWVudC5pcyggJ21vZGVsOmVsZW1lbnQnICk7IC8vIC0+IGZhbHNlCiAgICoJCWNvbnRhaW5lckVsZW1lbnQuaXMoICdkb2N1bWVudEZyYWdtZW50JyApOyAvLyAtPiBmYWxzZQogICAqCiAgICogQXNzdW1pbmcgdGhhdCB0aGUgb2JqZWN0IGJlaW5nIGNoZWNrZWQgaXMgYSBjb250YWluZXIgZWxlbWVudCwgeW91IGNhbiBhbHNvIGNoZWNrIGl0cwogICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvY29udGFpbmVyZWxlbWVudH5Db250YWluZXJFbGVtZW50I25hbWUgbmFtZX06CiAgICoKICAgKgkJY29udGFpbmVyRWxlbWVudC5pcyggJ2RpdicgKTsgLy8gLT4gdHJ1ZSBpZiB0aGlzIGlzIGEgZGl2IGNvbnRhaW5lciBlbGVtZW50CiAgICoJCWNvbnRhaW5lckVsZW1lbnQuaXMoICdjb250YWllbnJFbGVtZW50JywgJ2RpdicgKTsgLy8gLT4gc2FtZSBhcyBhYm92ZQogICAqCQl0ZXh0LmlzKCAnZGl2JyApOyAtPiBmYWxzZQogICAqCiAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGUjaXMgQ2hlY2sgdGhlIGVudGlyZSBsaXN0IG9mIHZpZXcgb2JqZWN0c30gd2hpY2ggaW1wbGVtZW50IHRoZSBgaXMoKWAgbWV0aG9kLgogICAqCiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVHlwZSB0byBjaGVjayB3aGVuIGBuYW1lYCBwYXJhbWV0ZXIgaXMgcHJlc2VudC4KICAgKiBPdGhlcndpc2UsIGl0IGFjdHMgbGlrZSB0aGUgYG5hbWVgIHBhcmFtZXRlci4KICAgKiBAcGFyYW0ge1N0cmluZ30gW25hbWVdIEVsZW1lbnQgbmFtZS4KICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0KICAgKi8KCgogIGlzKHR5cGUsIG5hbWUgPSBudWxsKSB7CiAgICBjb25zdCBjdXRUeXBlID0gdHlwZSAmJiB0eXBlLnJlcGxhY2UoL152aWV3Oi8sICcnKTsKCiAgICBpZiAoIW5hbWUpIHsKICAgICAgcmV0dXJuIGN1dFR5cGUgPT0gJ2NvbnRhaW5lckVsZW1lbnQnIHx8IHN1cGVyLmlzKHR5cGUpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGN1dFR5cGUgPT0gJ2NvbnRhaW5lckVsZW1lbnQnICYmIG5hbWUgPT0gdGhpcy5uYW1lIHx8IHN1cGVyLmlzKHR5cGUsIG5hbWUpOwogICAgfQogIH0KCn0KLyoqCiAqIFJldHVybnMgYmxvY2sge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9maWxsZXIgZmlsbGVyfSBvZmZzZXQgb3IgYG51bGxgIGlmIGJsb2NrIGZpbGxlciBpcyBub3QgbmVlZGVkLgogKgogKiBAcmV0dXJucyB7TnVtYmVyfG51bGx9IEJsb2NrIGZpbGxlciBvZmZzZXQgb3IgYG51bGxgIGlmIGJsb2NrIGZpbGxlciBpcyBub3QgbmVlZGVkLgogKi8KCmV4cG9ydCBmdW5jdGlvbiBnZXRGaWxsZXJPZmZzZXQoKSB7CiAgY29uc3QgY2hpbGRyZW4gPSBbLi4udGhpcy5nZXRDaGlsZHJlbigpXTsKICBjb25zdCBsYXN0Q2hpbGQgPSBjaGlsZHJlblt0aGlzLmNoaWxkQ291bnQgLSAxXTsgLy8gQmxvY2sgZmlsbGVyIGlzIHJlcXVpcmVkIGFmdGVyIGEgYDxicj5gIGlmIGl0J3MgdGhlIGxhc3QgZWxlbWVudCBpbiBpdHMgY29udGFpbmVyLiBTZWUgIzE0MjIuCgogIGlmIChsYXN0Q2hpbGQgJiYgbGFzdENoaWxkLmlzKCdlbGVtZW50JywgJ2JyJykpIHsKICAgIHJldHVybiB0aGlzLmNoaWxkQ291bnQ7CiAgfQoKICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7CiAgICAvLyBJZiB0aGVyZSdzIGFueSBub24tVUkgZWxlbWVudCDigJMgZG9uJ3QgcmVuZGVyIHRoZSBib2d1cy4KICAgIGlmICghY2hpbGQuaXMoJ3VpRWxlbWVudCcpKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0gLy8gSWYgdGhlcmUgYXJlIG9ubHkgVUkgZWxlbWVudHMg4oCTIHJlbmRlciB0aGUgYm9ndXMgYXQgdGhlIGVuZCBvZiB0aGUgZWxlbWVudC4KCgogIHJldHVybiB0aGlzLmNoaWxkQ291bnQ7Cn0="},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/containerelement.js"],"names":["Element","ContainerElement","constructor","name","attrs","children","getFillerOffset","is","type","cutType","replace","getChildren","lastChild","childCount","child"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,OAAP,MAAoB,WAApB;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,eAAe,MAAMC,gBAAN,SAA+BD,OAA/B,CAAuC;AACrD;;;;;;;AAOAE,EAAAA,WAAW,CAAEC,IAAF,EAAQC,KAAR,EAAeC,QAAf,EAA0B;AACpC,UAAOF,IAAP,EAAaC,KAAb,EAAoBC,QAApB;AAEA;;;;;;;AAMA,SAAKC,eAAL,GAAuBA,eAAvB;AACA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAC,EAAAA,EAAE,CAAEC,IAAF,EAAQL,IAAI,GAAG,IAAf,EAAsB;AACvB,UAAMM,OAAO,GAAGD,IAAI,IAAIA,IAAI,CAACE,OAAL,CAAc,QAAd,EAAwB,EAAxB,CAAxB;;AACA,QAAK,CAACP,IAAN,EAAa;AACZ,aAAOM,OAAO,IAAI,kBAAX,IAAiC,MAAMF,EAAN,CAAUC,IAAV,CAAxC;AACA,KAFD,MAEO;AACN,aAASC,OAAO,IAAI,kBAAX,IAAiCN,IAAI,IAAI,KAAKA,IAAhD,IAA0D,MAAMI,EAAN,CAAUC,IAAV,EAAgBL,IAAhB,CAAjE;AACA;AACD;;AAtDoD;AAyDtD;;;;;;AAKA,OAAO,SAASG,eAAT,GAA2B;AACjC,QAAMD,QAAQ,GAAG,CAAE,GAAG,KAAKM,WAAL,EAAL,CAAjB;AACA,QAAMC,SAAS,GAAGP,QAAQ,CAAE,KAAKQ,UAAL,GAAkB,CAApB,CAA1B,CAFiC,CAIjC;;AACA,MAAKD,SAAS,IAAIA,SAAS,CAACL,EAAV,CAAc,SAAd,EAAyB,IAAzB,CAAlB,EAAoD;AACnD,WAAO,KAAKM,UAAZ;AACA;;AAED,OAAM,MAAMC,KAAZ,IAAqBT,QAArB,EAAgC;AAC/B;AACA,QAAK,CAACS,KAAK,CAACP,EAAN,CAAU,WAAV,CAAN,EAAgC;AAC/B,aAAO,IAAP;AACA;AACD,GAdgC,CAgBjC;;;AACA,SAAO,KAAKM,UAAZ;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/containerelement\n */\n\nimport Element from './element';\n\n/**\n * Containers are elements which define document structure. They define boundaries for\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly used for block elements like `<p>` or `<div>`.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * The container element should be your default choice when writing a converter, unless:\n *\n * * this element represents a model text attribute (then use {@link module:engine/view/attributeelement~AttributeElement}),\n * * this is an empty element like `<img>` (then use {@link module:engine/view/emptyelement~EmptyElement}),\n * * this is a root element,\n * * this is a nested editable element (then use  {@link module:engine/view/editableelement~EditableElement}).\n *\n * To create a new container element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `DowncastWriter#createContainerElement()`}\n * method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class ContainerElement extends Element {\n\t/**\n\t * Creates a container element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createContainerElement\n\t * @see module:engine/view/element~Element\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tcontainerElement.is( 'containerElement' ); // -> true\n\t *\t\tcontainerElement.is( 'element' ); // -> true\n\t *\t\tcontainerElement.is( 'node' ); // -> true\n\t *\t\tcontainerElement.is( 'view:containerElement' ); // -> true\n\t *\t\tcontainerElement.is( 'view:element' ); // -> true\n\t *\t\tcontainerElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\tcontainerElement.is( 'model:element' ); // -> false\n\t *\t\tcontainerElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is a container element, you can also check its\n\t * {@link module:engine/view/containerelement~ContainerElement#name name}:\n\t *\n\t *\t\tcontainerElement.is( 'div' ); // -> true if this is a div container element\n\t *\t\tcontainerElement.is( 'contaienrElement', 'div' ); // -> same as above\n\t *\t\ttext.is( 'div' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type && type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'containerElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'containerElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n}\n\n/**\n * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n *\n * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n */\nexport function getFillerOffset() {\n\tconst children = [ ...this.getChildren() ];\n\tconst lastChild = children[ this.childCount - 1 ];\n\n\t// Block filler is required after a `<br>` if it's the last element in its container. See #1422.\n\tif ( lastChild && lastChild.is( 'element', 'br' ) ) {\n\t\treturn this.childCount;\n\t}\n\n\tfor ( const child of children ) {\n\t\t// If there's any non-UI element – don't render the bogus.\n\t\tif ( !child.is( 'uiElement' ) ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// If there are only UI elements – render the bogus at the end of the element.\n\treturn this.childCount;\n}\n"]}]}