{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-ui/src/icon/iconview.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-ui/src/icon/iconview.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qIGdsb2JhbCBET01QYXJzZXIgKi8KCi8qKgogKiBAbW9kdWxlIHVpL2ljb24vaWNvbnZpZXcKICovCmltcG9ydCBWaWV3IGZyb20gJy4uL3ZpZXcnOwppbXBvcnQgJy4uLy4uL3RoZW1lL2NvbXBvbmVudHMvaWNvbi9pY29uLmNzcyc7Ci8qKgogKiBUaGUgaWNvbiB2aWV3IGNsYXNzLgogKgogKiBAZXh0ZW5kcyBtb2R1bGU6dWkvdmlld35WaWV3CiAqLwoKZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWNvblZpZXcgZXh0ZW5kcyBWaWV3IHsKICAvKioKICAgKiBAaW5oZXJpdERvYwogICAqLwogIGNvbnN0cnVjdG9yKCkgewogICAgc3VwZXIoKTsKICAgIGNvbnN0IGJpbmQgPSB0aGlzLmJpbmRUZW1wbGF0ZTsKICAgIC8qKgogICAgICogVGhlIFNWRyBzb3VyY2Ugb2YgdGhlIGljb24uCiAgICAgKgogICAgICogQG9ic2VydmFibGUKICAgICAqIEBtZW1iZXIge1N0cmluZ30gI2NvbnRlbnQKICAgICAqLwoKICAgIHRoaXMuc2V0KCdjb250ZW50JywgJycpOwogICAgLyoqCiAgICAgKiBUaGlzIGF0dHJpYnV0ZSBzcGVjaWZpZXMgdGhlIGJvdW5kYXJpZXMgdG8gd2hpY2ggdGhlCiAgICAgKiBpY29uIGNvbnRlbnQgc2hvdWxkIHN0cmV0Y2guCiAgICAgKgogICAgICogQG9ic2VydmFibGUKICAgICAqIEBkZWZhdWx0ICcwIDAgMjAgMjAnCiAgICAgKiBAbWVtYmVyIHtTdHJpbmd9ICN2aWV3Qm94CiAgICAgKi8KCiAgICB0aGlzLnNldCgndmlld0JveCcsICcwIDAgMjAgMjAnKTsKICAgIC8qKgogICAgICogVGhlIGZpbGwgY29sb3Igb2YgdGhlIGNoaWxkIGBwYXRoLmNrLWljb25fX2ZpbGxgLgogICAgICoKICAgICAqIEBvYnNlcnZhYmxlCiAgICAgKiBAZGVmYXVsdCAnJwogICAgICogQG1lbWJlciB7U3RyaW5nfSAjZmlsbENvbG9yCiAgICAgKi8KCiAgICB0aGlzLnNldCgnZmlsbENvbG9yJywgJycpOwogICAgdGhpcy5zZXRUZW1wbGF0ZSh7CiAgICAgIHRhZzogJ3N2ZycsCiAgICAgIG5zOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLAogICAgICBhdHRyaWJ1dGVzOiB7CiAgICAgICAgY2xhc3M6IFsnY2snLCAnY2staWNvbiddLAogICAgICAgIHZpZXdCb3g6IGJpbmQudG8oJ3ZpZXdCb3gnKQogICAgICB9CiAgICB9KTsKICB9CiAgLyoqCiAgICogQGluaGVyaXREb2MKICAgKi8KCgogIHJlbmRlcigpIHsKICAgIHN1cGVyLnJlbmRlcigpOwoKICAgIHRoaXMuX3VwZGF0ZVhNTENvbnRlbnQoKTsKCiAgICB0aGlzLl9jb2xvckZpbGxQYXRocygpOyAvLyBUaGlzIGlzIGEgaGFjayBmb3IgbGFjayBvZiBpbm5lckhUTUwgYmluZGluZy4KICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2NrZWRpdG9yL2NrZWRpdG9yNS11aS9pc3N1ZXMvOTkuCgoKICAgIHRoaXMub24oJ2NoYW5nZTpjb250ZW50JywgKCkgPT4gewogICAgICB0aGlzLl91cGRhdGVYTUxDb250ZW50KCk7CgogICAgICB0aGlzLl9jb2xvckZpbGxQYXRocygpOwogICAgfSk7CiAgICB0aGlzLm9uKCdjaGFuZ2U6ZmlsbENvbG9yJywgKCkgPT4gewogICAgICB0aGlzLl9jb2xvckZpbGxQYXRocygpOwogICAgfSk7CiAgfQogIC8qKgogICAqIFVwZGF0ZXMgdGhlIHtAbGluayAjZWxlbWVudH0gd2l0aCB0aGUgdmFsdWUgb2Yge0BsaW5rICNjb250ZW50fS4KICAgKgogICAqIEBwcml2YXRlCiAgICovCgoKICBfdXBkYXRlWE1MQ29udGVudCgpIHsKICAgIGlmICh0aGlzLmNvbnRlbnQpIHsKICAgICAgY29uc3QgcGFyc2VkID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh0aGlzLmNvbnRlbnQudHJpbSgpLCAnaW1hZ2Uvc3ZnK3htbCcpOwogICAgICBjb25zdCBzdmcgPSBwYXJzZWQucXVlcnlTZWxlY3Rvcignc3ZnJyk7CiAgICAgIGNvbnN0IHZpZXdCb3ggPSBzdmcuZ2V0QXR0cmlidXRlKCd2aWV3Qm94Jyk7CgogICAgICBpZiAodmlld0JveCkgewogICAgICAgIHRoaXMudmlld0JveCA9IHZpZXdCb3g7CiAgICAgIH0KCiAgICAgIHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgICAgIHdoaWxlIChzdmcuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHN2Zy5jaGlsZE5vZGVzWzBdKTsKICAgICAgfQogICAgfQogIH0KICAvKioKICAgKiBGaWxscyBhbGwgY2hpbGQgYHBhdGguY2staWNvbl9fZmlsbGAgd2l0aCB0aGUgYCNmaWxsQ29sb3JgLgogICAqCiAgICogQHByaXZhdGUKICAgKi8KCgogIF9jb2xvckZpbGxQYXRocygpIHsKICAgIGlmICh0aGlzLmZpbGxDb2xvcikgewogICAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNrLWljb25fX2ZpbGwnKS5mb3JFYWNoKHBhdGggPT4gewogICAgICAgIHBhdGguc3R5bGUuZmlsbCA9IHRoaXMuZmlsbENvbG9yOwogICAgICB9KTsKICAgIH0KICB9Cgp9"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-ui/src/icon/iconview.js"],"names":["View","IconView","constructor","bind","bindTemplate","set","setTemplate","tag","ns","attributes","class","viewBox","to","render","_updateXMLContent","_colorFillPaths","on","content","parsed","DOMParser","parseFromString","trim","svg","querySelector","getAttribute","element","innerHTML","childNodes","length","appendChild","fillColor","querySelectorAll","forEach","path","style","fill"],"mappings":"AAAA;;;;;AAKA;;AAEA;;;AAIA,OAAOA,IAAP,MAAiB,SAAjB;AAEA,OAAO,sCAAP;AAEA;;;;;;AAKA,eAAe,MAAMC,QAAN,SAAuBD,IAAvB,CAA4B;AAC1C;;;AAGAE,EAAAA,WAAW,GAAG;AACb;AAEA,UAAMC,IAAI,GAAG,KAAKC,YAAlB;AAEA;;;;;;;AAMA,SAAKC,GAAL,CAAU,SAAV,EAAqB,EAArB;AAEA;;;;;;;;;AAQA,SAAKA,GAAL,CAAU,SAAV,EAAqB,WAArB;AAEA;;;;;;;;AAOA,SAAKA,GAAL,CAAU,WAAV,EAAuB,EAAvB;AAEA,SAAKC,WAAL,CAAkB;AACjBC,MAAAA,GAAG,EAAE,KADY;AAEjBC,MAAAA,EAAE,EAAE,4BAFa;AAGjBC,MAAAA,UAAU,EAAE;AACXC,QAAAA,KAAK,EAAE,CACN,IADM,EAEN,SAFM,CADI;AAKXC,QAAAA,OAAO,EAAER,IAAI,CAACS,EAAL,CAAS,SAAT;AALE;AAHK,KAAlB;AAWA;AAED;;;;;AAGAC,EAAAA,MAAM,GAAG;AACR,UAAMA,MAAN;;AAEA,SAAKC,iBAAL;;AACA,SAAKC,eAAL,GAJQ,CAMR;AACA;;;AACA,SAAKC,EAAL,CAAS,gBAAT,EAA2B,MAAM;AAChC,WAAKF,iBAAL;;AACA,WAAKC,eAAL;AACA,KAHD;AAKA,SAAKC,EAAL,CAAS,kBAAT,EAA6B,MAAM;AAClC,WAAKD,eAAL;AACA,KAFD;AAGA;AAED;;;;;;;AAKAD,EAAAA,iBAAiB,GAAG;AACnB,QAAK,KAAKG,OAAV,EAAoB;AACnB,YAAMC,MAAM,GAAG,IAAIC,SAAJ,GAAgBC,eAAhB,CAAiC,KAAKH,OAAL,CAAaI,IAAb,EAAjC,EAAsD,eAAtD,CAAf;AACA,YAAMC,GAAG,GAAGJ,MAAM,CAACK,aAAP,CAAsB,KAAtB,CAAZ;AACA,YAAMZ,OAAO,GAAGW,GAAG,CAACE,YAAJ,CAAkB,SAAlB,CAAhB;;AAEA,UAAKb,OAAL,EAAe;AACd,aAAKA,OAAL,GAAeA,OAAf;AACA;;AAED,WAAKc,OAAL,CAAaC,SAAb,GAAyB,EAAzB;;AAEA,aAAQJ,GAAG,CAACK,UAAJ,CAAeC,MAAf,GAAwB,CAAhC,EAAoC;AACnC,aAAKH,OAAL,CAAaI,WAAb,CAA0BP,GAAG,CAACK,UAAJ,CAAgB,CAAhB,CAA1B;AACA;AACD;AACD;AAED;;;;;;;AAKAZ,EAAAA,eAAe,GAAG;AACjB,QAAK,KAAKe,SAAV,EAAsB;AACrB,WAAKL,OAAL,CAAaM,gBAAb,CAA+B,gBAA/B,EAAkDC,OAAlD,CAA2DC,IAAI,IAAI;AAClEA,QAAAA,IAAI,CAACC,KAAL,CAAWC,IAAX,GAAkB,KAAKL,SAAvB;AACA,OAFD;AAGA;AACD;;AAxGyC","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global DOMParser */\n\n/**\n * @module ui/icon/iconview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/icon/icon.css';\n\n/**\n * The icon view class.\n *\n * @extends module:ui/view~View\n */\nexport default class IconView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * The SVG source of the icon.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #content\n\t\t */\n\t\tthis.set( 'content', '' );\n\n\t\t/**\n\t\t * This attribute specifies the boundaries to which the\n\t\t * icon content should stretch.\n\t\t *\n\t\t * @observable\n\t\t * @default '0 0 20 20'\n\t\t * @member {String} #viewBox\n\t\t */\n\t\tthis.set( 'viewBox', '0 0 20 20' );\n\n\t\t/**\n\t\t * The fill color of the child `path.ck-icon__fill`.\n\t\t *\n\t\t * @observable\n\t\t * @default ''\n\t\t * @member {String} #fillColor\n\t\t */\n\t\tthis.set( 'fillColor', '' );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'svg',\n\t\t\tns: 'http://www.w3.org/2000/svg',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-icon'\n\t\t\t\t],\n\t\t\t\tviewBox: bind.to( 'viewBox' )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis._updateXMLContent();\n\t\tthis._colorFillPaths();\n\n\t\t// This is a hack for lack of innerHTML binding.\n\t\t// See: https://github.com/ckeditor/ckeditor5-ui/issues/99.\n\t\tthis.on( 'change:content', () => {\n\t\t\tthis._updateXMLContent();\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\n\t\tthis.on( 'change:fillColor', () => {\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\t}\n\n\t/**\n\t * Updates the {@link #element} with the value of {@link #content}.\n\t *\n\t * @private\n\t */\n\t_updateXMLContent() {\n\t\tif ( this.content ) {\n\t\t\tconst parsed = new DOMParser().parseFromString( this.content.trim(), 'image/svg+xml' );\n\t\t\tconst svg = parsed.querySelector( 'svg' );\n\t\t\tconst viewBox = svg.getAttribute( 'viewBox' );\n\n\t\t\tif ( viewBox ) {\n\t\t\t\tthis.viewBox = viewBox;\n\t\t\t}\n\n\t\t\tthis.element.innerHTML = '';\n\n\t\t\twhile ( svg.childNodes.length > 0 ) {\n\t\t\t\tthis.element.appendChild( svg.childNodes[ 0 ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fills all child `path.ck-icon__fill` with the `#fillColor`.\n\t *\n\t * @private\n\t */\n\t_colorFillPaths() {\n\t\tif ( this.fillColor ) {\n\t\t\tthis.element.querySelectorAll( '.ck-icon__fill' ).forEach( path => {\n\t\t\t\tpath.style.fill = this.fillColor;\n\t\t\t} );\n\t\t}\n\t}\n}\n"]}]}