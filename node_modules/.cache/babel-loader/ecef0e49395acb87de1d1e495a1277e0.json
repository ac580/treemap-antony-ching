{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-typing/src/utils/utils.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-typing/src/utils/utils.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIHR5cGluZy91dGlscy91dGlscwogKi8KaW1wb3J0IGRpZmYgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvZGlmZic7CmltcG9ydCBkaWZmVG9DaGFuZ2VzIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL2RpZmZ0b2NoYW5nZXMnOwovKioKICogUmV0dXJucyB0cnVlIGlmIGNvbnRhaW5lciBjaGlsZHJlbiBoYXZlIG11dGF0ZWQgb3IgbW9yZSB0aGFuIGEgc2luZ2xlIHRleHQgbm9kZSB3YXMgY2hhbmdlZC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHtBcnJheS48bW9kdWxlOmVuZ2luZS92aWV3L29ic2VydmVyL211dGF0aW9ub2JzZXJ2ZXJ+TXV0YXRlZFRleHR8CiAqIG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9tdXRhdGlvbm9ic2VydmVyfk11dGF0ZWRDaGlsZHJlbj59IG11dGF0aW9ucwogKiBAcmV0dXJucyB7Qm9vbGVhbn0KICovCgpleHBvcnQgZnVuY3Rpb24gY29udGFpbmVyQ2hpbGRyZW5NdXRhdGVkKG11dGF0aW9ucykgewogIGlmIChtdXRhdGlvbnMubGVuZ3RoID09IDApIHsKICAgIHJldHVybiBmYWxzZTsKICB9IC8vIENoZWNrIGlmIHRoZXJlIGlzIGFueSBtdXRhdGlvbiBvZiBgY2hpbGRyZW5gIHR5cGUgb3IgYW55IG11dGF0aW9uIHRoYXQgY2hhbmdlcyBtb3JlIHRoYW4gb25lIHRleHQgbm9kZS4KCgogIGZvciAoY29uc3QgbXV0YXRpb24gb2YgbXV0YXRpb25zKSB7CiAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkcmVuJyAmJiAhZ2V0U2luZ2xlVGV4dE5vZGVDaGFuZ2UobXV0YXRpb24pKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0KCiAgcmV0dXJuIGZhbHNlOwp9Ci8qKgogKiBSZXR1cm5zIGNoYW5nZSBtYWRlIHRvIGEgc2luZ2xlIHRleHQgbm9kZS4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIvbXV0YXRpb25vYnNlcnZlcn5NdXRhdGVkVGV4dHwKICogbW9kdWxlOmVuZ2luZS92aWV3L29ic2VydmVyL211dGF0aW9ub2JzZXJ2ZXJ+TXV0YXRlZENoaWxkcmVufSBtdXRhdGlvbgogKiBAcmV0dXJucyB7T2JqZWN0fHVuZGVmaW5lZH0gQ2hhbmdlIG9iamVjdCAoc2VlIHtAbGluayBtb2R1bGU6dXRpbHMvZGlmZnRvY2hhbmdlc35kaWZmVG9DaGFuZ2VzfSBvdXRwdXQpCiAqIG9yIHVuZGVmaW5lZCBpZiBtb3JlIHRoYW4gYSBzaW5nbGUgdGV4dCBub2RlIHdhcyBjaGFuZ2VkLgogKi8KCmV4cG9ydCBmdW5jdGlvbiBnZXRTaW5nbGVUZXh0Tm9kZUNoYW5nZShtdXRhdGlvbikgewogIC8vIE9uZSBuZXcgbm9kZS4KICBpZiAobXV0YXRpb24ubmV3Q2hpbGRyZW4ubGVuZ3RoIC0gbXV0YXRpb24ub2xkQ2hpbGRyZW4ubGVuZ3RoICE9IDEpIHsKICAgIHJldHVybjsKICB9IC8vIFdoaWNoIGlzIHRleHQuCgoKICBjb25zdCBkaWZmUmVzdWx0ID0gZGlmZihtdXRhdGlvbi5vbGRDaGlsZHJlbiwgbXV0YXRpb24ubmV3Q2hpbGRyZW4sIGNvbXBhcmVDaGlsZE5vZGVzKTsKICBjb25zdCBjaGFuZ2VzID0gZGlmZlRvQ2hhbmdlcyhkaWZmUmVzdWx0LCBtdXRhdGlvbi5uZXdDaGlsZHJlbik7IC8vIEluIGNhc2Ugb2YgWyBkZWxldGUsIGluc2VydCwgaW5zZXJ0IF0gdGhlIHByZXZpb3VzIGNoZWNrIHdpbGwgbm90IGV4aXQuCgogIGlmIChjaGFuZ2VzLmxlbmd0aCA+IDEpIHsKICAgIHJldHVybjsKICB9CgogIGNvbnN0IGNoYW5nZSA9IGNoYW5nZXNbMF07IC8vIFdoaWNoIGlzIHRleHQuCgogIGlmICghKCEhY2hhbmdlLnZhbHVlc1swXSAmJiBjaGFuZ2UudmFsdWVzWzBdLmlzKCd0ZXh0JykpKSB7CiAgICByZXR1cm47CiAgfQoKICByZXR1cm4gY2hhbmdlOwp9Ci8qKgogKiBDaGVja3Mgd2hldGhlciB0d28gdmlldyBub2RlcyBhcmUgaWRlbnRpY2FsLCB3aGljaCBtZWFucyB0aGV5IGFyZSB0aGUgc2FtZSBvYmplY3QKICogb3IgY29udGFpbiBleGFjdGx5IHNhbWUgZGF0YSAoaW4gY2FzZSBvZiB0ZXh0IG5vZGVzKS4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlfSBvbGRDaGlsZAogKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGV9IG5ld0NoaWxkCiAqIEByZXR1cm5zIHtCb29sZWFufQogKi8KCmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlQ2hpbGROb2RlcyhvbGRDaGlsZCwgbmV3Q2hpbGQpIHsKICBpZiAoISFvbGRDaGlsZCAmJiBvbGRDaGlsZC5pcygndGV4dCcpICYmICEhbmV3Q2hpbGQgJiYgbmV3Q2hpbGQuaXMoJ3RleHQnKSkgewogICAgcmV0dXJuIG9sZENoaWxkLmRhdGEgPT09IG5ld0NoaWxkLmRhdGE7CiAgfSBlbHNlIHsKICAgIHJldHVybiBvbGRDaGlsZCA9PT0gbmV3Q2hpbGQ7CiAgfQp9"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-typing/src/utils/utils.js"],"names":["diff","diffToChanges","containerChildrenMutated","mutations","length","mutation","type","getSingleTextNodeChange","newChildren","oldChildren","diffResult","compareChildNodes","changes","change","values","is","oldChild","newChild","data"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,IAAP,MAAiB,oCAAjB;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AAEA;;;;;;;;;AAQA,OAAO,SAASC,wBAAT,CAAmCC,SAAnC,EAA+C;AACrD,MAAKA,SAAS,CAACC,MAAV,IAAoB,CAAzB,EAA6B;AAC5B,WAAO,KAAP;AACA,GAHoD,CAKrD;;;AACA,OAAM,MAAMC,QAAZ,IAAwBF,SAAxB,EAAoC;AACnC,QAAKE,QAAQ,CAACC,IAAT,KAAkB,UAAlB,IAAgC,CAACC,uBAAuB,CAAEF,QAAF,CAA7D,EAA4E;AAC3E,aAAO,IAAP;AACA;AACD;;AAED,SAAO,KAAP;AACA;AAED;;;;;;;;;;AASA,OAAO,SAASE,uBAAT,CAAkCF,QAAlC,EAA6C;AACnD;AACA,MAAKA,QAAQ,CAACG,WAAT,CAAqBJ,MAArB,GAA8BC,QAAQ,CAACI,WAAT,CAAqBL,MAAnD,IAA6D,CAAlE,EAAsE;AACrE;AACA,GAJkD,CAMnD;;;AACA,QAAMM,UAAU,GAAGV,IAAI,CAAEK,QAAQ,CAACI,WAAX,EAAwBJ,QAAQ,CAACG,WAAjC,EAA8CG,iBAA9C,CAAvB;AACA,QAAMC,OAAO,GAAGX,aAAa,CAAES,UAAF,EAAcL,QAAQ,CAACG,WAAvB,CAA7B,CARmD,CAUnD;;AACA,MAAKI,OAAO,CAACR,MAAR,GAAiB,CAAtB,EAA0B;AACzB;AACA;;AAED,QAAMS,MAAM,GAAGD,OAAO,CAAE,CAAF,CAAtB,CAfmD,CAiBnD;;AACA,MAAK,EAAG,CAAC,CAACC,MAAM,CAACC,MAAP,CAAe,CAAf,CAAF,IAAwBD,MAAM,CAACC,MAAP,CAAe,CAAf,EAAmBC,EAAnB,CAAuB,MAAvB,CAA3B,CAAL,EAAoE;AACnE;AACA;;AAED,SAAOF,MAAP;AACA;AAED;;;;;;;;;;AASA,OAAO,SAASF,iBAAT,CAA4BK,QAA5B,EAAsCC,QAAtC,EAAiD;AACvD,MAAK,CAAC,CAACD,QAAF,IAAcA,QAAQ,CAACD,EAAT,CAAa,MAAb,CAAd,IAAuC,CAAC,CAACE,QAAzC,IAAqDA,QAAQ,CAACF,EAAT,CAAa,MAAb,CAA1D,EAAkF;AACjF,WAAOC,QAAQ,CAACE,IAAT,KAAkBD,QAAQ,CAACC,IAAlC;AACA,GAFD,MAEO;AACN,WAAOF,QAAQ,KAAKC,QAApB;AACA;AACD","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/utils\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport diffToChanges from '@ckeditor/ckeditor5-utils/src/difftochanges';\n\n/**\n * Returns true if container children have mutated or more than a single text node was changed.\n *\n * @private\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n * @returns {Boolean}\n */\nexport function containerChildrenMutated( mutations ) {\n\tif ( mutations.length == 0 ) {\n\t\treturn false;\n\t}\n\n\t// Check if there is any mutation of `children` type or any mutation that changes more than one text node.\n\tfor ( const mutation of mutations ) {\n\t\tif ( mutation.type === 'children' && !getSingleTextNodeChange( mutation ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns change made to a single text node.\n *\n * @private\n * @param {module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren} mutation\n * @returns {Object|undefined} Change object (see {@link module:utils/difftochanges~diffToChanges} output)\n * or undefined if more than a single text node was changed.\n */\nexport function getSingleTextNodeChange( mutation ) {\n\t// One new node.\n\tif ( mutation.newChildren.length - mutation.oldChildren.length != 1 ) {\n\t\treturn;\n\t}\n\n\t// Which is text.\n\tconst diffResult = diff( mutation.oldChildren, mutation.newChildren, compareChildNodes );\n\tconst changes = diffToChanges( diffResult, mutation.newChildren );\n\n\t// In case of [ delete, insert, insert ] the previous check will not exit.\n\tif ( changes.length > 1 ) {\n\t\treturn;\n\t}\n\n\tconst change = changes[ 0 ];\n\n\t// Which is text.\n\tif ( !( !!change.values[ 0 ] && change.values[ 0 ].is( 'text' ) ) ) {\n\t\treturn;\n\t}\n\n\treturn change;\n}\n\n/**\n * Checks whether two view nodes are identical, which means they are the same object\n * or contain exactly same data (in case of text nodes).\n *\n * @private\n * @param {module:engine/view/node~Node} oldChild\n * @param {module:engine/view/node~Node} newChild\n * @returns {Boolean}\n */\nexport function compareChildNodes( oldChild, newChild ) {\n\tif ( !!oldChild && oldChild.is( 'text' ) && !!newChild && newChild.is( 'text' ) ) {\n\t\treturn oldChild.data === newChild.data;\n\t} else {\n\t\treturn oldChild === newChild;\n\t}\n}\n"]}]}