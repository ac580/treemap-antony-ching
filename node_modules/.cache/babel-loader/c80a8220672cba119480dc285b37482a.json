{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-refresh-post-fixer.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-refresh-post-fixer.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIHRhYmxlL2NvbnZlcnRlcnMvdGFibGUtY2VsbC1yZWZyZXNoLXBvc3QtZml4ZXIKICovCgovKioKICogSW5qZWN0cyBhIHRhYmxlIGNlbGwgcG9zdC1maXhlciBpbnRvIHRoZSBtb2RlbCB3aGljaCBtYXJrcyB0aGUgdGFibGUgY2VsbCBpbiB0aGUgZGlmZmVyIHRvIGhhdmUgaXQgcmUtcmVuZGVyZWQuCiAqCiAqIE1vZGVsIGBwYXJhZ3JhcGhgIGluc2lkZSBhIHRhYmxlIGNlbGwgY2FuIGJlIHJlbmRlcmVkIGFzIGA8c3Bhbj5gIG9yIGA8cD5gLiBJdCBpcyByZW5kZXJlZCBhcyBgPHNwYW4+YCBpZiB0aGlzIGlzIHRoZSBvbmx5IGJsb2NrCiAqIGVsZW1lbnQgaW4gdGhhdCB0YWJsZSBjZWxsIGFuZCBpdCBkb2Vzbid0IGhhdmUgYW55IGF0dHJpYnV0ZXMuIEl0IGlzIHJlbmRlcmVkIGFzIGA8cD5gIG90aGVyd2lzZS4KICoKICogV2hlbiB0YWJsZSBjZWxsIGNvbnRlbnQgY2hhbmdlcywgZm9yIGV4YW1wbGUgYSBzZWNvbmQgYHBhcmFncmFwaGAgZWxlbWVudCBpcyBhZGRlZCB3ZSBuZWVkIHRvIGVuc3VyZSB0aGF0IHRoZSBmaXJzdCBgcGFyYWdyYXBoYCBpcwogKiByZS1yZW5kZXJlZCBzbyBpdCBjaGFuZ2VzIHRvIGA8cD5gIGZyb20gYDxzcGFuPmAuIFRoZSBlYXNpZXN0IHdheSB0byBkbyBpdCBpcyB0byByZS1yZW5kZXIgd2hvbGUgdGFibGUgY2VsbC4KICoKICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL21vZGVsfk1vZGVsfSBtb2RlbAogKi8KZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0VGFibGVDZWxsUmVmcmVzaFBvc3RGaXhlcihtb2RlbCkgewogIG1vZGVsLmRvY3VtZW50LnJlZ2lzdGVyUG9zdEZpeGVyKCgpID0+IHRhYmxlQ2VsbFJlZnJlc2hQb3N0Rml4ZXIobW9kZWwpKTsKfQoKZnVuY3Rpb24gdGFibGVDZWxsUmVmcmVzaFBvc3RGaXhlcihtb2RlbCkgewogIGNvbnN0IGRpZmZlciA9IG1vZGVsLmRvY3VtZW50LmRpZmZlcjsgLy8gU3RvcmVzIGNlbGxzIHRvIGJlIHJlZnJlc2hlZCBzbyB0aGUgdGFibGUgY2VsbCB3aWxsIGJlIHJlZnJlc2hlZCBvbmNlIGZvciBtdWx0aXBsZSBjaGFuZ2VzLgoKICBjb25zdCBjZWxsc1RvUmVmcmVzaCA9IG5ldyBTZXQoKTsKCiAgZm9yIChjb25zdCBjaGFuZ2Ugb2YgZGlmZmVyLmdldENoYW5nZXMoKSkgewogICAgY29uc3QgcGFyZW50ID0gY2hhbmdlLnR5cGUgPT0gJ2luc2VydCcgfHwgY2hhbmdlLnR5cGUgPT0gJ3JlbW92ZScgPyBjaGFuZ2UucG9zaXRpb24ucGFyZW50IDogY2hhbmdlLnJhbmdlLnN0YXJ0LnBhcmVudDsKCiAgICBpZiAocGFyZW50LmlzKCd0YWJsZUNlbGwnKSAmJiBjaGVja1JlZnJlc2gocGFyZW50LCBjaGFuZ2UudHlwZSkpIHsKICAgICAgY2VsbHNUb1JlZnJlc2guYWRkKHBhcmVudCk7CiAgICB9CiAgfQoKICBpZiAoY2VsbHNUb1JlZnJlc2guc2l6ZSkgewogICAgZm9yIChjb25zdCB0YWJsZUNlbGwgb2YgY2VsbHNUb1JlZnJlc2gudmFsdWVzKCkpIHsKICAgICAgZGlmZmVyLnJlZnJlc2hJdGVtKHRhYmxlQ2VsbCk7CiAgICB9CgogICAgcmV0dXJuIHRydWU7CiAgfQoKICByZXR1cm4gZmFsc2U7Cn0gLy8gQ2hlY2tzIGlmIHRoZSBtb2RlbCB0YWJsZSBjZWxsIHJlcXVpcmVzIHJlZnJlc2hpbmcgdG8gYmUgcmUtcmVuZGVyZWQgdG8gYSBwcm9wZXIgc3RhdGUgaW4gdGhlIHZpZXcuCi8vCi8vIFRoaXMgbWV0aG9kcyBkZXRlY3RzIGNoYW5nZXMgdGhhdCB3aWxsIHJlcXVpcmUgcmVuYW1pbmcgPHNwYW4+IHRvIDxwPiAob3IgdmljZSB2ZXJzYSkgaW4gdGhlIHZpZXcuCi8vCi8vIFRoaXMgbWV0aG9kIGlzIGEgc2ltcGxlIGhldXJpc3RpYyB0aGF0IGNoZWNrcyBvbmx5IGEgc2luZ2xlIGNoYW5nZSBhbmQgd2lsbCBzb21ldGltZXMgZ2l2ZSBhIGZhbHNlIHBvc2l0aXZlIHJlc3VsdCB3aGVuIG11bHRpcGxlIGNoYW5nZXMKLy8gd2lsbCByZXN1bHQgaW4gYSBzdGF0ZSB0aGF0IGRvZXMgbm90IHJlcXVpcmUgcmVuYW1pbmcgaW4gdGhlIHZpZXcgKGJ1dCB3aWxsIGJlIHNlZW4gYXMgcmVxdWlyaW5nIGEgcmVmcmVzaCkuCi8vCi8vIEZvciBpbnN0YW5jZTogYSBgPHNwYW4+YCBzaG91bGQgYmUgcmVuYW1lZCB0byBgPHA+YCB3aGVuIGFkZGluZyBhbiBhdHRyaWJ1dGUgdG8gYSBgPHBhcmFncmFwaD5gLgovLyBCdXQgYWRkaW5nIG9uZSBhdHRyaWJ1dGUgYW5kIHJlbW92aW5nIGFub3RoZXIgb25lIHdpbGwgcmVzdWx0IGluIGEgZmFsc2UgcG9zaXRpdmU6IHRoZSBjaGVjayBmb3IgYWRkZWQgYXR0cmlidXRlIHdpbGwgc2VlIG9uZSBhdHRyaWJ1dGUKLy8gb24gYSBwYXJhZ3JhcGggYW5kIHdpbGwgZmFsc3kgcXVhbGlmeSBzdWNoIGNoYW5nZSBhcyBhZGRpbmcgYW4gYXR0cmlidXRlIHRvIGEgcGFyYWdyYXBoIHdpdGhvdXQgYW55IGF0dHJpYnV0ZS4KLy8KLy8gQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL2VsZW1lbnR+RWxlbWVudH0gdGFibGVDZWxsIFRhYmxlIGNlbGwgdG8gY2hlY2suCi8vIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFR5cGUgb2YgY2hhbmdlLgoKCmZ1bmN0aW9uIGNoZWNrUmVmcmVzaCh0YWJsZUNlbGwsIHR5cGUpIHsKICBjb25zdCBoYXNJbm5lclBhcmFncmFwaCA9IEFycmF5LmZyb20odGFibGVDZWxsLmdldENoaWxkcmVuKCkpLnNvbWUoY2hpbGQgPT4gY2hpbGQuaXMoJ3BhcmFncmFwaCcpKTsgLy8gSWYgdGhlcmUgaXMgbm8gcGFyYWdyYXBoIGluIHRhYmxlIGNlbGwgdGhlbiB0aGUgdmlldyBkb2Vzbid0IHJlcXVpcmUgcmVmcmVzaGluZy4KICAvLwogIC8vIFdoeT8gV2hhdCB3ZSByZWFsbHkgd2FudCB0byBhY2hpZXZlIGlzIHRvIG1ha2UgYWxsIHRoZSBvbGQgcGFyYWdyYXBocyAod2hpY2ggd2VyZW4ndCBhZGRlZCBpbiB0aGlzIGJhdGNoKSB0byBiZQogIC8vIGNvbnZlcnRlZCBvbmNlIGFnYWluLCBzbyB0aGF0IHRoZSBwYXJhZ3JhcGgtaW4tdGFibGUtY2VsbCBjb252ZXJ0ZXIgY2FuIGNvcnJlY3RseSBjcmVhdGUgYSBgPHA+YCBvciBhIGA8c3Bhbj5gIGVsZW1lbnQuCiAgLy8gSWYgdGhlcmUgYXJlIG5vIHBhcmFncmFwaHMgaW4gdGhlIHRhYmxlIGNlbGwsIHdlIGRvbid0IGNhcmUuCgogIGlmICghaGFzSW5uZXJQYXJhZ3JhcGgpIHsKICAgIHJldHVybiBmYWxzZTsKICB9IC8vIEZvciBhdHRyaWJ1dGUgY2hhbmdlIHdlIG9ubHkgcmVmcmVzaCBpZiB0aGVyZSBpcyBhIHNpbmdsZSBwYXJhZ3JhcGggYXMgaW4gdGhpcyBjYXNlIHdlIG1heSB3YW50IHRvIGNoYW5nZSBleGlzdGluZyBgPHNwYW4+YCB0byBgPHA+YC4KCgogIGlmICh0eXBlID09ICdhdHRyaWJ1dGUnKSB7CiAgICBjb25zdCBhdHRyaWJ1dGVzQ291bnQgPSBBcnJheS5mcm9tKHRhYmxlQ2VsbC5nZXRDaGlsZCgwKS5nZXRBdHRyaWJ1dGVLZXlzKCkpLmxlbmd0aDsKICAgIHJldHVybiB0YWJsZUNlbGwuY2hpbGRDb3VudCA9PT0gMSAmJiBhdHRyaWJ1dGVzQ291bnQgPCAyOwogIH0gLy8gRm9yIG90aGVyIGNoYW5nZXMgKGluc2VydCwgcmVtb3ZlKSB0aGUgYDxzcGFuPmAgdG8gYDxwPmAgY2hhbmdlIGlzIG5lZWRlZCB3aGVuOgogIC8vCiAgLy8gLSBhbm90aGVyIGVsZW1lbnQgaXMgYWRkZWQgdG8gYSBzaW5nbGUgcGFyYWdyYXBoIChjaGlsZENvdW50IGJlY29tZXMgPj0gMikKICAvLyAtIGFub3RoZXIgZWxlbWVudCBpcyByZW1vdmVkIGFuZCBhIHNpbmdsZSBwYXJhZ3JhcGggaXMgbGVmdCAoY2hpbGRDb3VudCA9PSAxKQoKCiAgcmV0dXJuIHRhYmxlQ2VsbC5jaGlsZENvdW50IDw9ICh0eXBlID09ICdpbnNlcnQnID8gMiA6IDEpOwp9"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-refresh-post-fixer.js"],"names":["injectTableCellRefreshPostFixer","model","document","registerPostFixer","tableCellRefreshPostFixer","differ","cellsToRefresh","Set","change","getChanges","parent","type","position","range","start","is","checkRefresh","add","size","tableCell","values","refreshItem","hasInnerParagraph","Array","from","getChildren","some","child","attributesCount","getChild","getAttributeKeys","length","childCount"],"mappings":"AAAA;;;;;AAKA;;;;AAIA;;;;;;;;;;;AAWA,eAAe,SAASA,+BAAT,CAA0CC,KAA1C,EAAkD;AAChEA,EAAAA,KAAK,CAACC,QAAN,CAAeC,iBAAf,CAAkC,MAAMC,yBAAyB,CAAEH,KAAF,CAAjE;AACA;;AAED,SAASG,yBAAT,CAAoCH,KAApC,EAA4C;AAC3C,QAAMI,MAAM,GAAGJ,KAAK,CAACC,QAAN,CAAeG,MAA9B,CAD2C,CAG3C;;AACA,QAAMC,cAAc,GAAG,IAAIC,GAAJ,EAAvB;;AAEA,OAAM,MAAMC,MAAZ,IAAsBH,MAAM,CAACI,UAAP,EAAtB,EAA4C;AAC3C,UAAMC,MAAM,GAAGF,MAAM,CAACG,IAAP,IAAe,QAAf,IAA2BH,MAAM,CAACG,IAAP,IAAe,QAA1C,GAAqDH,MAAM,CAACI,QAAP,CAAgBF,MAArE,GAA8EF,MAAM,CAACK,KAAP,CAAaC,KAAb,CAAmBJ,MAAhH;;AAEA,QAAKA,MAAM,CAACK,EAAP,CAAW,WAAX,KAA4BC,YAAY,CAAEN,MAAF,EAAUF,MAAM,CAACG,IAAjB,CAA7C,EAAuE;AACtEL,MAAAA,cAAc,CAACW,GAAf,CAAoBP,MAApB;AACA;AACD;;AAED,MAAKJ,cAAc,CAACY,IAApB,EAA2B;AAC1B,SAAM,MAAMC,SAAZ,IAAyBb,cAAc,CAACc,MAAf,EAAzB,EAAmD;AAClDf,MAAAA,MAAM,CAACgB,WAAP,CAAoBF,SAApB;AACA;;AAED,WAAO,IAAP;AACA;;AAED,SAAO,KAAP;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASH,YAAT,CAAuBG,SAAvB,EAAkCR,IAAlC,EAAyC;AACxC,QAAMW,iBAAiB,GAAGC,KAAK,CAACC,IAAN,CAAYL,SAAS,CAACM,WAAV,EAAZ,EAAsCC,IAAtC,CAA4CC,KAAK,IAAIA,KAAK,CAACZ,EAAN,CAAU,WAAV,CAArD,CAA1B,CADwC,CAGxC;AACA;AACA;AACA;AACA;;AACA,MAAK,CAACO,iBAAN,EAA0B;AACzB,WAAO,KAAP;AACA,GAVuC,CAYxC;;;AACA,MAAKX,IAAI,IAAI,WAAb,EAA2B;AAC1B,UAAMiB,eAAe,GAAGL,KAAK,CAACC,IAAN,CAAYL,SAAS,CAACU,QAAV,CAAoB,CAApB,EAAwBC,gBAAxB,EAAZ,EAAyDC,MAAjF;AAEA,WAAOZ,SAAS,CAACa,UAAV,KAAyB,CAAzB,IAA8BJ,eAAe,GAAG,CAAvD;AACA,GAjBuC,CAmBxC;AACA;AACA;AACA;;;AACA,SAAOT,SAAS,CAACa,UAAV,KAA0BrB,IAAI,IAAI,QAAR,GAAmB,CAAnB,GAAuB,CAAjD,CAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/table-cell-refresh-post-fixer\n */\n\n/**\n * Injects a table cell post-fixer into the model which marks the table cell in the differ to have it re-rendered.\n *\n * Model `paragraph` inside a table cell can be rendered as `<span>` or `<p>`. It is rendered as `<span>` if this is the only block\n * element in that table cell and it doesn't have any attributes. It is rendered as `<p>` otherwise.\n *\n * When table cell content changes, for example a second `paragraph` element is added we need to ensure that the first `paragraph` is\n * re-rendered so it changes to `<p>` from `<span>`. The easiest way to do it is to re-render whole table cell.\n *\n * @param {module:engine/model/model~Model} model\n */\nexport default function injectTableCellRefreshPostFixer( model ) {\n\tmodel.document.registerPostFixer( () => tableCellRefreshPostFixer( model ) );\n}\n\nfunction tableCellRefreshPostFixer( model ) {\n\tconst differ = model.document.differ;\n\n\t// Stores cells to be refreshed so the table cell will be refreshed once for multiple changes.\n\tconst cellsToRefresh = new Set();\n\n\tfor ( const change of differ.getChanges() ) {\n\t\tconst parent = change.type == 'insert' || change.type == 'remove' ? change.position.parent : change.range.start.parent;\n\n\t\tif ( parent.is( 'tableCell' ) && checkRefresh( parent, change.type ) ) {\n\t\t\tcellsToRefresh.add( parent );\n\t\t}\n\t}\n\n\tif ( cellsToRefresh.size ) {\n\t\tfor ( const tableCell of cellsToRefresh.values() ) {\n\t\t\tdiffer.refreshItem( tableCell );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Checks if the model table cell requires refreshing to be re-rendered to a proper state in the view.\n//\n// This methods detects changes that will require renaming <span> to <p> (or vice versa) in the view.\n//\n// This method is a simple heuristic that checks only a single change and will sometimes give a false positive result when multiple changes\n// will result in a state that does not require renaming in the view (but will be seen as requiring a refresh).\n//\n// For instance: a `<span>` should be renamed to `<p>` when adding an attribute to a `<paragraph>`.\n// But adding one attribute and removing another one will result in a false positive: the check for added attribute will see one attribute\n// on a paragraph and will falsy qualify such change as adding an attribute to a paragraph without any attribute.\n//\n// @param {module:engine/model/element~Element} tableCell Table cell to check.\n// @param {String} type Type of change.\nfunction checkRefresh( tableCell, type ) {\n\tconst hasInnerParagraph = Array.from( tableCell.getChildren() ).some( child => child.is( 'paragraph' ) );\n\n\t// If there is no paragraph in table cell then the view doesn't require refreshing.\n\t//\n\t// Why? What we really want to achieve is to make all the old paragraphs (which weren't added in this batch) to be\n\t// converted once again, so that the paragraph-in-table-cell converter can correctly create a `<p>` or a `<span>` element.\n\t// If there are no paragraphs in the table cell, we don't care.\n\tif ( !hasInnerParagraph ) {\n\t\treturn false;\n\t}\n\n\t// For attribute change we only refresh if there is a single paragraph as in this case we may want to change existing `<span>` to `<p>`.\n\tif ( type == 'attribute' ) {\n\t\tconst attributesCount = Array.from( tableCell.getChild( 0 ).getAttributeKeys() ).length;\n\n\t\treturn tableCell.childCount === 1 && attributesCount < 2;\n\t}\n\n\t// For other changes (insert, remove) the `<span>` to `<p>` change is needed when:\n\t//\n\t// - another element is added to a single paragraph (childCount becomes >= 2)\n\t// - another element is removed and a single paragraph is left (childCount == 1)\n\treturn tableCell.childCount <= ( type == 'insert' ? 2 : 1 );\n}\n"]}]}