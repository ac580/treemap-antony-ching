{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS9tb2RlbC9vcGVyYXRpb24vaW5zZXJ0b3BlcmF0aW9uCiAqLwppbXBvcnQgT3BlcmF0aW9uIGZyb20gJy4vb3BlcmF0aW9uJzsKaW1wb3J0IFBvc2l0aW9uIGZyb20gJy4uL3Bvc2l0aW9uJzsKaW1wb3J0IE5vZGVMaXN0IGZyb20gJy4uL25vZGVsaXN0JzsKaW1wb3J0IE1vdmVPcGVyYXRpb24gZnJvbSAnLi9tb3Zlb3BlcmF0aW9uJzsKaW1wb3J0IHsgX2luc2VydCwgX25vcm1hbGl6ZU5vZGVzIH0gZnJvbSAnLi91dGlscyc7CmltcG9ydCBUZXh0IGZyb20gJy4uL3RleHQnOwppbXBvcnQgRWxlbWVudCBmcm9tICcuLi9lbGVtZW50JzsKaW1wb3J0IENLRWRpdG9yRXJyb3IgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvY2tlZGl0b3JlcnJvcic7Ci8qKgogKiBPcGVyYXRpb24gdG8gaW5zZXJ0IG9uZSBvciBtb3JlIG5vZGVzIGF0IGdpdmVuIHBvc2l0aW9uIGluIHRoZSBtb2RlbC4KICoKICogQGV4dGVuZHMgbW9kdWxlOmVuZ2luZS9tb2RlbC9vcGVyYXRpb24vb3BlcmF0aW9ufk9wZXJhdGlvbgogKi8KCmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluc2VydE9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbiB7CiAgLyoqCiAgICogQ3JlYXRlcyBhbiBpbnNlcnQgb3BlcmF0aW9uLgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL3Bvc2l0aW9uflBvc2l0aW9ufSBwb3NpdGlvbiBQb3NpdGlvbiBvZiBpbnNlcnRpb24uCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL21vZGVsL25vZGV+Tm9kZVNldH0gbm9kZXMgVGhlIGxpc3Qgb2Ygbm9kZXMgdG8gYmUgaW5zZXJ0ZWQuCiAgICogQHBhcmFtIHtOdW1iZXJ8bnVsbH0gYmFzZVZlcnNpb24gRG9jdW1lbnQge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvZG9jdW1lbnR+RG9jdW1lbnQjdmVyc2lvbn0gb24gd2hpY2ggb3BlcmF0aW9uCiAgICogY2FuIGJlIGFwcGxpZWQgb3IgYG51bGxgIGlmIHRoZSBvcGVyYXRpb24gb3BlcmF0ZXMgb24gZGV0YWNoZWQgKG5vbi1kb2N1bWVudCkgdHJlZS4KICAgKi8KICBjb25zdHJ1Y3Rvcihwb3NpdGlvbiwgbm9kZXMsIGJhc2VWZXJzaW9uKSB7CiAgICBzdXBlcihiYXNlVmVyc2lvbik7CiAgICAvKioKICAgICAqIFBvc2l0aW9uIG9mIGluc2VydGlvbi4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEBtZW1iZXIge21vZHVsZTplbmdpbmUvbW9kZWwvcG9zaXRpb25+UG9zaXRpb259IG1vZHVsZTplbmdpbmUvbW9kZWwvb3BlcmF0aW9uL2luc2VydG9wZXJhdGlvbn5JbnNlcnRPcGVyYXRpb24jcG9zaXRpb24KICAgICAqLwoKICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbi5jbG9uZSgpOwogICAgdGhpcy5wb3NpdGlvbi5zdGlja2luZXNzID0gJ3RvTm9uZSc7CiAgICAvKioKICAgICAqIExpc3Qgb2Ygbm9kZXMgdG8gaW5zZXJ0LgogICAgICoKICAgICAqIEByZWFkb25seQogICAgICogQG1lbWJlciB7bW9kdWxlOmVuZ2luZS9tb2RlbC9ub2RlbGlzdH5Ob2RlTGlzdH0gbW9kdWxlOmVuZ2luZS9tb2RlbC9vcGVyYXRpb24vaW5zZXJ0b3BlcmF0aW9ufkluc2VydE9wZXJhdGlvbiNub2RlTGlzdAogICAgICovCgogICAgdGhpcy5ub2RlcyA9IG5ldyBOb2RlTGlzdChfbm9ybWFsaXplTm9kZXMobm9kZXMpKTsKICAgIC8qKgogICAgICogRmxhZyBkZWNpZGluZyBob3cgdGhlIG9wZXJhdGlvbiBzaG91bGQgYmUgdHJhbnNmb3JtZWQuIElmIHNldCB0byBgdHJ1ZWAsIG5vZGVzIG1pZ2h0IGdldCBhZGRpdGlvbmFsIGF0dHJpYnV0ZXMKICAgICAqIGR1cmluZyBvcGVyYXRpb25hbCB0cmFuc2Zvcm1hdGlvbi4gVGhpcyBoYXBwZW5zIHdoZW4gdGhlIG9wZXJhdGlvbiBpbnNlcnRpb24gcG9zaXRpb24gaXMgaW5zaWRlIG9mIGEgcmFuZ2UKICAgICAqIHdoZXJlIGF0dHJpYnV0ZXMgaGF2ZSBjaGFuZ2VkLgogICAgICoKICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IG1vZHVsZTplbmdpbmUvbW9kZWwvb3BlcmF0aW9uL2luc2VydG9wZXJhdGlvbn5JbnNlcnRPcGVyYXRpb24jc2hvdWxkUmVjZWl2ZUF0dHJpYnV0ZXMKICAgICAqLwoKICAgIHRoaXMuc2hvdWxkUmVjZWl2ZUF0dHJpYnV0ZXMgPSBmYWxzZTsKICB9CiAgLyoqCiAgICogQGluaGVyaXREb2MKICAgKi8KCgogIGdldCB0eXBlKCkgewogICAgcmV0dXJuICdpbnNlcnQnOwogIH0KICAvKioKICAgKiBUb3RhbCBvZmZzZXQgc2l6ZSBvZiBpbnNlcnRlZCBub2Rlcy4KICAgKgogICAqIEByZXR1cm5zIHtOdW1iZXJ9CiAgICovCgoKICBnZXQgaG93TWFueSgpIHsKICAgIHJldHVybiB0aGlzLm5vZGVzLm1heE9mZnNldDsKICB9CiAgLyoqCiAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhbiBvcGVyYXRpb24gdGhhdCBoYXMgdGhlIHNhbWUgcGFyYW1ldGVycyBhcyB0aGlzIG9wZXJhdGlvbi4KICAgKgogICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL21vZGVsL29wZXJhdGlvbi9pbnNlcnRvcGVyYXRpb25+SW5zZXJ0T3BlcmF0aW9ufSBDbG9uZSBvZiB0aGlzIG9wZXJhdGlvbi4KICAgKi8KCgogIGNsb25lKCkgewogICAgY29uc3Qgbm9kZXMgPSBuZXcgTm9kZUxpc3QoWy4uLnRoaXMubm9kZXNdLm1hcChub2RlID0+IG5vZGUuX2Nsb25lKHRydWUpKSk7CiAgICBjb25zdCBpbnNlcnQgPSBuZXcgSW5zZXJ0T3BlcmF0aW9uKHRoaXMucG9zaXRpb24sIG5vZGVzLCB0aGlzLmJhc2VWZXJzaW9uKTsKICAgIGluc2VydC5zaG91bGRSZWNlaXZlQXR0cmlidXRlcyA9IHRoaXMuc2hvdWxkUmVjZWl2ZUF0dHJpYnV0ZXM7CiAgICByZXR1cm4gaW5zZXJ0OwogIH0KICAvKioKICAgKiBTZWUge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvb3BlcmF0aW9uL29wZXJhdGlvbn5PcGVyYXRpb24jZ2V0UmV2ZXJzZWQgYE9wZXJhdGlvbiNnZXRSZXZlcnNlZCgpYH0uCiAgICoKICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS9tb2RlbC9vcGVyYXRpb24vbW92ZW9wZXJhdGlvbn5Nb3ZlT3BlcmF0aW9ufQogICAqLwoKCiAgZ2V0UmV2ZXJzZWQoKSB7CiAgICBjb25zdCBncmF2ZXlhcmQgPSB0aGlzLnBvc2l0aW9uLnJvb3QuZG9jdW1lbnQuZ3JhdmV5YXJkOwogICAgY29uc3QgZ3lQb3NpdGlvbiA9IG5ldyBQb3NpdGlvbihncmF2ZXlhcmQsIFswXSk7CiAgICByZXR1cm4gbmV3IE1vdmVPcGVyYXRpb24odGhpcy5wb3NpdGlvbiwgdGhpcy5ub2Rlcy5tYXhPZmZzZXQsIGd5UG9zaXRpb24sIHRoaXMuYmFzZVZlcnNpb24gKyAxKTsKICB9CiAgLyoqCiAgICogQGluaGVyaXREb2MKICAgKi8KCgogIF92YWxpZGF0ZSgpIHsKICAgIGNvbnN0IHRhcmdldEVsZW1lbnQgPSB0aGlzLnBvc2l0aW9uLnBhcmVudDsKCiAgICBpZiAoIXRhcmdldEVsZW1lbnQgfHwgdGFyZ2V0RWxlbWVudC5tYXhPZmZzZXQgPCB0aGlzLnBvc2l0aW9uLm9mZnNldCkgewogICAgICAvKioKICAgICAgICogSW5zZXJ0aW9uIHBvc2l0aW9uIGlzIGludmFsaWQuCiAgICAgICAqCiAgICAgICAqIEBlcnJvciBpbnNlcnQtb3BlcmF0aW9uLXBvc2l0aW9uLWludmFsaWQKICAgICAgICovCiAgICAgIHRocm93IG5ldyBDS0VkaXRvckVycm9yKCdpbnNlcnQtb3BlcmF0aW9uLXBvc2l0aW9uLWludmFsaWQ6IEluc2VydGlvbiBwb3NpdGlvbiBpcyBpbnZhbGlkLicsIHRoaXMpOwogICAgfQogIH0KICAvKioKICAgKiBAaW5oZXJpdERvYwogICAqLwoKCiAgX2V4ZWN1dGUoKSB7CiAgICAvLyBXaGF0IGhhcHBlbnMgaGVyZSBpcyB0aGF0IHdlIHdhbnQgb3JpZ2luYWwgbm9kZXMgYmUgcGFzc2VkIHRvIHdyaXRlciBiZWNhdXNlIHdlIHdhbnQgb3JpZ2luYWwgbm9kZXMKICAgIC8vIHRvIGJlIGluc2VydGVkIHRvIHRoZSBtb2RlbC4gQnV0IGluIEluc2VydE9wZXJhdGlvbiwgd2Ugd2FudCB0byBrZWVwIHRob3NlIG5vZGVzIGFzIHRoZXkgd2VyZSBhZGRlZAogICAgLy8gdG8gdGhlIG9wZXJhdGlvbiwgbm90IG1vZGlmaWVkLiBGb3IgZXhhbXBsZSwgdGV4dCBub2RlcyBjYW4gZ2V0IG1lcmdlZCBvciBjcm9wcGVkIHdoaWxlIEVsZW1lbnRzIGNhbgogICAgLy8gZ2V0IGNoaWxkcmVuLiBJdCBpcyBpbXBvcnRhbnQgdGhhdCBJbnNlcnRPcGVyYXRpb24gaGFzIHRoZSBjb3B5IG9mIG9yaWdpbmFsIG5vZGVzIGluIGludGFjdCBzdGF0ZS4KICAgIGNvbnN0IG9yaWdpbmFsTm9kZXMgPSB0aGlzLm5vZGVzOwogICAgdGhpcy5ub2RlcyA9IG5ldyBOb2RlTGlzdChbLi4ub3JpZ2luYWxOb2Rlc10ubWFwKG5vZGUgPT4gbm9kZS5fY2xvbmUodHJ1ZSkpKTsKCiAgICBfaW5zZXJ0KHRoaXMucG9zaXRpb24sIG9yaWdpbmFsTm9kZXMpOwogIH0KICAvKioKICAgKiBAaW5oZXJpdERvYwogICAqLwoKCiAgdG9KU09OKCkgewogICAgY29uc3QganNvbiA9IHN1cGVyLnRvSlNPTigpOwogICAganNvbi5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24udG9KU09OKCk7CiAgICBqc29uLm5vZGVzID0gdGhpcy5ub2Rlcy50b0pTT04oKTsKICAgIHJldHVybiBqc29uOwogIH0KICAvKioKICAgKiBAaW5oZXJpdERvYwogICAqLwoKCiAgc3RhdGljIGdldCBjbGFzc05hbWUoKSB7CiAgICByZXR1cm4gJ0luc2VydE9wZXJhdGlvbic7CiAgfQogIC8qKgogICAqIENyZWF0ZXMgYEluc2VydE9wZXJhdGlvbmAgb2JqZWN0IGZyb20gZGVzZXJpbGl6ZWQgb2JqZWN0LCBpLmUuIGZyb20gcGFyc2VkIEpTT04gc3RyaW5nLgogICAqCiAgICogQHBhcmFtIHtPYmplY3R9IGpzb24gRGVzZXJpYWxpemVkIEpTT04gb2JqZWN0LgogICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudH5Eb2N1bWVudH0gZG9jdW1lbnQgRG9jdW1lbnQgb24gd2hpY2ggdGhpcyBvcGVyYXRpb24gd2lsbCBiZSBhcHBsaWVkLgogICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL21vZGVsL29wZXJhdGlvbi9pbnNlcnRvcGVyYXRpb25+SW5zZXJ0T3BlcmF0aW9ufQogICAqLwoKCiAgc3RhdGljIGZyb21KU09OKGpzb24sIGRvY3VtZW50KSB7CiAgICBjb25zdCBjaGlsZHJlbiA9IFtdOwoKICAgIGZvciAoY29uc3QgY2hpbGQgb2YganNvbi5ub2RlcykgewogICAgICBpZiAoY2hpbGQubmFtZSkgewogICAgICAgIC8vIElmIGNoaWxkIGhhcyBuYW1lIHByb3BlcnR5LCBpdCBpcyBhbiBFbGVtZW50LgogICAgICAgIGNoaWxkcmVuLnB1c2goRWxlbWVudC5mcm9tSlNPTihjaGlsZCkpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIE90aGVyd2lzZSwgaXQgaXMgYSBUZXh0IG5vZGUuCiAgICAgICAgY2hpbGRyZW4ucHVzaChUZXh0LmZyb21KU09OKGNoaWxkKSk7CiAgICAgIH0KICAgIH0KCiAgICBjb25zdCBpbnNlcnQgPSBuZXcgSW5zZXJ0T3BlcmF0aW9uKFBvc2l0aW9uLmZyb21KU09OKGpzb24ucG9zaXRpb24sIGRvY3VtZW50KSwgY2hpbGRyZW4sIGpzb24uYmFzZVZlcnNpb24pOwogICAgaW5zZXJ0LnNob3VsZFJlY2VpdmVBdHRyaWJ1dGVzID0ganNvbi5zaG91bGRSZWNlaXZlQXR0cmlidXRlczsKICAgIHJldHVybiBpbnNlcnQ7CiAgfSAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIHRvU3RyaW5nKCkgewogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gCWNvbnN0IG5vZGVTdHJpbmcgPSB0aGlzLm5vZGVzLmxlbmd0aCA+IDEgPyBgWyAkeyB0aGlzLm5vZGVzLmxlbmd0aCB9IF1gIDogdGhpcy5ub2Rlcy5nZXROb2RlKCAwICk7CiAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLwlyZXR1cm4gYEluc2VydE9wZXJhdGlvbiggJHsgdGhpcy5iYXNlVmVyc2lvbiB9ICk6ICR7IG5vZGVTdHJpbmcgfSAtPiAkeyB0aGlzLnBvc2l0aW9uIH1gOwogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gfQoKCn0="},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js"],"names":["Operation","Position","NodeList","MoveOperation","_insert","_normalizeNodes","Text","Element","CKEditorError","InsertOperation","constructor","position","nodes","baseVersion","clone","stickiness","shouldReceiveAttributes","type","howMany","maxOffset","map","node","_clone","insert","getReversed","graveyard","root","document","gyPosition","_validate","targetElement","parent","offset","_execute","originalNodes","toJSON","json","className","fromJSON","children","child","name","push"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/insertoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport NodeList from '../nodelist';\nimport MoveOperation from './moveoperation';\nimport { _insert, _normalizeNodes } from './utils';\nimport Text from '../text';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to insert one or more nodes at given position in the model.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class InsertOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of insertion.\n\t * @param {module:engine/model/node~NodeSet} nodes The list of nodes to be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, nodes, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position of insertion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/insertoperation~InsertOperation#position\n\t\t */\n\t\tthis.position = position.clone();\n\t\tthis.position.stickiness = 'toNone';\n\n\t\t/**\n\t\t * List of nodes to insert.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/operation/insertoperation~InsertOperation#nodeList\n\t\t */\n\t\tthis.nodes = new NodeList( _normalizeNodes( nodes ) );\n\n\t\t/**\n\t\t * Flag deciding how the operation should be transformed. If set to `true`, nodes might get additional attributes\n\t\t * during operational transformation. This happens when the operation insertion position is inside of a range\n\t\t * where attributes have changed.\n\t\t *\n\t\t * @member {Boolean} module:engine/model/operation/insertoperation~InsertOperation#shouldReceiveAttributes\n\t\t */\n\t\tthis.shouldReceiveAttributes = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'insert';\n\t}\n\n\t/**\n\t * Total offset size of inserted nodes.\n\t *\n\t * @returns {Number}\n\t */\n\tget howMany() {\n\t\treturn this.nodes.maxOffset;\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst nodes = new NodeList( [ ...this.nodes ].map( node => node._clone( true ) ) );\n\t\tconst insert = new InsertOperation( this.position, nodes, this.baseVersion );\n\n\t\tinsert.shouldReceiveAttributes = this.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.position.root.document.graveyard;\n\t\tconst gyPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MoveOperation( this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst targetElement = this.position.parent;\n\n\t\tif ( !targetElement || targetElement.maxOffset < this.position.offset ) {\n\t\t\t/**\n\t\t\t * Insertion position is invalid.\n\t\t\t *\n\t\t\t * @error insert-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'insert-operation-position-invalid: Insertion position is invalid.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// What happens here is that we want original nodes be passed to writer because we want original nodes\n\t\t// to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\n\t\t// to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\n\t\t// get children. It is important that InsertOperation has the copy of original nodes in intact state.\n\t\tconst originalNodes = this.nodes;\n\t\tthis.nodes = new NodeList( [ ...originalNodes ].map( node => node._clone( true ) ) );\n\n\t\t_insert( this.position, originalNodes );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.position = this.position.toJSON();\n\t\tjson.nodes = this.nodes.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'InsertOperation';\n\t}\n\n\t/**\n\t * Creates `InsertOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json.nodes ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\tconst insert = new InsertOperation( Position.fromJSON( json.position, document ), children, json.baseVersion );\n\t\tinsert.shouldReceiveAttributes = json.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \tconst nodeString = this.nodes.length > 1 ? `[ ${ this.nodes.length } ]` : this.nodes.getNode( 0 );\n\n\t// @if CK_DEBUG_ENGINE //\treturn `InsertOperation( ${ this.baseVersion } ): ${ nodeString } -> ${ this.position }`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}