{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/text.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/text.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS9tb2RlbC90ZXh0CiAqLwppbXBvcnQgTm9kZSBmcm9tICcuL25vZGUnOyAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIGNvbnN0IHsgY29udmVydE1hcFRvU3RyaW5naWZpZWRPYmplY3QgfSA9IHJlcXVpcmUoICcuLi9kZXYtdXRpbHMvdXRpbHMnICk7CgovKioKICogTW9kZWwgdGV4dCBub2RlLiBUeXBlIG9mIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL25vZGV+Tm9kZSBub2RlfSB0aGF0IGNvbnRhaW5zIHtAbGluayBtb2R1bGU6ZW5naW5lL21vZGVsL3RleHR+VGV4dCNkYXRhIHRleHQgZGF0YX0uCiAqCiAqICoqSW1wb3J0YW50OioqIHNlZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9ub2Rlfk5vZGV9IHRvIHJlYWQgYWJvdXQgcmVzdHJpY3Rpb25zIHVzaW5nIGBUZXh0YCBhbmQgYE5vZGVgIEFQSS4KICoKICogKipOb3RlOioqIGtlZXAgaW4gbWluZCB0aGF0IGBUZXh0YCBpbnN0YW5jZXMgbWlnaHQgaW5kaXJlY3RseSBnb3QgcmVtb3ZlZCBmcm9tIG1vZGVsIHRyZWUgd2hlbiBtb2RlbCBpcyBjaGFuZ2VkLgogKiBUaGlzIGhhcHBlbnMgd2hlbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC93cml0ZXJ+V3JpdGVyIG1vZGVsIHdyaXRlcn0gaXMgdXNlZCB0byBjaGFuZ2UgbW9kZWwgYW5kIHRoZSB0ZXh0IG5vZGUgaXMgbWVyZ2VkIHdpdGgKICogYW5vdGhlciB0ZXh0IG5vZGUuIFRoZW4sIGJvdGggdGV4dCBub2RlcyBhcmUgcmVtb3ZlZCBhbmQgYSBuZXcgdGV4dCBub2RlIGlzIGluc2VydGVkIGludG8gdGhlIG1vZGVsLiBCZWNhdXNlIG9mCiAqIHRoaXMgYmVoYXZpb3IsIGtlZXBpbmcgcmVmZXJlbmNlcyB0byBgVGV4dGAgaXMgbm90IHJlY29tbWVuZGVkLiBJbnN0ZWFkLCBjb25zaWRlciBjcmVhdGluZwogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9saXZlcG9zaXRpb25+TGl2ZVBvc2l0aW9uIGxpdmUgcG9zaXRpb259IHBsYWNlZCBiZWZvcmUgdGhlIHRleHQgbm9kZS4KICoKICogQGV4dGVuZHMgbW9kdWxlOmVuZ2luZS9tb2RlbC9ub2Rlfk5vZGUKICovCgpleHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0IGV4dGVuZHMgTm9kZSB7CiAgLyoqCiAgICogQ3JlYXRlcyBhIHRleHQgbm9kZS4KICAgKgogICAqICoqTm90ZToqKiBDb25zdHJ1Y3RvciBvZiB0aGlzIGNsYXNzIHNob3VsZG4ndCBiZSB1c2VkIGRpcmVjdGx5IGluIHRoZSBjb2RlLgogICAqIFVzZSB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvd3JpdGVyfldyaXRlciNjcmVhdGVUZXh0fSBtZXRob2QgaW5zdGVhZC4KICAgKgogICAqIEBwcm90ZWN0ZWQKICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSBOb2RlJ3MgdGV4dC4KICAgKiBAcGFyYW0ge09iamVjdH0gW2F0dHJzXSBOb2RlJ3MgYXR0cmlidXRlcy4gU2VlIHtAbGluayBtb2R1bGU6dXRpbHMvdG9tYXB+dG9NYXB9IGZvciBhIGxpc3Qgb2YgYWNjZXB0ZWQgdmFsdWVzLgogICAqLwogIGNvbnN0cnVjdG9yKGRhdGEsIGF0dHJzKSB7CiAgICBzdXBlcihhdHRycyk7CiAgICAvKioKICAgICAqIFRleHQgZGF0YSBjb250YWluZWQgaW4gdGhpcyB0ZXh0IG5vZGUuCiAgICAgKgogICAgICogQHByb3RlY3RlZAogICAgICogQHR5cGUge1N0cmluZ30KICAgICAqLwoKICAgIHRoaXMuX2RhdGEgPSBkYXRhIHx8ICcnOwogIH0KICAvKioKICAgKiBAaW5oZXJpdERvYwogICAqLwoKCiAgZ2V0IG9mZnNldFNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aDsKICB9CiAgLyoqCiAgICogUmV0dXJucyBhIHRleHQgZGF0YSBjb250YWluZWQgaW4gdGhlIG5vZGUuCiAgICoKICAgKiBAcmVhZG9ubHkKICAgKiBAdHlwZSB7U3RyaW5nfQogICAqLwoKCiAgZ2V0IGRhdGEoKSB7CiAgICByZXR1cm4gdGhpcy5fZGF0YTsKICB9CiAgLyoqCiAgICogQ2hlY2tzIHdoZXRoZXIgdGhpcyBvYmplY3QgaXMgb2YgdGhlIGdpdmVuLgogICAqCiAgICoJCXRleHQuaXMoICd0ZXh0JyApOyAvLyAtPiB0cnVlCiAgICoJCXRleHQuaXMoICdub2RlJyApOyAvLyAtPiB0cnVlCiAgICoJCXRleHQuaXMoICdtb2RlbDp0ZXh0JyApOyAvLyAtPiB0cnVlCiAgICoJCXRleHQuaXMoICdtb2RlbDpub2RlJyApOyAvLyAtPiB0cnVlCiAgICoKICAgKgkJdGV4dC5pcyggJ3ZpZXc6dGV4dCcgKTsgLy8gLT4gZmFsc2UKICAgKgkJdGV4dC5pcyggJ2RvY3VtZW50U2VsZWN0aW9uJyApOyAvLyAtPiBmYWxzZQogICAqCiAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvbm9kZX5Ob2RlI2lzIENoZWNrIHRoZSBlbnRpcmUgbGlzdCBvZiBtb2RlbCBvYmplY3RzfSB3aGljaCBpbXBsZW1lbnQgdGhlIGBpcygpYCBtZXRob2QuCiAgICoKICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUeXBlIHRvIGNoZWNrIHdoZW4gYG5hbWVgIHBhcmFtZXRlciBpcyBwcmVzZW50LgogICAqIE90aGVyd2lzZSwgaXQgYWN0cyBsaWtlIHRoZSBgbmFtZWAgcGFyYW1ldGVyLgogICAqIEByZXR1cm5zIHtCb29sZWFufQogICAqLwoKCiAgaXModHlwZSkgewogICAgcmV0dXJuIHR5cGUgPT0gJ3RleHQnIHx8IHR5cGUgPT0gJ21vZGVsOnRleHQnIHx8IHN1cGVyLmlzKHR5cGUpOwogIH0KICAvKioKICAgKiBDb252ZXJ0cyBgVGV4dGAgaW5zdGFuY2UgdG8gcGxhaW4gb2JqZWN0IGFuZCByZXR1cm5zIGl0LgogICAqCiAgICogQHJldHVybnMge09iamVjdH0gYFRleHRgIGluc3RhbmNlIGNvbnZlcnRlZCB0byBwbGFpbiBvYmplY3QuCiAgICovCgoKICB0b0pTT04oKSB7CiAgICBjb25zdCBqc29uID0gc3VwZXIudG9KU09OKCk7CiAgICBqc29uLmRhdGEgPSB0aGlzLmRhdGE7CiAgICByZXR1cm4ganNvbjsKICB9CiAgLyoqCiAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyB0ZXh0IG5vZGUgYW5kIHJldHVybnMgaXQuIENyZWF0ZWQgdGV4dCBub2RlIGhhcyBzYW1lIHRleHQgZGF0YSBhbmQgYXR0cmlidXRlcyBhcyBvcmlnaW5hbCB0ZXh0IG5vZGUuCiAgICoKICAgKiBAcHJvdGVjdGVkCiAgICogQHJldHVybnMge21vZHVsZTplbmdpbmUvbW9kZWwvdGV4dH5UZXh0fSBgVGV4dGAgaW5zdGFuY2UgY3JlYXRlZCB1c2luZyBnaXZlbiBwbGFpbiBvYmplY3QuCiAgICovCgoKICBfY2xvbmUoKSB7CiAgICByZXR1cm4gbmV3IFRleHQodGhpcy5kYXRhLCB0aGlzLmdldEF0dHJpYnV0ZXMoKSk7CiAgfQogIC8qKgogICAqIENyZWF0ZXMgYSBgVGV4dGAgaW5zdGFuY2UgZnJvbSBnaXZlbiBwbGFpbiBvYmplY3QgKGkuZS4gcGFyc2VkIEpTT04gc3RyaW5nKS4KICAgKgogICAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIFBsYWluIG9iamVjdCB0byBiZSBjb252ZXJ0ZWQgdG8gYFRleHRgLgogICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL21vZGVsL3RleHR+VGV4dH0gYFRleHRgIGluc3RhbmNlIGNyZWF0ZWQgdXNpbmcgZ2l2ZW4gcGxhaW4gb2JqZWN0LgogICAqLwoKCiAgc3RhdGljIGZyb21KU09OKGpzb24pIHsKICAgIHJldHVybiBuZXcgVGV4dChqc29uLmRhdGEsIGpzb24uYXR0cmlidXRlcyk7CiAgfSAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIHRvU3RyaW5nKCkgewogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gCXJldHVybiBgIyR7IHRoaXMuZGF0YSB9YDsKICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIH0KICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIGxvZ0V4dGVuZGVkKCkgewogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gCWNvbnNvbGUubG9nKCBgTW9kZWxUZXh0OiAkeyB0aGlzIH0sIGF0dHJzOiAkeyBjb252ZXJ0TWFwVG9TdHJpbmdpZmllZE9iamVjdCggdGhpcy5nZXRBdHRyaWJ1dGVzKCkgKSB9YCApOwogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gfQogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gbG9nKCkgewogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gCWNvbnNvbGUubG9nKCAnTW9kZWxUZXh0OiAnICsgdGhpcyApOwogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gfQoKCn0="},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/text.js"],"names":["Node","Text","constructor","data","attrs","_data","offsetSize","length","is","type","toJSON","json","_clone","getAttributes","fromJSON","attributes"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,IAAP,MAAiB,QAAjB,C,CAEA;;AAEA;;;;;;;;;;;;;;AAaA,eAAe,MAAMC,IAAN,SAAmBD,IAAnB,CAAwB;AACtC;;;;;;;;;;AAUAE,EAAAA,WAAW,CAAEC,IAAF,EAAQC,KAAR,EAAgB;AAC1B,UAAOA,KAAP;AAEA;;;;;;;AAMA,SAAKC,KAAL,GAAaF,IAAI,IAAI,EAArB;AACA;AAED;;;;;AAGA,MAAIG,UAAJ,GAAiB;AAChB,WAAO,KAAKH,IAAL,CAAUI,MAAjB;AACA;AAED;;;;;;;;AAMA,MAAIJ,IAAJ,GAAW;AACV,WAAO,KAAKE,KAAZ;AACA;AAED;;;;;;;;;;;;;;;;;;;AAiBAG,EAAAA,EAAE,CAAEC,IAAF,EAAS;AACV,WAAOA,IAAI,IAAI,MAAR,IAAkBA,IAAI,IAAI,YAA1B,IAA0C,MAAMD,EAAN,CAAUC,IAAV,CAAjD;AACA;AAED;;;;;;;AAKAC,EAAAA,MAAM,GAAG;AACR,UAAMC,IAAI,GAAG,MAAMD,MAAN,EAAb;AAEAC,IAAAA,IAAI,CAACR,IAAL,GAAY,KAAKA,IAAjB;AAEA,WAAOQ,IAAP;AACA;AAED;;;;;;;;AAMAC,EAAAA,MAAM,GAAG;AACR,WAAO,IAAIX,IAAJ,CAAU,KAAKE,IAAf,EAAqB,KAAKU,aAAL,EAArB,CAAP;AACA;AAED;;;;;;;;AAMA,SAAOC,QAAP,CAAiBH,IAAjB,EAAwB;AACvB,WAAO,IAAIV,IAAJ,CAAUU,IAAI,CAACR,IAAf,EAAqBQ,IAAI,CAACI,UAA1B,CAAP;AACA,GA5FqC,CA8FtC;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAxGsC","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/text\n */\n\nimport Node from './node';\n\n// @if CK_DEBUG_ENGINE // const { convertMapToStringifiedObject } = require( '../dev-utils/utils' );\n\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n *\n * @extends module:engine/model/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a text node.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n\t *\n\t * @protected\n\t * @param {String} data Node's text.\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( data, attrs ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Text data contained in this text node.\n\t\t *\n\t\t * @protected\n\t\t * @type {String}\n\t\t */\n\t\tthis._data = data || '';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Returns a text data contained in the node.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\ttext.is( 'text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'model:text' ); // -> true\n\t *\t\ttext.is( 'model:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'view:text' ); // -> false\n\t *\t\ttext.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'text' || type == 'model:text' || super.is( type );\n\t}\n\n\t/**\n\t * Converts `Text` instance to plain object and returns it.\n\t *\n\t * @returns {Object} `Text` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.data = this.data;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data, this.getAttributes() );\n\t}\n\n\t/**\n\t * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Text`.\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new Text( json.data, json.attributes );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `#${ this.data }`;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logExtended() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( `ModelText: ${ this }, attrs: ${ convertMapToStringifiedObject( this.getAttributes() ) }` );\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // log() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ModelText: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}