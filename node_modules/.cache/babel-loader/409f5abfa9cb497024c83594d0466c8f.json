{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/node.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/node.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS92aWV3L25vZGUKICovCmltcG9ydCBDS0VkaXRvckVycm9yIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL2NrZWRpdG9yZXJyb3InOwppbXBvcnQgRW1pdHRlck1peGluIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL2VtaXR0ZXJtaXhpbic7CmltcG9ydCBtaXggZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvbWl4JzsKaW1wb3J0IGNvbXBhcmVBcnJheXMgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvY29tcGFyZWFycmF5cyc7CmltcG9ydCB7IGNsb25lIH0gZnJvbSAnbG9kYXNoLWVzJzsgLy8gVG8gY2hlY2sgaWYgY29tcG9uZW50IGlzIGxvYWRlZCBtb3JlIHRoYW4gb25jZS4KCmltcG9ydCAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvdmVyc2lvbic7Ci8qKgogKiBBYnN0cmFjdCB0cmVlIHZpZXcgbm9kZSBjbGFzcy4KICoKICogVGhpcyBpcyBhbiBhYnN0cmFjdCBjbGFzcy4gSXRzIGNvbnN0cnVjdG9yIHNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseS4KICogVXNlIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2VsZW1lbnR+RWxlbWVudH0gY2xhc3MgdG8gY3JlYXRlIHZpZXcgZWxlbWVudHMKICogb3Ige0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy90ZXh0flRleHR9IGNsYXNzIHRvIGNyZWF0ZSB2aWV3IHRleHQgbm9kZXMuCiAqCiAqIEBhYnN0cmFjdAogKi8KCmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vZGUgewogIC8qKgogICAqIENyZWF0ZXMgYSB0cmVlIHZpZXcgbm9kZS4KICAgKi8KICBjb25zdHJ1Y3RvcigpIHsKICAgIC8qKgogICAgICogUGFyZW50IGVsZW1lbnQuIE51bGwgYnkgZGVmYXVsdC4gU2V0IGJ5IHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZWxlbWVudH5FbGVtZW50I19pbnNlcnRDaGlsZH0uCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAbWVtYmVyIHttb2R1bGU6ZW5naW5lL3ZpZXcvZWxlbWVudH5FbGVtZW50fG1vZHVsZTplbmdpbmUvdmlldy9kb2N1bWVudGZyYWdtZW50fkRvY3VtZW50RnJhZ21lbnR8bnVsbH0KICAgICAqLwogICAgdGhpcy5wYXJlbnQgPSBudWxsOwogIH0KICAvKioKICAgKiBJbmRleCBvZiB0aGUgbm9kZSBpbiB0aGUgcGFyZW50IGVsZW1lbnQgb3IgbnVsbCBpZiB0aGUgbm9kZSBoYXMgbm8gcGFyZW50LgogICAqCiAgICogQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgdGhyb3dzIGFuIGVycm9yIGlmIHRoaXMgbm9kZSdzIHBhcmVudCBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXQuCiAgICogVGhpcyBtZWFucyB0aGF0IHZpZXcgdHJlZSBnb3QgYnJva2VuLgogICAqCiAgICogQHJlYWRvbmx5CiAgICogQHR5cGUge051bWJlcnxudWxsfQogICAqLwoKCiAgZ2V0IGluZGV4KCkgewogICAgbGV0IHBvczsKCiAgICBpZiAoIXRoaXMucGFyZW50KSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfSAvLyBObyBwYXJlbnQgb3IgY2hpbGQgZG9lc24ndCBleGlzdCBpbiBwYXJlbnQncyBjaGlsZHJlbi4KCgogICAgaWYgKChwb3MgPSB0aGlzLnBhcmVudC5nZXRDaGlsZEluZGV4KHRoaXMpKSA9PSAtMSkgewogICAgICAvKioKICAgICAgICogVGhlIG5vZGUncyBwYXJlbnQgZG9lcyBub3QgY29udGFpbiB0aGlzIG5vZGUuIEl0IG1lYW5zIHRoYXQgdGhlIGRvY3VtZW50IHRyZWUgaXMgY29ycnVwdGVkLgogICAgICAgKgogICAgICAgKiBAZXJyb3Igdmlldy1ub2RlLW5vdC1mb3VuZC1pbi1wYXJlbnQKICAgICAgICovCiAgICAgIHRocm93IG5ldyBDS0VkaXRvckVycm9yKCd2aWV3LW5vZGUtbm90LWZvdW5kLWluLXBhcmVudDogVGhlIG5vZGVcJ3MgcGFyZW50IGRvZXMgbm90IGNvbnRhaW4gdGhpcyBub2RlLicsIHRoaXMpOwogICAgfQoKICAgIHJldHVybiBwb3M7CiAgfQogIC8qKgogICAqIE5vZGUncyBuZXh0IHNpYmxpbmcsIG9yIGBudWxsYCBpZiBpdCBpcyB0aGUgbGFzdCBjaGlsZC4KICAgKgogICAqIEByZWFkb25seQogICAqIEB0eXBlIHttb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlfG51bGx9CiAgICovCgoKICBnZXQgbmV4dFNpYmxpbmcoKSB7CiAgICBjb25zdCBpbmRleCA9IHRoaXMuaW5kZXg7CiAgICByZXR1cm4gaW5kZXggIT09IG51bGwgJiYgdGhpcy5wYXJlbnQuZ2V0Q2hpbGQoaW5kZXggKyAxKSB8fCBudWxsOwogIH0KICAvKioKICAgKiBOb2RlJ3MgcHJldmlvdXMgc2libGluZywgb3IgYG51bGxgIGlmIGl0IGlzIHRoZSBmaXJzdCBjaGlsZC4KICAgKgogICAqIEByZWFkb25seQogICAqIEB0eXBlIHttb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlfG51bGx9CiAgICovCgoKICBnZXQgcHJldmlvdXNTaWJsaW5nKCkgewogICAgY29uc3QgaW5kZXggPSB0aGlzLmluZGV4OwogICAgcmV0dXJuIGluZGV4ICE9PSBudWxsICYmIHRoaXMucGFyZW50LmdldENoaWxkKGluZGV4IC0gMSkgfHwgbnVsbDsKICB9CiAgLyoqCiAgICogVG9wLW1vc3QgYW5jZXN0b3Igb2YgdGhlIG5vZGUuIElmIHRoZSBub2RlIGhhcyBubyBwYXJlbnQgaXQgaXMgdGhlIHJvb3QgaXRzZWxmLgogICAqCiAgICogQHJlYWRvbmx5CiAgICogQHR5cGUge21vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGV8bW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50ZnJhZ21lbnR+RG9jdW1lbnRGcmFnbWVudH0KICAgKi8KCgogIGdldCByb290KCkgewogICAgbGV0IHJvb3QgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtdGhpcwoKICAgIHdoaWxlIChyb290LnBhcmVudCkgewogICAgICByb290ID0gcm9vdC5wYXJlbnQ7CiAgICB9CgogICAgcmV0dXJuIHJvb3Q7CiAgfQogIC8qKgogICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnR+RG9jdW1lbnQgVmlldyBkb2N1bWVudH0gdGhhdCBvd25zIHRoaXMgbm9kZSwgb3IgYG51bGxgIGlmIHRoZSBub2RlIGlzIGluc2lkZQogICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnRmcmFnbWVudH5Eb2N1bWVudEZyYWdtZW50IGRvY3VtZW50IGZyYWdtZW50fS4KICAgKgogICAqIEByZWFkb25seQogICAqIEB0eXBlIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnR+RG9jdW1lbnR8bnVsbH0KICAgKi8KCgogIGdldCBkb2N1bWVudCgpIHsKICAgIC8vIFBhcmVudCBtaWdodCBiZSBOb2RlLCBudWxsIG9yIERvY3VtZW50RnJhZ21lbnQuCiAgICBpZiAodGhpcy5wYXJlbnQgaW5zdGFuY2VvZiBOb2RlKSB7CiAgICAgIHJldHVybiB0aGlzLnBhcmVudC5kb2N1bWVudDsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0KICAvKioKICAgKiBHZXRzIGEgcGF0aCB0byB0aGUgbm9kZS4gVGhlIHBhdGggaXMgYW4gYXJyYXkgY29udGFpbmluZyBpbmRpY2VzIG9mIGNvbnNlY3V0aXZlIGFuY2VzdG9ycyBvZiB0aGlzIG5vZGUsCiAgICogYmVnaW5uaW5nIGZyb20ge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGUjcm9vdCByb290fSwgZG93biB0byB0aGlzIG5vZGUncyBpbmRleC4KICAgKgogICAqCQljb25zdCBhYmMgPSBkb3duY2FzdFdyaXRlci5jcmVhdGVUZXh0KCAnYWJjJyApOwogICAqCQljb25zdCBmb28gPSBkb3duY2FzdFdyaXRlci5jcmVhdGVUZXh0KCAnZm9vJyApOwogICAqCQljb25zdCBoMSA9IGRvd25jYXN0V3JpdGVyLmNyZWF0ZUVsZW1lbnQoICdoMScsIG51bGwsIGRvd25jYXN0V3JpdGVyLmNyZWF0ZVRleHQoICdoZWFkZXInICkgKTsKICAgKgkJY29uc3QgcCA9IGRvd25jYXN0V3JpdGVyLmNyZWF0ZUVsZW1lbnQoICdwJywgbnVsbCwgWyBhYmMsIGZvbyBdICk7CiAgICoJCWNvbnN0IGRpdiA9IGRvd25jYXN0V3JpdGVyLmNyZWF0ZUVsZW1lbnQoICdkaXYnLCBudWxsLCBbIGgxLCBwIF0gKTsKICAgKgkJZm9vLmdldFBhdGgoKTsgLy8gUmV0dXJucyBbIDEsIDMgXS4gYGZvb2AgaXMgaW4gYHBgIHdoaWNoIGlzIGluIGBkaXZgLiBgcGAgc3RhcnRzIGF0IG9mZnNldCAxLCB3aGlsZSBgZm9vYCBhdCAzLgogICAqCQloMS5nZXRQYXRoKCk7IC8vIFJldHVybnMgWyAwIF0uCiAgICoJCWRpdi5nZXRQYXRoKCk7IC8vIFJldHVybnMgW10uCiAgICoKICAgKiBAcmV0dXJucyB7QXJyYXkuPE51bWJlcj59IFRoZSBwYXRoLgogICAqLwoKCiAgZ2V0UGF0aCgpIHsKICAgIGNvbnN0IHBhdGggPSBbXTsKICAgIGxldCBub2RlID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXRoaXMKCiAgICB3aGlsZSAobm9kZS5wYXJlbnQpIHsKICAgICAgcGF0aC51bnNoaWZ0KG5vZGUuaW5kZXgpOwogICAgICBub2RlID0gbm9kZS5wYXJlbnQ7CiAgICB9CgogICAgcmV0dXJuIHBhdGg7CiAgfQogIC8qKgogICAqIFJldHVybnMgYW5jZXN0b3JzIGFycmF5IG9mIHRoaXMgbm9kZS4KICAgKgogICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0LgogICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuaW5jbHVkZVNlbGY9ZmFsc2VdIFdoZW4gc2V0IHRvIGB0cnVlYCB0aGlzIG5vZGUgd2lsbCBiZSBhbHNvIGluY2x1ZGVkIGluIHBhcmVudCdzIGFycmF5LgogICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMucGFyZW50Rmlyc3Q9ZmFsc2VdIFdoZW4gc2V0IHRvIGB0cnVlYCwgYXJyYXkgd2lsbCBiZSBzb3J0ZWQgZnJvbSBub2RlJ3MgcGFyZW50IHRvIHJvb3QgZWxlbWVudCwKICAgKiBvdGhlcndpc2Ugcm9vdCBlbGVtZW50IHdpbGwgYmUgdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIGFycmF5LgogICAqIEByZXR1cm5zIHtBcnJheX0gQXJyYXkgd2l0aCBhbmNlc3RvcnMuCiAgICovCgoKICBnZXRBbmNlc3RvcnMob3B0aW9ucyA9IHsKICAgIGluY2x1ZGVTZWxmOiBmYWxzZSwKICAgIHBhcmVudEZpcnN0OiBmYWxzZQogIH0pIHsKICAgIGNvbnN0IGFuY2VzdG9ycyA9IFtdOwogICAgbGV0IHBhcmVudCA9IG9wdGlvbnMuaW5jbHVkZVNlbGYgPyB0aGlzIDogdGhpcy5wYXJlbnQ7CgogICAgd2hpbGUgKHBhcmVudCkgewogICAgICBhbmNlc3RvcnNbb3B0aW9ucy5wYXJlbnRGaXJzdCA/ICdwdXNoJyA6ICd1bnNoaWZ0J10ocGFyZW50KTsKICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDsKICAgIH0KCiAgICByZXR1cm4gYW5jZXN0b3JzOwogIH0KICAvKioKICAgKiBSZXR1cm5zIGEge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9lbGVtZW50fkVsZW1lbnR9IG9yIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnRmcmFnbWVudH5Eb2N1bWVudEZyYWdtZW50fQogICAqIHdoaWNoIGlzIGEgY29tbW9uIGFuY2VzdG9yIG9mIGJvdGggbm9kZXMuCiAgICoKICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGV9IG5vZGUgVGhlIHNlY29uZCBub2RlLgogICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0LgogICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuaW5jbHVkZVNlbGY9ZmFsc2VdIFdoZW4gc2V0IHRvIGB0cnVlYCBib3RoIG5vZGVzIHdpbGwgYmUgY29uc2lkZXJlZCAiYW5jZXN0b3JzIiB0b28uCiAgICogV2hpY2ggbWVhbnMgdGhhdCBpZiBlLmcuIG5vZGUgQSBpcyBpbnNpZGUgQiwgdGhlbiB0aGVpciBjb21tb24gYW5jZXN0b3Igd2lsbCBiZSBCLgogICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL3ZpZXcvZWxlbWVudH5FbGVtZW50fG1vZHVsZTplbmdpbmUvdmlldy9kb2N1bWVudGZyYWdtZW50fkRvY3VtZW50RnJhZ21lbnR8bnVsbH0KICAgKi8KCgogIGdldENvbW1vbkFuY2VzdG9yKG5vZGUsIG9wdGlvbnMgPSB7fSkgewogICAgY29uc3QgYW5jZXN0b3JzQSA9IHRoaXMuZ2V0QW5jZXN0b3JzKG9wdGlvbnMpOwogICAgY29uc3QgYW5jZXN0b3JzQiA9IG5vZGUuZ2V0QW5jZXN0b3JzKG9wdGlvbnMpOwogICAgbGV0IGkgPSAwOwoKICAgIHdoaWxlIChhbmNlc3RvcnNBW2ldID09IGFuY2VzdG9yc0JbaV0gJiYgYW5jZXN0b3JzQVtpXSkgewogICAgICBpKys7CiAgICB9CgogICAgcmV0dXJuIGkgPT09IDAgPyBudWxsIDogYW5jZXN0b3JzQVtpIC0gMV07CiAgfQogIC8qKgogICAqIFJldHVybnMgd2hldGhlciB0aGlzIG5vZGUgaXMgYmVmb3JlIGdpdmVuIG5vZGUuIGBmYWxzZWAgaXMgcmV0dXJuZWQgaWYgbm9kZXMgYXJlIGluIGRpZmZlcmVudCB0cmVlcyAoZm9yIGV4YW1wbGUsCiAgICogaW4gZGlmZmVyZW50IHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnRmcmFnbWVudH5Eb2N1bWVudEZyYWdtZW50fXMpLgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlfSBub2RlIE5vZGUgdG8gY29tcGFyZSB3aXRoLgogICAqIEByZXR1cm5zIHtCb29sZWFufQogICAqLwoKCiAgaXNCZWZvcmUobm9kZSkgewogICAgLy8gR2l2ZW4gbm9kZSBpcyBub3QgYmVmb3JlIHRoaXMgbm9kZSBpZiB0aGV5IGFyZSBzYW1lLgogICAgaWYgKHRoaXMgPT0gbm9kZSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9IC8vIFJldHVybiBgZmFsc2VgIGlmIGl0IGlzIGltcG9zc2libGUgdG8gY29tcGFyZSBub2Rlcy4KCgogICAgaWYgKHRoaXMucm9vdCAhPT0gbm9kZS5yb290KSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBjb25zdCB0aGlzUGF0aCA9IHRoaXMuZ2V0UGF0aCgpOwogICAgY29uc3Qgbm9kZVBhdGggPSBub2RlLmdldFBhdGgoKTsKICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmVBcnJheXModGhpc1BhdGgsIG5vZGVQYXRoKTsKCiAgICBzd2l0Y2ggKHJlc3VsdCkgewogICAgICBjYXNlICdwcmVmaXgnOgogICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgY2FzZSAnZXh0ZW5zaW9uJzoKICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiB0aGlzUGF0aFtyZXN1bHRdIDwgbm9kZVBhdGhbcmVzdWx0XTsKICAgIH0KICB9CiAgLyoqCiAgICogUmV0dXJucyB3aGV0aGVyIHRoaXMgbm9kZSBpcyBhZnRlciBnaXZlbiBub2RlLiBgZmFsc2VgIGlzIHJldHVybmVkIGlmIG5vZGVzIGFyZSBpbiBkaWZmZXJlbnQgdHJlZXMgKGZvciBleGFtcGxlLAogICAqIGluIGRpZmZlcmVudCB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50ZnJhZ21lbnR+RG9jdW1lbnRGcmFnbWVudH1zKS4KICAgKgogICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L25vZGV+Tm9kZX0gbm9kZSBOb2RlIHRvIGNvbXBhcmUgd2l0aC4KICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0KICAgKi8KCgogIGlzQWZ0ZXIobm9kZSkgewogICAgLy8gR2l2ZW4gbm9kZSBpcyBub3QgYmVmb3JlIHRoaXMgbm9kZSBpZiB0aGV5IGFyZSBzYW1lLgogICAgaWYgKHRoaXMgPT0gbm9kZSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9IC8vIFJldHVybiBgZmFsc2VgIGlmIGl0IGlzIGltcG9zc2libGUgdG8gY29tcGFyZSBub2Rlcy4KCgogICAgaWYgKHRoaXMucm9vdCAhPT0gbm9kZS5yb290KSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0gLy8gSW4gb3RoZXIgY2FzZXMsIGp1c3QgY2hlY2sgaWYgdGhlIGBub2RlYCBpcyBiZWZvcmUsIGFuZCByZXR1cm4gdGhlIG9wcG9zaXRlLgoKCiAgICByZXR1cm4gIXRoaXMuaXNCZWZvcmUobm9kZSk7CiAgfQogIC8qKgogICAqIFJlbW92ZXMgbm9kZSBmcm9tIHBhcmVudC4KICAgKgogICAqIEBwcm90ZWN0ZWQKICAgKi8KCgogIF9yZW1vdmUoKSB7CiAgICB0aGlzLnBhcmVudC5fcmVtb3ZlQ2hpbGRyZW4odGhpcy5pbmRleCk7CiAgfQogIC8qKgogICAqIEBwcm90ZWN0ZWQKICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9kb2N1bWVudH5DaGFuZ2VUeXBlfSB0eXBlIFR5cGUgb2YgdGhlIGNoYW5nZS4KICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGV9IG5vZGUgQ2hhbmdlZCBub2RlLgogICAqIEBmaXJlcyBjaGFuZ2UKICAgKi8KCgogIF9maXJlQ2hhbmdlKHR5cGUsIG5vZGUpIHsKICAgIHRoaXMuZmlyZSgnY2hhbmdlOicgKyB0eXBlLCBub2RlKTsKCiAgICBpZiAodGhpcy5wYXJlbnQpIHsKICAgICAgdGhpcy5wYXJlbnQuX2ZpcmVDaGFuZ2UodHlwZSwgbm9kZSk7CiAgICB9CiAgfQogIC8qKgogICAqIEN1c3RvbSB0b0pTT04gbWV0aG9kIHRvIHNvbHZlIGNoaWxkLXBhcmVudCBjaXJjdWxhciBkZXBlbmRlbmNpZXMuCiAgICoKICAgKiBAcmV0dXJucyB7T2JqZWN0fSBDbG9uZSBvZiB0aGlzIG9iamVjdCB3aXRoIHRoZSBwYXJlbnQgcHJvcGVydHkgcmVtb3ZlZC4KICAgKi8KCgogIHRvSlNPTigpIHsKICAgIGNvbnN0IGpzb24gPSBjbG9uZSh0aGlzKTsgLy8gRHVlIHRvIGNpcmN1bGFyIHJlZmVyZW5jZXMgd2UgbmVlZCB0byByZW1vdmUgcGFyZW50IHJlZmVyZW5jZS4KCiAgICBkZWxldGUganNvbi5wYXJlbnQ7CiAgICByZXR1cm4ganNvbjsKICB9CiAgLyoqCiAgICogQ2hlY2tzIHdoZXRoZXIgdGhpcyBvYmplY3QgaXMgb2YgdGhlIGdpdmVuIHR5cGUuCiAgICoKICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VmdWwgd2hlbiBwcm9jZXNzaW5nIHZpZXcgb2JqZWN0cyB0aGF0IGFyZSBvZiB1bmtub3duIHR5cGUuIEZvciBleGFtcGxlLCBhIGZ1bmN0aW9uCiAgICogbWF5IHJldHVybiBhIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnRmcmFnbWVudH5Eb2N1bWVudEZyYWdtZW50fSBvciBhIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlfQogICAqIHRoYXQgY2FuIGJlIGVpdGhlciBhIHRleHQgbm9kZSBvciBhbiBlbGVtZW50LiBUaGlzIG1ldGhvZCBjYW4gYmUgdXNlZCB0byBjaGVjayB3aGF0IGtpbmQgb2Ygb2JqZWN0IGlzIHJldHVybmVkLgogICAqCiAgICoJCXNvbWVPYmplY3QuaXMoICdlbGVtZW50JyApOyAvLyAtPiB0cnVlIGlmIHRoaXMgaXMgYW4gZWxlbWVudAogICAqCQlzb21lT2JqZWN0LmlzKCAnbm9kZScgKTsgLy8gLT4gdHJ1ZSBpZiB0aGlzIGlzIGEgbm9kZSAoYSB0ZXh0IG5vZGUgb3IgYW4gZWxlbWVudCkKICAgKgkJc29tZU9iamVjdC5pcyggJ2RvY3VtZW50RnJhZ21lbnQnICk7IC8vIC0+IHRydWUgaWYgdGhpcyBpcyBhIGRvY3VtZW50IGZyYWdtZW50CiAgICoKICAgKiBTaW5jZSB0aGlzIG1ldGhvZCBpcyBhbHNvIGF2YWlsYWJsZSBvbiBhIHJhbmdlIG9mIG1vZGVsIG9iamVjdHMsIHlvdSBjYW4gcHJlZml4IHRoZSB0eXBlIG9mIHRoZSBvYmplY3Qgd2l0aAogICAqIGBtb2RlbDpgIG9yIGB2aWV3OmAgdG8gY2hlY2ssIGZvciBleGFtcGxlLCBpZiB0aGlzIGlzIHRoZSBtb2RlbCdzIG9yIHZpZXcncyBlbGVtZW50OgogICAqCiAgICoJCXZpZXdFbGVtZW50LmlzKCAndmlldzplbGVtZW50JyApOyAvLyAtPiB0cnVlCiAgICoJCXZpZXdFbGVtZW50LmlzKCAnbW9kZWw6ZWxlbWVudCcgKTsgLy8gLT4gZmFsc2UKICAgKgogICAqIEJ5IHVzaW5nIHRoaXMgbWV0aG9kIGl0IGlzIGFsc28gcG9zc2libGUgdG8gY2hlY2sgYSBuYW1lIG9mIGFuIGVsZW1lbnQ6CiAgICoKICAgKgkJaW1nRWxlbWVudC5pcyggJ2ltZycgKTsgLy8gLT4gdHJ1ZQogICAqCQlpbWdFbGVtZW50LmlzKCAnZWxlbWVudCcsICdpbWcnICk7IC8vIC0+IHNhbWUgYXMgYWJvdmUKICAgKgkJaW1nRWxlbWVudC5pcyggJ3ZpZXc6ZWxlbWVudCcsICdpbWcnICk7IC8vIC0+IHNhbWUgYXMgYWJvdmUsIGJ1dCBtb3JlIHByZWNpc2UKICAgKgogICAqIFRoZSBsaXN0IG9mIHZpZXcgb2JqZWN0cyB3aGljaCBpbXBsZW1lbnQgdGhlIGBpcygpYCBtZXRob2Q6CiAgICoKICAgKiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvYXR0cmlidXRlZWxlbWVudH5BdHRyaWJ1dGVFbGVtZW50I2lzIGBBdHRyaWJ1dGVFbGVtZW50I2lzKClgfQogICAqICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9jb250YWluZXJlbGVtZW50fkNvbnRhaW5lckVsZW1lbnQjaXMgYENvbnRhaW5lckVsZW1lbnQjaXMoKWB9CiAgICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50ZnJhZ21lbnR+RG9jdW1lbnRGcmFnbWVudCNpcyBgRG9jdW1lbnRGcmFnbWVudCNpcygpYH0KICAgKiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnRzZWxlY3Rpb25+RG9jdW1lbnRTZWxlY3Rpb24jaXMgYERvY3VtZW50U2VsZWN0aW9uI2lzKClgfQogICAqICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9lZGl0YWJsZWVsZW1lbnR+RWRpdGFibGVFbGVtZW50I2lzIGBFZGl0YWJsZUVsZW1lbnQjaXMoKWB9CiAgICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2VsZW1lbnR+RWxlbWVudCNpcyBgRWxlbWVudCNpcygpYH0KICAgKiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZW1wdHllbGVtZW50fkVtcHR5RWxlbWVudCNpcyBgRW1wdHlFbGVtZW50I2lzKClgfQogICAqICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGUjaXMgYE5vZGUjaXMoKWB9CiAgICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3Bvc2l0aW9uflBvc2l0aW9uI2lzIGBQb3NpdGlvbiNpcygpYH0KICAgKiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvcmFuZ2V+UmFuZ2UjaXMgYFJhbmdlI2lzKClgfQogICAqICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9yb290ZWRpdGFibGVlbGVtZW50flJvb3RFZGl0YWJsZUVsZW1lbnQjaXMgYFJvb3RFZGl0YWJsZUVsZW1lbnQjaXMoKWB9CiAgICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3NlbGVjdGlvbn5TZWxlY3Rpb24jaXMgYFNlbGVjdGlvbiNpcygpYH0KICAgKiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvdGV4dH5UZXh0I2lzIGBUZXh0I2lzKClgfQogICAqICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy90ZXh0cHJveHl+VGV4dFByb3h5I2lzIGBUZXh0UHJveHkjaXMoKWB9CiAgICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3VpZWxlbWVudH5VSUVsZW1lbnQjaXMgYFVJRWxlbWVudCNpcygpYH0KICAgKgogICAqIEBtZXRob2QgI2lzCiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUKICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0KICAgKi8KCgogIGlzKHR5cGUpIHsKICAgIHJldHVybiB0eXBlID09ICdub2RlJyB8fCB0eXBlID09ICd2aWV3Om5vZGUnOwogIH0KICAvKioKICAgKiBDbG9uZXMgdGhpcyBub2RlLgogICAqCiAgICogQHByb3RlY3RlZAogICAqIEBtZXRob2QgI19jbG9uZQogICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlfSBDbG9uZSBvZiB0aGlzIG5vZGUuCiAgICovCgogIC8qKgogICAqIENoZWNrcyBpZiBwcm92aWRlZCBub2RlIGlzIHNpbWlsYXIgdG8gdGhpcyBub2RlLgogICAqCiAgICogQG1ldGhvZCAjaXNTaW1pbGFyCiAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgbm9kZXMgYXJlIHNpbWlsYXIuCiAgICovCgoKfQovKioKICogRmlyZWQgd2hlbiBsaXN0IG9mIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZWxlbWVudH5FbGVtZW50IGVsZW1lbnRzfSBjaGlsZHJlbiBjaGFuZ2VzLgogKgogKiBDaGFuZ2UgZXZlbnQgaXMgYnViYmxlZCDigJMgaXQgaXMgZmlyZWQgb24gYWxsIGFuY2VzdG9ycy4KICoKICogQGV2ZW50IGNoYW5nZTpjaGlsZHJlbgogKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGV9IGNoYW5nZWROb2RlCiAqLwoKLyoqCiAqIEZpcmVkIHdoZW4gbGlzdCBvZiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2VsZW1lbnR+RWxlbWVudCBlbGVtZW50c30gYXR0cmlidXRlcyBjaGFuZ2VzLgogKgogKiBDaGFuZ2UgZXZlbnQgaXMgYnViYmxlZCDigJMgaXQgaXMgZmlyZWQgb24gYWxsIGFuY2VzdG9ycy4KICoKICogQGV2ZW50IGNoYW5nZTphdHRyaWJ1dGVzCiAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L25vZGV+Tm9kZX0gY2hhbmdlZE5vZGUKICovCgovKioKICogRmlyZWQgd2hlbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3RleHR+VGV4dCB0ZXh0IG5vZGVzfSBkYXRhIGNoYW5nZXMuCiAqCiAqIENoYW5nZSBldmVudCBpcyBidWJibGVkIOKAkyBpdCBpcyBmaXJlZCBvbiBhbGwgYW5jZXN0b3JzLgogKgogKiBAZXZlbnQgY2hhbmdlOnRleHQKICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlfSBjaGFuZ2VkTm9kZQogKi8KCi8qKgogKiBAZXZlbnQgY2hhbmdlCiAqLwoKbWl4KE5vZGUsIEVtaXR0ZXJNaXhpbik7"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/node.js"],"names":["CKEditorError","EmitterMixin","mix","compareArrays","clone","Node","constructor","parent","index","pos","getChildIndex","nextSibling","getChild","previousSibling","root","document","getPath","path","node","unshift","getAncestors","options","includeSelf","parentFirst","ancestors","getCommonAncestor","ancestorsA","ancestorsB","i","isBefore","thisPath","nodePath","result","isAfter","_remove","_removeChildren","_fireChange","type","fire","toJSON","json","is"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/node\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { clone } from 'lodash-es';\n\n// To check if component is loaded more than once.\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Abstract tree view node class.\n *\n * This is an abstract class. Its constructor should not be used directly.\n * Use the {@link module:engine/view/element~Element} class to create view elements\n * or {@link module:engine/view/text~Text} class to create view text nodes.\n *\n * @abstract\n */\nexport default class Node {\n\t/**\n\t * Creates a tree view node.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Parent element. Null by default. Set by {@link module:engine/view/element~Element#_insertChild}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t\t */\n\t\tthis.parent = null;\n\t}\n\n\t/**\n\t * Index of the node in the parent element or null if the node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that view tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget index() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// No parent or child doesn't exist in parent's children.\n\t\tif ( ( pos = this.parent.getChildIndex( this ) ) == -1 ) {\n\t\t\t/**\n\t\t\t * The node's parent does not contain this node. It means that the document tree is corrupted.\n\t\t\t *\n\t\t\t * @error view-node-not-found-in-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-node-not-found-in-parent: The node\\'s parent does not contain this node.', this );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Node's next sibling, or `null` if it is the last child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nextSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\n\t}\n\n\t/**\n\t * Node's previous sibling, or `null` if it is the first child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget previousSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\n\t}\n\n\t/**\n\t * Top-most ancestor of the node. If the node has no parent it is the root itself.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\tlet root = this; // eslint-disable-line consistent-this\n\n\t\twhile ( root.parent ) {\n\t\t\troot = root.parent;\n\t\t}\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/document~Document View document} that owns this node, or `null` if the node is inside\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/document~Document|null}\n\t */\n\tget document() {\n\t\t// Parent might be Node, null or DocumentFragment.\n\t\tif ( this.parent instanceof Node ) {\n\t\t\treturn this.parent.document;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Gets a path to the node. The path is an array containing indices of consecutive ancestors of this node,\n\t * beginning from {@link module:engine/view/node~Node#root root}, down to this node's index.\n\t *\n\t *\t\tconst abc = downcastWriter.createText( 'abc' );\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst h1 = downcastWriter.createElement( 'h1', null, downcastWriter.createText( 'header' ) );\n\t *\t\tconst p = downcastWriter.createElement( 'p', null, [ abc, foo ] );\n\t *\t\tconst div = downcastWriter.createElement( 'div', null, [ h1, p ] );\n\t *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n\t *\t\th1.getPath(); // Returns [ 0 ].\n\t *\t\tdiv.getPath(); // Returns [].\n\t *\n\t * @returns {Array.<Number>} The path.\n\t */\n\tgetPath() {\n\t\tconst path = [];\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\twhile ( node.parent ) {\n\t\t\tpath.unshift( node.index );\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this node.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/element~Element} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both nodes.\n\t *\n\t * @param {module:engine/view/node~Node} node The second node.\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( node, options = {} ) {\n\t\tconst ancestorsA = this.getAncestors( options );\n\t\tconst ancestorsB = node.getAncestors( options );\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/view/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisBefore( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisPath = this.getPath();\n\t\tconst nodePath = node.getPath();\n\n\t\tconst result = compareArrays( thisPath, nodePath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn true;\n\n\t\t\tcase 'extension':\n\t\t\t\treturn false;\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < nodePath[ result ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/view/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisAfter( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// In other cases, just check if the `node` is before, and return the opposite.\n\t\treturn !this.isBefore( node );\n\t}\n\n\t/**\n\t * Removes node from parent.\n\t *\n\t * @protected\n\t */\n\t_remove() {\n\t\tthis.parent._removeChildren( this.index );\n\t}\n\n\t/**\n\t * @protected\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Changed node.\n\t * @fires change\n\t */\n\t_fireChange( type, node ) {\n\t\tthis.fire( 'change:' + type, node );\n\n\t\tif ( this.parent ) {\n\t\t\tthis.parent._fireChange( type, node );\n\t\t}\n\t}\n\n\t/**\n\t * Custom toJSON method to solve child-parent circular dependencies.\n\t *\n\t * @returns {Object} Clone of this object with the parent property removed.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this );\n\n\t\t// Due to circular references we need to remove parent reference.\n\t\tdelete json.parent;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t * This method is useful when processing view objects that are of unknown type. For example, a function\n\t * may return a {@link module:engine/view/documentfragment~DocumentFragment} or a {@link module:engine/view/node~Node}\n\t * that can be either a text node or an element. This method can be used to check what kind of object is returned.\n\t *\n\t *\t\tsomeObject.is( 'element' ); // -> true if this is an element\n\t *\t\tsomeObject.is( 'node' ); // -> true if this is a node (a text node or an element)\n\t *\t\tsomeObject.is( 'documentFragment' ); // -> true if this is a document fragment\n\t *\n\t * Since this method is also available on a range of model objects, you can prefix the type of the object with\n\t * `model:` or `view:` to check, for example, if this is the model's or view's element:\n\t *\n\t *\t\tviewElement.is( 'view:element' ); // -> true\n\t *\t\tviewElement.is( 'model:element' ); // -> false\n\t *\n\t * By using this method it is also possible to check a name of an element:\n\t *\n\t *\t\timgElement.is( 'img' ); // -> true\n\t *\t\timgElement.is( 'element', 'img' ); // -> same as above\n\t *\t\timgElement.is( 'view:element', 'img' ); // -> same as above, but more precise\n\t *\n\t * The list of view objects which implement the `is()` method:\n\t *\n\t * * {@link module:engine/view/attributeelement~AttributeElement#is `AttributeElement#is()`}\n\t * * {@link module:engine/view/containerelement~ContainerElement#is `ContainerElement#is()`}\n\t * * {@link module:engine/view/documentfragment~DocumentFragment#is `DocumentFragment#is()`}\n\t * * {@link module:engine/view/documentselection~DocumentSelection#is `DocumentSelection#is()`}\n\t * * {@link module:engine/view/editableelement~EditableElement#is `EditableElement#is()`}\n\t * * {@link module:engine/view/element~Element#is `Element#is()`}\n\t * * {@link module:engine/view/emptyelement~EmptyElement#is `EmptyElement#is()`}\n\t * * {@link module:engine/view/node~Node#is `Node#is()`}\n\t * * {@link module:engine/view/position~Position#is `Position#is()`}\n\t * * {@link module:engine/view/range~Range#is `Range#is()`}\n\t * * {@link module:engine/view/rooteditableelement~RootEditableElement#is `RootEditableElement#is()`}\n\t * * {@link module:engine/view/selection~Selection#is `Selection#is()`}\n\t * * {@link module:engine/view/text~Text#is `Text#is()`}\n\t * * {@link module:engine/view/textproxy~TextProxy#is `TextProxy#is()`}\n\t * * {@link module:engine/view/uielement~UIElement#is `UIElement#is()`}\n\t *\n\t * @method #is\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'node' || type == 'view:node';\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @method #_clone\n\t * @returns {module:engine/view/node~Node} Clone of this node.\n\t */\n\n\t/**\n\t * Checks if provided node is similar to this node.\n\t *\n\t * @method #isSimilar\n\t * @returns {Boolean} True if nodes are similar.\n\t */\n}\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} children changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:children\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} attributes changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:attributes\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when {@link module:engine/view/text~Text text nodes} data changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:text\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * @event change\n */\n\nmix( Node, EmitterMixin );\n"]}]}