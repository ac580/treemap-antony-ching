{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-list/src/indentcommand.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-list/src/indentcommand.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGxpc3QvaW5kZW50Y29tbWFuZAogKi8KaW1wb3J0IENvbW1hbmQgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS1jb3JlL3NyYy9jb21tYW5kJzsKaW1wb3J0IGZpcnN0IGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL2ZpcnN0JzsKLyoqCiAqIFRoZSBsaXN0IGluZGVudCBjb21tYW5kLiBJdCBpcyB1c2VkIGJ5IHRoZSB7QGxpbmsgbW9kdWxlOmxpc3QvbGlzdH5MaXN0IGxpc3QgZmVhdHVyZX0uCiAqCiAqIEBleHRlbmRzIG1vZHVsZTpjb3JlL2NvbW1hbmR+Q29tbWFuZAogKi8KCmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluZGVudENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHsKICAvKioKICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSBjb21tYW5kLgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yfkVkaXRvcn0gZWRpdG9yIFRoZSBlZGl0b3IgaW5zdGFuY2UuCiAgICogQHBhcmFtIHsnZm9yd2FyZCd8J2JhY2t3YXJkJ30gaW5kZW50RGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gb2YgaW5kZW50LiBJZiBpdCBpcyBlcXVhbCB0byBgYmFja3dhcmRgLCB0aGUgY29tbWFuZAogICAqIHdpbGwgb3V0ZGVudCBhIGxpc3QgaXRlbS4KICAgKi8KICBjb25zdHJ1Y3RvcihlZGl0b3IsIGluZGVudERpcmVjdGlvbikgewogICAgc3VwZXIoZWRpdG9yKTsKICAgIC8qKgogICAgICogRGV0ZXJtaW5lcyBieSBob3cgbXVjaCB0aGUgY29tbWFuZCB3aWxsIGNoYW5nZSB0aGUgbGlzdCBpdGVtJ3MgaW5kZW50IGF0dHJpYnV0ZS4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEBwcml2YXRlCiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9CiAgICAgKi8KCiAgICB0aGlzLl9pbmRlbnRCeSA9IGluZGVudERpcmVjdGlvbiA9PSAnZm9yd2FyZCcgPyAxIDogLTE7CiAgfQogIC8qKgogICAqIEBpbmhlcml0RG9jCiAgICovCgoKICByZWZyZXNoKCkgewogICAgdGhpcy5pc0VuYWJsZWQgPSB0aGlzLl9jaGVja0VuYWJsZWQoKTsKICB9CiAgLyoqCiAgICogSW5kZW50cyBvciBvdXRkZW50cyAoZGVwZW5kaW5nIG9uIHRoZSB7QGxpbmsgI2NvbnN0cnVjdG9yfSdzIGBpbmRlbnREaXJlY3Rpb25gIHBhcmFtZXRlcikgc2VsZWN0ZWQgbGlzdCBpdGVtcy4KICAgKgogICAqIEBmaXJlcyBleGVjdXRlCiAgICovCgoKICBleGVjdXRlKCkgewogICAgY29uc3QgbW9kZWwgPSB0aGlzLmVkaXRvci5tb2RlbDsKICAgIGNvbnN0IGRvYyA9IG1vZGVsLmRvY3VtZW50OwogICAgbGV0IGl0ZW1zVG9DaGFuZ2UgPSBBcnJheS5mcm9tKGRvYy5zZWxlY3Rpb24uZ2V0U2VsZWN0ZWRCbG9ja3MoKSk7CiAgICBtb2RlbC5jaGFuZ2Uod3JpdGVyID0+IHsKICAgICAgY29uc3QgbGFzdEl0ZW0gPSBpdGVtc1RvQ2hhbmdlW2l0ZW1zVG9DaGFuZ2UubGVuZ3RoIC0gMV07IC8vIEluZGVudGluZyBhIGxpc3QgaXRlbSBzaG91bGQgYWxzbyBpbmRlbnQgYWxsIHRoZSBpdGVtcyB0aGF0IGFyZSBhbHJlYWR5IHN1Yi1pdGVtcyBvZiBpbmRlbnRlZCBpdGVtLgoKICAgICAgbGV0IG5leHQgPSBsYXN0SXRlbS5uZXh0U2libGluZzsgLy8gQ2hlY2sgYWxsIGl0ZW1zIGFmdGVyIGxhc3QgaW5kZW50ZWQgaXRlbSwgYXMgbG9uZyBhcyB0aGVpciBpbmRlbnQgaXMgYmlnZ2VyIHRoYW4gaW5kZW50IG9mIHRoYXQgaXRlbS4KCiAgICAgIHdoaWxlIChuZXh0ICYmIG5leHQubmFtZSA9PSAnbGlzdEl0ZW0nICYmIG5leHQuZ2V0QXR0cmlidXRlKCdsaXN0SW5kZW50JykgPiBsYXN0SXRlbS5nZXRBdHRyaWJ1dGUoJ2xpc3RJbmRlbnQnKSkgewogICAgICAgIGl0ZW1zVG9DaGFuZ2UucHVzaChuZXh0KTsKICAgICAgICBuZXh0ID0gbmV4dC5uZXh0U2libGluZzsKICAgICAgfSAvLyBXZSBuZWVkIHRvIGJlIHN1cmUgdG8ga2VlcCBtb2RlbCBpbiBjb3JyZWN0IHN0YXRlIGFmdGVyIGVhY2ggc21hbGwgY2hhbmdlLCBiZWNhdXNlIGNvbnZlcnRlcnMKICAgICAgLy8gYmFzZXMgb24gdGhhdCBzdGF0ZSBhbmQgYXNzdW1lcyB0aGF0IG1vZGVsIGlzIGNvcnJlY3QuCiAgICAgIC8vIEJlY2F1c2Ugb2YgdGhhdCwgaWYgdGhlIGNvbW1hbmQgb3V0ZGVudHMgaXRlbXMsIHdlIHdpbGwgb3V0ZGVudCB0aGVtIHN0YXJ0aW5nIGZyb20gdGhlIGxhc3QgaXRlbSwgYXMKICAgICAgLy8gaXQgaXMgc2FmZXIuCgoKICAgICAgaWYgKHRoaXMuX2luZGVudEJ5IDwgMCkgewogICAgICAgIGl0ZW1zVG9DaGFuZ2UgPSBpdGVtc1RvQ2hhbmdlLnJldmVyc2UoKTsKICAgICAgfQoKICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zVG9DaGFuZ2UpIHsKICAgICAgICBjb25zdCBpbmRlbnQgPSBpdGVtLmdldEF0dHJpYnV0ZSgnbGlzdEluZGVudCcpICsgdGhpcy5faW5kZW50Qnk7IC8vIElmIGluZGVudCBpcyBsb3dlciB0aGFuIDAsIGl0IG1lYW5zIHRoYXQgdGhlIGl0ZW0gZ290IG91dGRlbnRlZCB3aGVuIGl0IHdhcyBub3QgaW5kZW50ZWQuCiAgICAgICAgLy8gVGhpcyBtZWFucyB0aGF0IHdlIG5lZWQgdG8gY29udmVydCB0aGF0IGxpc3QgaXRlbSB0byBwYXJhZ3JhcGguCgoKICAgICAgICBpZiAoaW5kZW50IDwgMCkgewogICAgICAgICAgLy8gVG8ga2VlcCB0aGUgbW9kZWwgYXMgY29ycmVjdCBhcyBwb3NzaWJsZSwgZmlyc3QgcmVuYW1lIGxpc3RJdGVtLCB0aGVuIHJlbW92ZSBhdHRyaWJ1dGVzLAogICAgICAgICAgLy8gYXMgbGlzdEl0ZW0gd2l0aG91dCBhdHRyaWJ1dGVzIGlzIHZlcnkgaW5jb3JyZWN0IGFuZCB3aWxsIGNhdXNlIHByb2JsZW1zIGluIGNvbnZlcnRlcnMuCiAgICAgICAgICAvLyBObyBuZWVkIHRvIHJlbW92ZSBhdHRyaWJ1dGVzLCB3aWxsIGJlIHJlbW92ZWQgYnkgcG9zdCBmaXhlci4KICAgICAgICAgIHdyaXRlci5yZW5hbWUoaXRlbSwgJ3BhcmFncmFwaCcpOwogICAgICAgIH0gLy8gSWYgaW5kZW50IGlzID49IDAsIGNoYW5nZSB0aGUgYXR0cmlidXRlIHZhbHVlLgogICAgICAgIGVsc2UgewogICAgICAgICAgICB3cml0ZXIuc2V0QXR0cmlidXRlKCdsaXN0SW5kZW50JywgaW5kZW50LCBpdGVtKTsKICAgICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfQogIC8qKgogICAqIENoZWNrcyB3aGV0aGVyIHRoZSBjb21tYW5kIGNhbiBiZSBlbmFibGVkIGluIHRoZSBjdXJyZW50IGNvbnRleHQuCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIHRoZSBjb21tYW5kIHNob3VsZCBiZSBlbmFibGVkLgogICAqLwoKCiAgX2NoZWNrRW5hYmxlZCgpIHsKICAgIC8vIENoZWNrIHdoZXRoZXIgYW55IG9mIHBvc2l0aW9uJ3MgYW5jZXN0b3IgaXMgYSBsaXN0IGl0ZW0uCiAgICBjb25zdCBsaXN0SXRlbSA9IGZpcnN0KHRoaXMuZWRpdG9yLm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbi5nZXRTZWxlY3RlZEJsb2NrcygpKTsgLy8gSWYgc2VsZWN0aW9uIGlzIG5vdCBpbiBhIGxpc3QgaXRlbSwgdGhlIGNvbW1hbmQgaXMgZGlzYWJsZWQuCgogICAgaWYgKCFsaXN0SXRlbSB8fCAhbGlzdEl0ZW0uaXMoJ2xpc3RJdGVtJykpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGlmICh0aGlzLl9pbmRlbnRCeSA+IDApIHsKICAgICAgLy8gQ2Fubm90IGluZGVudCBmaXJzdCBpdGVtIGluIGl0J3MgbGlzdC4gQ2hlY2sgaWYgYmVmb3JlIGBsaXN0SXRlbWAgaXMgYSBsaXN0IGl0ZW0gdGhhdCBpcyBpbiBzYW1lIGxpc3QuCiAgICAgIC8vIFRvIGJlIGluIHRoZSBzYW1lIGxpc3QsIHRoZSBpdGVtIGhhcyB0byBoYXZlIHNhbWUgYXR0cmlidXRlcyBhbmQgY2Fubm90IGJlICJzcGxpdCIgYnkgYW4gaXRlbSB3aXRoIGxvd2VyIGluZGVudC4KICAgICAgY29uc3QgaW5kZW50ID0gbGlzdEl0ZW0uZ2V0QXR0cmlidXRlKCdsaXN0SW5kZW50Jyk7CiAgICAgIGNvbnN0IHR5cGUgPSBsaXN0SXRlbS5nZXRBdHRyaWJ1dGUoJ2xpc3RUeXBlJyk7CiAgICAgIGxldCBwcmV2ID0gbGlzdEl0ZW0ucHJldmlvdXNTaWJsaW5nOwoKICAgICAgd2hpbGUgKHByZXYgJiYgcHJldi5pcygnbGlzdEl0ZW0nKSAmJiBwcmV2LmdldEF0dHJpYnV0ZSgnbGlzdEluZGVudCcpID49IGluZGVudCkgewogICAgICAgIGlmIChwcmV2LmdldEF0dHJpYnV0ZSgnbGlzdEluZGVudCcpID09IGluZGVudCkgewogICAgICAgICAgLy8gVGhlIGl0ZW0gaXMgb24gdGhlIHNhbWUgbGV2ZWwuCiAgICAgICAgICAvLyBJZiBpdCBoYXMgc2FtZSB0eXBlLCBpdCBtZWFucyB0aGF0IHdlIGZvdW5kIGEgcHJlY2VkaW5nIHNpYmxpbmcgZnJvbSB0aGUgc2FtZSBsaXN0LgogICAgICAgICAgLy8gSWYgaXQgZG9lcyBub3QgaGF2ZSBzYW1lIHR5cGUsIGl0IG1lYW5zIHRoYXQgYGxpc3RJdGVtYCBpcyBvbiBkaWZmZXJlbnQgbGlzdCAodGhpcyBjYW4gaGFwcGVuIG9ubHkKICAgICAgICAgIC8vIG9uIHRvcCBsZXZlbCBsaXN0cywgdGhvdWdoKS4KICAgICAgICAgIHJldHVybiBwcmV2LmdldEF0dHJpYnV0ZSgnbGlzdFR5cGUnKSA9PSB0eXBlOwogICAgICAgIH0KCiAgICAgICAgcHJldiA9IHByZXYucHJldmlvdXNTaWJsaW5nOwogICAgICB9IC8vIENvdWxkIG5vdCBmaW5kIHNpbWlsYXIgbGlzdCBpdGVtLCB0aGlzIG1lYW5zIHRoYXQgYGxpc3RJdGVtYCBpcyBmaXJzdCBpbiBpdHMgbGlzdC4KCgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9IC8vIElmIHdlIGFyZSBvdXRkZW50aW5nIGl0IGlzIGVub3VnaCB0byBiZSBpbiBsaXN0IGl0ZW0uIEV2ZXJ5IGxpc3QgaXRlbSBjYW4gYWx3YXlzIGJlIG91dGRlbnRlZC4KCgogICAgcmV0dXJuIHRydWU7CiAgfQoKfQ=="},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-list/src/indentcommand.js"],"names":["Command","first","IndentCommand","constructor","editor","indentDirection","_indentBy","refresh","isEnabled","_checkEnabled","execute","model","doc","document","itemsToChange","Array","from","selection","getSelectedBlocks","change","writer","lastItem","length","next","nextSibling","name","getAttribute","push","reverse","item","indent","rename","setAttribute","listItem","is","type","prev","previousSibling"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/indentcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The list indent command. It is used by the {@link module:list/list~List list feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class IndentCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {'forward'|'backward'} indentDirection The direction of indent. If it is equal to `backward`, the command\n\t * will outdent a list item.\n\t */\n\tconstructor( editor, indentDirection ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Determines by how much the command will change the list item's indent attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {Number}\n\t\t */\n\t\tthis._indentBy = indentDirection == 'forward' ? 1 : -1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tlet itemsToChange = Array.from( doc.selection.getSelectedBlocks() );\n\n\t\tmodel.change( writer => {\n\t\t\tconst lastItem = itemsToChange[ itemsToChange.length - 1 ];\n\n\t\t\t// Indenting a list item should also indent all the items that are already sub-items of indented item.\n\t\t\tlet next = lastItem.nextSibling;\n\n\t\t\t// Check all items after last indented item, as long as their indent is bigger than indent of that item.\n\t\t\twhile ( next && next.name == 'listItem' && next.getAttribute( 'listIndent' ) > lastItem.getAttribute( 'listIndent' ) ) {\n\t\t\t\titemsToChange.push( next );\n\n\t\t\t\tnext = next.nextSibling;\n\t\t\t}\n\n\t\t\t// We need to be sure to keep model in correct state after each small change, because converters\n\t\t\t// bases on that state and assumes that model is correct.\n\t\t\t// Because of that, if the command outdents items, we will outdent them starting from the last item, as\n\t\t\t// it is safer.\n\t\t\tif ( this._indentBy < 0 ) {\n\t\t\t\titemsToChange = itemsToChange.reverse();\n\t\t\t}\n\n\t\t\tfor ( const item of itemsToChange ) {\n\t\t\t\tconst indent = item.getAttribute( 'listIndent' ) + this._indentBy;\n\n\t\t\t\t// If indent is lower than 0, it means that the item got outdented when it was not indented.\n\t\t\t\t// This means that we need to convert that list item to paragraph.\n\t\t\t\tif ( indent < 0 ) {\n\t\t\t\t\t// To keep the model as correct as possible, first rename listItem, then remove attributes,\n\t\t\t\t\t// as listItem without attributes is very incorrect and will cause problems in converters.\n\t\t\t\t\t// No need to remove attributes, will be removed by post fixer.\n\t\t\t\t\twriter.rename( item, 'paragraph' );\n\t\t\t\t}\n\t\t\t\t// If indent is >= 0, change the attribute value.\n\t\t\t\telse {\n\t\t\t\t\twriter.setAttribute( 'listIndent', indent, item );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\t// Check whether any of position's ancestor is a list item.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\t// If selection is not in a list item, the command is disabled.\n\t\tif ( !listItem || !listItem.is( 'listItem' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this._indentBy > 0 ) {\n\t\t\t// Cannot indent first item in it's list. Check if before `listItem` is a list item that is in same list.\n\t\t\t// To be in the same list, the item has to have same attributes and cannot be \"split\" by an item with lower indent.\n\t\t\tconst indent = listItem.getAttribute( 'listIndent' );\n\t\t\tconst type = listItem.getAttribute( 'listType' );\n\n\t\t\tlet prev = listItem.previousSibling;\n\n\t\t\twhile ( prev && prev.is( 'listItem' ) && prev.getAttribute( 'listIndent' ) >= indent ) {\n\t\t\t\tif ( prev.getAttribute( 'listIndent' ) == indent ) {\n\t\t\t\t\t// The item is on the same level.\n\t\t\t\t\t// If it has same type, it means that we found a preceding sibling from the same list.\n\t\t\t\t\t// If it does not have same type, it means that `listItem` is on different list (this can happen only\n\t\t\t\t\t// on top level lists, though).\n\t\t\t\t\treturn prev.getAttribute( 'listType' ) == type;\n\t\t\t\t}\n\n\t\t\t\tprev = prev.previousSibling;\n\t\t\t}\n\n\t\t\t// Could not find similar list item, this means that `listItem` is first in its list.\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n\t\treturn true;\n\t}\n}\n"]}]}