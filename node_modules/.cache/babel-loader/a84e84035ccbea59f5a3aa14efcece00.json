{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js"],"names":["Operation","MergeOperation","Position","Range","_insert","_move","CKEditorError","SplitOperation","constructor","splitPosition","howMany","graveyardPosition","baseVersion","clone","stickiness","insertionPosition","getInsertionPosition","type","moveTargetPosition","path","slice","push","root","movedRange","end","getShiftedBy","Number","POSITIVE_INFINITY","split","getReversed","graveyard","document","_validate","element","parent","offset","maxOffset","nodeAfter","_execute","splitElement","_createFromPositionAndShift","newElement","_clone","sourceRange","_createAt","toJSON","json","className","length","fromJSON"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/splitoperation\n */\n\nimport Operation from './operation';\nimport MergeOperation from './mergeoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _insert, _move } from './utils';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to split {@link module:engine/model/element~Element an element} at given\n * {@link module:engine/model/operation/splitoperation~SplitOperation#splitPosition split position} into two elements,\n * both containing a part of the element's original content.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class SplitOperation extends Operation {\n\t/**\n\t * Creates a split operation.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition Position at which an element should be split.\n\t * @param {Number} howMany Total offset size of elements that are in the split element after `position`.\n\t * @param {module:engine/model/position~Position|null} graveyardPosition Position in the graveyard root before the element which\n\t * should be used as a parent of the nodes after `position`. If it is not set, a copy of the the `position` parent will be used.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( splitPosition, howMany, graveyardPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position at which an element should be split.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#splitPosition\n\t\t */\n\t\tthis.splitPosition = splitPosition.clone();\n\t\t// Keep position sticking to the next node. This way any new content added at the place where the element is split\n\t\t// will be left in the original element.\n\t\tthis.splitPosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Total offset size of elements that are in the split element after `position`.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/splitoperation~SplitOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position at which the clone of split element (or element from graveyard) will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#insertionPosition\n\t\t */\n\t\tthis.insertionPosition = SplitOperation.getInsertionPosition( splitPosition );\n\t\tthis.insertionPosition.stickiness = 'toNone';\n\n\t\t/**\n\t\t * Position in the graveyard root before the element which should be used as a parent of the nodes after `position`.\n\t\t * If it is not set, a copy of the the `position` parent will be used.\n\t\t *\n\t\t * The default behavior is to clone the split element. Element from graveyard is used during undo.\n\t\t *\n\t\t * @member {module:engine/model/position~Position|null} #graveyardPosition\n\t\t */\n\t\tthis.graveyardPosition = graveyardPosition ? graveyardPosition.clone() : null;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tthis.graveyardPosition.stickiness = 'toNext';\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'split';\n\t}\n\n\t/**\n\t * Position inside the new clone of a split element.\n\t *\n\t * This is a position where nodes that are after the split position will be moved to.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget moveTargetPosition() {\n\t\tconst path = this.insertionPosition.path.slice();\n\t\tpath.push( 0 );\n\n\t\treturn new Position( this.insertionPosition.root, path );\n\t}\n\n\t/**\n\t * Artificial range that contains all the nodes from the split element that will be moved to the new element.\n\t * The range starts at {@link ~#splitPosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range}\n\t */\n\tget movedRange() {\n\t\tconst end = this.splitPosition.getShiftedBy( Number.POSITIVE_INFINITY );\n\n\t\treturn new Range( this.splitPosition, end );\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst split = new this.constructor( this.splitPosition, this.howMany, this.graveyardPosition, this.baseVersion );\n\t\tsplit.insertionPosition = this.insertionPosition;\n\n\t\treturn split;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.splitPosition.root.document.graveyard;\n\t\tconst graveyardPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MergeOperation( this.moveTargetPosition, this.howMany, this.splitPosition, graveyardPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst element = this.splitPosition.parent;\n\t\tconst offset = this.splitPosition.offset;\n\n\t\t// Validate whether split operation has correct parameters.\n\t\tif ( !element || element.maxOffset < offset ) {\n\t\t\t/**\n\t\t\t * Split position is invalid.\n\t\t\t *\n\t\t\t * @error split-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-position-invalid: Split position is invalid.', this );\n\t\t} else if ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Cannot split root element.\n\t\t\t *\n\t\t\t * @error split-operation-split-in-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-split-in-root: Cannot split root element.', this );\n\t\t} else if ( this.howMany != element.maxOffset - this.splitPosition.offset ) {\n\t\t\t/**\n\t\t\t * Split operation specifies wrong number of nodes to move.\n\t\t\t *\n\t\t\t * @error split-operation-how-many-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-how-many-invalid: Split operation specifies wrong number of nodes to move.', this );\n\t\t} else if ( this.graveyardPosition && !this.graveyardPosition.nodeAfter ) {\n\t\t\t/**\n\t\t\t * Graveyard position invalid.\n\t\t\t *\n\t\t\t * @error split-operation-graveyard-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-graveyard-position-invalid: Graveyard position invalid.', this );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst splitElement = this.splitPosition.parent;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\t_move( Range._createFromPositionAndShift( this.graveyardPosition, 1 ), this.insertionPosition );\n\t\t} else {\n\t\t\tconst newElement = splitElement._clone();\n\n\t\t\t_insert( this.insertionPosition, newElement );\n\t\t}\n\n\t\tconst sourceRange = new Range(\n\t\t\tPosition._createAt( splitElement, this.splitPosition.offset ),\n\t\t\tPosition._createAt( splitElement, splitElement.maxOffset )\n\t\t);\n\n\t\t_move( sourceRange, this.moveTargetPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.splitPosition = this.splitPosition.toJSON();\n\t\tjson.insertionPosition = this.insertionPosition.toJSON();\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tjson.graveyardPosition = this.graveyardPosition.toJSON();\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'SplitOperation';\n\t}\n\n\t/**\n\t * Helper function that returns a default insertion position basing on given `splitPosition`. The default insertion\n\t * position is after the split element.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic getInsertionPosition( splitPosition ) {\n\t\tconst path = splitPosition.path.slice( 0, -1 );\n\t\tpath[ path.length - 1 ]++;\n\n\t\treturn new Position( splitPosition.root, path );\n\t}\n\n\t/**\n\t * Creates `SplitOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst splitPosition = Position.fromJSON( json.splitPosition, document );\n\t\tconst insertionPosition = Position.fromJSON( json.insertionPosition, document );\n\t\tconst graveyardPosition = json.graveyardPosition ? Position.fromJSON( json.graveyardPosition, document ) : null;\n\n\t\tconst split = new this( splitPosition, json.howMany, graveyardPosition, json.baseVersion );\n\t\tsplit.insertionPosition = insertionPosition;\n\n\t\treturn split;\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `SplitOperation( ${ this.baseVersion } ): ${ this.splitPosition } ` +\n\t// @if CK_DEBUG_ENGINE //\t\t`( ${ this.howMany } ) -> ${ this.insertionPosition }` +\n\t// @if CK_DEBUG_ENGINE //\t\t`${ this.graveyardPosition ? ' with ' + this.graveyardPosition : '' }`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}