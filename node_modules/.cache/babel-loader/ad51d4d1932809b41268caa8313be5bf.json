{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/text.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/text.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS92aWV3L3RleHQKICovCmltcG9ydCBOb2RlIGZyb20gJy4vbm9kZSc7Ci8qKgogKiBUcmVlIHZpZXcgdGV4dCBub2RlLgogKgogKiBUaGUgY29uc3RydWN0b3Igb2YgdGhpcyBjbGFzcyBzaG91bGRuJ3QgYmUgdXNlZCBkaXJlY3RseS4gVG8gY3JlYXRlIG5ldyBUZXh0IGluc3RhbmNlcwogKiB1c2UgdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG93bmNhc3R3cml0ZXJ+RG93bmNhc3RXcml0ZXIjY3JlYXRlVGV4dCBgRG93bmNhc3RXcml0ZXIjY3JlYXRlVGV4dCgpYH0KICogbWV0aG9kIHdoZW4gd29ya2luZyBvbiBkYXRhIGRvd25jYXN0ZWQgZnJvbSB0aGUgbW9kZWwgb3IgdGhlCiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvdXBjYXN0d3JpdGVyflVwY2FzdFdyaXRlciNjcmVhdGVUZXh0IGBVcGNhc3RXcml0ZXIjY3JlYXRlVGV4dCgpYH0KICogbWV0aG9kIHdoZW4gd29ya2luZyBvbiBub24tc2VtYW50aWMgdmlld3MuCiAqCiAqIEBleHRlbmRzIG1vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGUKICovCgpleHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0IGV4dGVuZHMgTm9kZSB7CiAgLyoqCiAgICogQ3JlYXRlcyBhIHRyZWUgdmlldyB0ZXh0IG5vZGUuCiAgICoKICAgKiBAcHJvdGVjdGVkCiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgVGhlIHRleHQncyBkYXRhLgogICAqLwogIGNvbnN0cnVjdG9yKGRhdGEpIHsKICAgIHN1cGVyKCk7CiAgICAvKioKICAgICAqIFRoZSB0ZXh0IGNvbnRlbnQuCiAgICAgKgogICAgICogU2V0dGluZyB0aGUgZGF0YSBmaXJlcyB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGUjZXZlbnQ6Y2hhbmdlOnRleHQgY2hhbmdlIGV2ZW50fS4KICAgICAqCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG1vZHVsZTplbmdpbmUvdmlldy90ZXh0flRleHQjX3RleHREYXRhCiAgICAgKi8KCiAgICB0aGlzLl90ZXh0RGF0YSA9IGRhdGE7CiAgfQogIC8qKgogICAqIENoZWNrcyB3aGV0aGVyIHRoaXMgb2JqZWN0IGlzIG9mIHRoZSBnaXZlbiB0eXBlLgogICAqCiAgICoJCXRleHQuaXMoICd0ZXh0JyApOyAvLyAtPiB0cnVlCiAgICoJCXRleHQuaXMoICdub2RlJyApOyAvLyAtPiB0cnVlCiAgICoJCXRleHQuaXMoICd2aWV3OnRleHQnICk7IC8vIC0+IHRydWUKICAgKgkJdGV4dC5pcyggJ3ZpZXc6bm9kZScgKTsgLy8gLT4gdHJ1ZQogICAqCiAgICoJCXRleHQuaXMoICdtb2RlbDp0ZXh0JyApOyAvLyAtPiBmYWxzZQogICAqCQl0ZXh0LmlzKCAnZWxlbWVudCcgKTsgLy8gLT4gZmFsc2UKICAgKgkJdGV4dC5pcyggJ3JhbmdlJyApOyAvLyAtPiBmYWxzZQogICAqCiAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9ub2Rlfk5vZGUjaXMgQ2hlY2sgdGhlIGVudGlyZSBsaXN0IG9mIHZpZXcgb2JqZWN0c30gd2hpY2ggaW1wbGVtZW50IHRoZSBgaXMoKWAgbWV0aG9kLgogICAqCiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUKICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0KICAgKi8KCgogIGlzKHR5cGUpIHsKICAgIHJldHVybiB0eXBlID09ICd0ZXh0JyB8fCB0eXBlID09ICd2aWV3OnRleHQnIHx8IHN1cGVyLmlzKHR5cGUpOwogIH0KICAvKioKICAgKiBUaGUgdGV4dCBjb250ZW50LgogICAqCiAgICogQHJlYWRvbmx5CiAgICogQHR5cGUge1N0cmluZ30KICAgKi8KCgogIGdldCBkYXRhKCkgewogICAgcmV0dXJuIHRoaXMuX3RleHREYXRhOwogIH0KICAvKioKICAgKiBUaGlzIGdldHRlciBpcyByZXF1aXJlZCB3aGVuIHVzaW5nIHRoZSBhZGRpdGlvbiBhc3NpZ25tZW50IG9wZXJhdG9yIG9uIHByb3RlY3RlZCBwcm9wZXJ0eToKICAgKgogICAqCQljb25zdCBmb28gPSBkb3duY2FzdFdyaXRlci5jcmVhdGVUZXh0KCAnZm9vJyApOwogICAqCQljb25zdCBiYXIgPSBkb3duY2FzdFdyaXRlci5jcmVhdGVUZXh0KCAnYmFyJyApOwogICAqCiAgICoJCWZvby5fZGF0YSArPSBiYXIuZGF0YTsgICAvLyBleGVjdXRlczogYGZvby5fZGF0YSA9IGZvby5fZGF0YSArIGJhci5kYXRhYAogICAqCQljb25zb2xlLmxvZyggZm9vLmRhdGEgKTsgLy8gcHJpbnRzOiAnZm9vYmFyJwogICAqCiAgICogSWYgdGhlIHByb3RlY3RlZCBnZXR0ZXIgZGlkbid0IGV4aXN0LCBgZm9vLl9kYXRhYCB3aWxsIHJldHVybiBgdW5kZWZpbmVkYCBhbmQgcmVzdWx0IG9mIHRoZSBtZXJnZSB3aWxsIGJlIGludmFsaWQuCiAgICoKICAgKiBAcHJvdGVjdGVkCiAgICogQHR5cGUge1N0cmluZ30KICAgKi8KCgogIGdldCBfZGF0YSgpIHsKICAgIHJldHVybiB0aGlzLmRhdGE7CiAgfQogIC8qKgogICAqIFNldHMgZGF0YSBhbmQgZmlyZXMgdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvbm9kZX5Ob2RlI2V2ZW50OmNoYW5nZTp0ZXh0IGNoYW5nZSBldmVudH0uCiAgICoKICAgKiBAcHJvdGVjdGVkCiAgICogQGZpcmVzIGNoYW5nZTp0ZXh0CiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgTmV3IGRhdGEgZm9yIHRoZSB0ZXh0IG5vZGUuCiAgICovCgoKICBzZXQgX2RhdGEoZGF0YSkgewogICAgdGhpcy5fZmlyZUNoYW5nZSgndGV4dCcsIHRoaXMpOwoKICAgIHRoaXMuX3RleHREYXRhID0gZGF0YTsKICB9CiAgLyoqCiAgICogQ2hlY2tzIGlmIHRoaXMgdGV4dCBub2RlIGlzIHNpbWlsYXIgdG8gb3RoZXIgdGV4dCBub2RlLgogICAqIEJvdGggbm9kZXMgc2hvdWxkIGhhdmUgdGhlIHNhbWUgZGF0YSB0byBiZSBjb25zaWRlcmVkIGFzIHNpbWlsYXIuCiAgICoKICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy90ZXh0flRleHR9IG90aGVyTm9kZSBOb2RlIHRvIGNoZWNrIGlmIGl0IGlzIHNhbWUgYXMgdGhpcyBub2RlLgogICAqIEByZXR1cm5zIHtCb29sZWFufQogICAqLwoKCiAgaXNTaW1pbGFyKG90aGVyTm9kZSkgewogICAgaWYgKCEob3RoZXJOb2RlIGluc3RhbmNlb2YgVGV4dCkpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHJldHVybiB0aGlzID09PSBvdGhlck5vZGUgfHwgdGhpcy5kYXRhID09PSBvdGhlck5vZGUuZGF0YTsKICB9CiAgLyoqCiAgICogQ2xvbmVzIHRoaXMgbm9kZS4KICAgKgogICAqIEBwcm90ZWN0ZWQKICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS92aWV3L3RleHR+VGV4dH0gVGV4dCBub2RlIHRoYXQgaXMgYSBjbG9uZSBvZiB0aGlzIG5vZGUuCiAgICovCgoKICBfY2xvbmUoKSB7CiAgICByZXR1cm4gbmV3IFRleHQodGhpcy5kYXRhKTsKICB9IC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gdG9TdHJpbmcoKSB7CiAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyAJcmV0dXJuIGAjJHsgdGhpcy5kYXRhIH1gOwogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gfQogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gbG9nKCkgewogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gCWNvbnNvbGUubG9nKCAnVmlld1RleHQ6ICcgKyB0aGlzICk7CiAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyB9CiAgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyBsb2dFeHRlbmRlZCgpIHsKICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIAljb25zb2xlLmxvZyggJ1ZpZXdUZXh0OiAnICsgdGhpcyApOwogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gfQoKCn0="},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"],"names":["Node","Text","constructor","data","_textData","is","type","_data","_fireChange","isSimilar","otherNode","_clone"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,IAAP,MAAiB,QAAjB;AAEA;;;;;;;;;;;;AAWA,eAAe,MAAMC,IAAN,SAAmBD,IAAnB,CAAwB;AACtC;;;;;;AAMAE,EAAAA,WAAW,CAAEC,IAAF,EAAS;AACnB;AAEA;;;;;;;;;AAQA,SAAKC,SAAL,GAAiBD,IAAjB;AACA;AAED;;;;;;;;;;;;;;;;;;;AAiBAE,EAAAA,EAAE,CAAEC,IAAF,EAAS;AACV,WAAOA,IAAI,IAAI,MAAR,IAAkBA,IAAI,IAAI,WAA1B,IAAyC,MAAMD,EAAN,CAAUC,IAAV,CAAhD;AACA;AAED;;;;;;;;AAMA,MAAIH,IAAJ,GAAW;AACV,WAAO,KAAKC,SAAZ;AACA;AAED;;;;;;;;;;;;;;;;AAcA,MAAIG,KAAJ,GAAY;AACX,WAAO,KAAKJ,IAAZ;AACA;AAED;;;;;;;;;AAOA,MAAII,KAAJ,CAAWJ,IAAX,EAAkB;AACjB,SAAKK,WAAL,CAAkB,MAAlB,EAA0B,IAA1B;;AAEA,SAAKJ,SAAL,GAAiBD,IAAjB;AACA;AAED;;;;;;;;;AAOAM,EAAAA,SAAS,CAAEC,SAAF,EAAc;AACtB,QAAK,EAAGA,SAAS,YAAYT,IAAxB,CAAL,EAAsC;AACrC,aAAO,KAAP;AACA;;AAED,WAAO,SAASS,SAAT,IAAsB,KAAKP,IAAL,KAAcO,SAAS,CAACP,IAArD;AACA;AAED;;;;;;;;AAMAQ,EAAAA,MAAM,GAAG;AACR,WAAO,IAAIV,IAAJ,CAAU,KAAKE,IAAf,CAAP;AACA,GA1GqC,CA4GtC;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAtHsC","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/text\n */\n\nimport Node from './node';\n\n/**\n * Tree view text node.\n *\n * The constructor of this class shouldn't be used directly. To create new Text instances\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a tree view text node.\n\t *\n\t * @protected\n\t * @param {String} data The text's data.\n\t */\n\tconstructor( data ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The text content.\n\t\t *\n\t\t * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t\t *\n\t\t * @protected\n\t\t * @member {String} module:engine/view/text~Text#_textData\n\t\t */\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\ttext.is( 'text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'view:text' ); // -> true\n\t *\t\ttext.is( 'view:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'model:text' ); // -> false\n\t *\t\ttext.is( 'element' ); // -> false\n\t *\t\ttext.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'text' || type == 'view:text' || super.is( type );\n\t}\n\n\t/**\n\t * The text content.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._textData;\n\t}\n\n\t/**\n\t * This getter is required when using the addition assignment operator on protected property:\n\t *\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst bar = downcastWriter.createText( 'bar' );\n\t *\n\t *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n\t *\t\tconsole.log( foo.data ); // prints: 'foobar'\n\t *\n\t * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n\t *\n\t * @protected\n\t * @type {String}\n\t */\n\tget _data() {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t *\n\t * @protected\n\t * @fires change:text\n\t * @param {String} data New data for the text node.\n\t */\n\tset _data( data ) {\n\t\tthis._fireChange( 'text', this );\n\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks if this text node is similar to other text node.\n\t * Both nodes should have the same data to be considered as similar.\n\t *\n\t * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherNode ) {\n\t\tif ( !( otherNode instanceof Text ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this === otherNode || this.data === otherNode.data;\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `#${ this.data }`;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // log() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewText: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logExtended() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ViewText: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n}\n"]}]}