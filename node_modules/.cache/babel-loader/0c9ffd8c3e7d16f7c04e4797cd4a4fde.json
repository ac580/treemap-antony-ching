{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/element.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/element.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/element.js"],"names":["Node","Text","TextProxy","objectToMap","isIterable","Matcher","isPlainObject","Element","constructor","name","attrs","children","_attrs","parseAttributes","_children","_insertChild","_classes","Set","has","classString","get","parseClasses","delete","_styles","Map","parseInlineStyles","_customProperties","childCount","length","isEmpty","is","type","cutType","replace","getChild","index","getChildIndex","node","indexOf","getChildren","Symbol","iterator","getAttributeKeys","size","keys","getAttributes","entries","getAttribute","key","join","undefined","styleString","property","value","hasAttribute","isSimilar","otherElement","className","hasClass","getClassNames","getStyle","getStyleNames","hasStyle","findAncestor","patterns","matcher","parent","match","getCustomProperty","getCustomProperties","getIdentity","classes","Array","from","sort","styles","map","i","attributes","_clone","deep","childrenClone","child","push","cloned","getFillerOffset","_appendChild","items","_fireChange","count","nodes","normalize","_remove","splice","_removeChildren","howMany","_setAttribute","String","set","_removeAttribute","clear","_addClass","isArray","forEach","add","_removeClass","_setStyle","Object","_removeStyle","_setCustomProperty","_removeCustomProperty","stylesMap","stylesString","quoteType","propertyNameStart","propertyValueStart","propertyName","charAt","char","substr","propertyValue","trim","classesSet","classesString","classArray","split","data"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/element\n */\n\nimport Node from './node';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport objectToMap from '@ckeditor/ckeditor5-utils/src/objecttomap';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Matcher from './matcher';\nimport { isPlainObject } from 'lodash-es';\n\n// @if CK_DEBUG_ENGINE // const { convertMapToTags } = require( '../dev-utils/utils' );\n\n/**\n * View element.\n *\n * The editing engine does not define a fixed semantics of its elements (it is \"DTD-free\").\n * This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer. When creating an element you should use one of the following methods:\n *\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `downcastWriter#createContainerElement()`}\n * in order to create a {@link module:engine/view/containerelement~ContainerElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `downcastWriter#createAttributeElement()`}\n * in order to create a {@link module:engine/view/attributeelement~AttributeElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`}\n * in order to create a {@link module:engine/view/emptyelement~EmptyElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}\n * in order to create a {@link module:engine/view/uielement~UIElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`}\n * in order to create a {@link module:engine/view/editableelement~EditableElement}.\n *\n * Note that for view elements which are not created from the model, like elements from mutations, paste or\n * {@link module:engine/controller/datacontroller~DataController#set data.set} it is not possible to define the type of the element.\n * In such cases the {@link module:engine/view/upcastwriter~UpcastWriter#createElement `UpcastWriter#createElement()`} method\n * should be used to create generic view elements.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a view element.\n\t *\n\t * Attributes can be passed in various formats:\n\t *\n\t *\t\tnew Element( 'div', { class: 'editor', contentEditable: 'true' } ); // object\n\t *\t\tnew Element( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n\t *\t\tnew Element( 'div', mapOfAttributes ); // map\n\t *\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into created element.\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Name of the element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Map of attributes, where attributes names are keys and attributes values are values.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} #_attrs\n\t\t */\n\t\tthis._attrs = parseAttributes( attrs );\n\n\t\t/**\n\t\t * Array of child nodes.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis._children = [];\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\n\t\t/**\n\t\t * Set of classes associated with element instance.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set}\n\t\t */\n\t\tthis._classes = new Set();\n\n\t\tif ( this._attrs.has( 'class' ) ) {\n\t\t\t// Remove class attribute and handle it by class set.\n\t\t\tconst classString = this._attrs.get( 'class' );\n\t\t\tparseClasses( this._classes, classString );\n\t\t\tthis._attrs.delete( 'class' );\n\t\t}\n\n\t\t/**\n\t\t * Map of styles.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} module:engine/view/element~Element#_styles\n\t\t */\n\t\tthis._styles = new Map();\n\n\t\tif ( this._attrs.has( 'style' ) ) {\n\t\t\t// Remove style attribute and handle it by styles map.\n\t\t\tparseInlineStyles( this._styles, this._attrs.get( 'style' ) );\n\t\t\tthis._attrs.delete( 'style' );\n\t\t}\n\n\t\t/**\n\t\t * Map of custom properties.\n\t\t * Custom properties can be added to element instance, will be cloned but not rendered into DOM.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map}\n\t\t */\n\t\tthis._customProperties = new Map();\n\t}\n\n\t/**\n\t * Number of element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._children.length === 0;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\telement.is( 'element' ); // -> true\n\t *\t\telement.is( 'node' ); // -> true\n\t *\t\telement.is( 'view:element' ); // -> true\n\t *\t\telement.is( 'view:node' ); // -> true\n\t *\n\t *\t\telement.is( 'model:element' ); // -> false\n\t *\t\telement.is( 'documentSelection' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/view/element~Element#name name}:\n\t *\n\t *\t\telement.is( 'img' ); // -> true if this is an <img> element\n\t *\t\telement.is( 'element', 'img' ); // -> same as above\n\t *\t\ttext.is( 'img' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'element' || cutType == this.name || super.is( type );\n\t\t} else {\n\t\t\treturn cutType == 'element' && name == this.name;\n\t\t}\n\t}\n\n\t/**\n\t * Gets child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/view/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children[ index ];\n\t}\n\n\t/**\n\t * Gets index of the given child node. Returns `-1` if child node is not found.\n\t *\n\t * @param {module:engine/view/node~Node} node Child node.\n\t * @returns {Number} Index of the child node.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.indexOf( node );\n\t}\n\n\t/**\n\t * Gets child nodes iterator.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.\n\t *\n\t * @returns {Iterable.<String>} Keys for attributes.\n\t */\n\t* getAttributeKeys() {\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield 'class';\n\t\t}\n\n\t\tif ( this._styles.size > 0 ) {\n\t\t\tyield 'style';\n\t\t}\n\n\t\tyield* this._attrs.keys();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this element's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getAttributes() {\n\t\tyield* this._attrs.entries();\n\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield [ 'class', this.getAttribute( 'class' ) ];\n\t\t}\n\n\t\tif ( this._styles.size > 0 ) {\n\t\t\tyield [ 'style', this.getAttribute( 'style' ) ];\n\t\t}\n\t}\n\n\t/**\n\t * Gets attribute by key. If attribute is not present - returns undefined.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {String|undefined} Attribute value.\n\t */\n\tgetAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\treturn [ ...this._classes ].join( ' ' );\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\tif ( this._styles.size > 0 ) {\n\t\t\t\tlet styleString = '';\n\n\t\t\t\tfor ( const [ property, value ] of this._styles ) {\n\t\t\t\t\tstyleString += `${ property }:${ value };`;\n\t\t\t\t}\n\n\t\t\t\treturn styleString;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns a boolean indicating whether an attribute with the specified key exists in the element.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} `true` if attribute with the specified key exists in the element, false otherwise.\n\t */\n\thasAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\treturn this._classes.size > 0;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\treturn this._styles.size > 0;\n\t\t}\n\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t * Both elements should have the same name and attributes to be considered as similar. Two similar elements\n\t * can contain different set of children nodes.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\tif ( !( otherElement instanceof Element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If exactly the same Element is provided - return true immediately.\n\t\tif ( this === otherElement ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check element name.\n\t\tif ( this.name != otherElement.name ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check number of attributes, classes and styles.\n\t\tif ( this._attrs.size !== otherElement._attrs.size || this._classes.size !== otherElement._classes.size ||\n\t\t\tthis._styles.size !== otherElement._styles.size ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes are the same.\n\t\tfor ( const [ key, value ] of this._attrs ) {\n\t\t\tif ( !otherElement._attrs.has( key ) || otherElement._attrs.get( key ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if classes are the same.\n\t\tfor ( const className of this._classes ) {\n\t\t\tif ( !otherElement._classes.has( className ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles are the same.\n\t\tfor ( const [ property, value ] of this._styles ) {\n\t\t\tif ( !otherElement._styles.has( property ) || otherElement._styles.get( property ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns true if class is present.\n\t * If more then one class is provided - returns true only when all classes are present.\n\t *\n\t *\t\telement.hasClass( 'foo' ); // Returns true if 'foo' class is present.\n\t *\t\telement.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.\n\t *\n\t * @param {...String} className\n\t */\n\thasClass( ...className ) {\n\t\tfor ( const name of className ) {\n\t\t\tif ( !this._classes.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns iterator that contains all class names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetClassNames() {\n\t\treturn this._classes.keys();\n\t}\n\n\t/**\n\t * Returns style value for given property.\n\t * Undefined is returned if style does not exist.\n\t *\n\t * @param {String} property\n\t * @returns {String|undefined}\n\t */\n\tgetStyle( property ) {\n\t\treturn this._styles.get( property );\n\t}\n\n\t/**\n\t * Returns iterator that contains all style names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetStyleNames() {\n\t\treturn this._styles.keys();\n\t}\n\n\t/**\n\t * Returns true if style keys are present.\n\t * If more then one style property is provided - returns true only when all properties are present.\n\t *\n\t *\t\telement.hasStyle( 'color' ); // Returns true if 'border-top' style is present.\n\t *\t\telement.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.\n\t *\n\t * @param {...String} property\n\t */\n\thasStyle( ...property ) {\n\t\tfor ( const name of property ) {\n\t\t\tif ( !this._styles.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns ancestor element that match specified pattern.\n\t * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.\n\t *\n\t * @see module:engine/view/matcher~Matcher\n\t * @param {Object|String|RegExp|Function} patterns Patterns used to match correct ancestor.\n\t * See {@link module:engine/view/matcher~Matcher}.\n\t * @returns {module:engine/view/element~Element|null} Found element or `null` if no matching ancestor was found.\n\t */\n\tfindAncestor( ...patterns ) {\n\t\tconst matcher = new Matcher( ...patterns );\n\t\tlet parent = this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( matcher.match( parent ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the custom property value for the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @returns {*}\n\t */\n\tgetCustomProperty( key ) {\n\t\treturn this._customProperties.get( key );\n\t}\n\n\t/**\n\t * Returns an iterator which iterates over this element's custom properties.\n\t * Iterator provides `[ key, value ]` pairs for each stored property.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getCustomProperties() {\n\t\tyield* this._customProperties.entries();\n\t}\n\n\t/**\n\t * Returns identity string based on element's name, styles, classes and other attributes.\n\t * Two elements that {@link #isSimilar are similar} will have same identity string.\n\t * It has the following format:\n\t *\n\t *\t\t'name class=\"class1,class2\" style=\"style1:value1;style2:value2\" attr1=\"val1\" attr2=\"val2\"'\n \t *\n\t * For example:\n\t *\n\t *\t\tconst element = writer.createContainerElement( 'foo', {\n\t *\t\t\tbanana: '10',\n\t *\t\t\tapple: '20',\n\t *\t\t\tstyle: 'color: red; border-color: white;',\n\t *\t\t\tclass: 'baz'\n\t *\t\t} );\n\t *\n\t *\t\t// returns 'foo class=\"baz\" style=\"border-color:white;color:red\" apple=\"20\" banana=\"10\"'\n\t *\t\telement.getIdentity();\n\t *\n\t * NOTE: Classes, styles and other attributes are sorted alphabetically.\n\t *\n\t * @returns {String}\n\t */\n\tgetIdentity() {\n\t\tconst classes = Array.from( this._classes ).sort().join( ',' );\n\t\tconst styles = Array.from( this._styles ).map( i => `${ i[ 0 ] }:${ i[ 1 ] }` ).sort().join( ';' );\n\t\tconst attributes = Array.from( this._attrs ).map( i => `${ i[ 0 ] }=\"${ i[ 1 ] }\"` ).sort().join( ' ' );\n\n\t\treturn this.name +\n\t\t\t( classes == '' ? '' : ` class=\"${ classes }\"` ) +\n\t\t\t( styles == '' ? '' : ` style=\"${ styles }\"` ) +\n\t\t\t( attributes == '' ? '' : ` ${ attributes }` );\n\t}\n\n\t/**\n\t * Clones provided element.\n\t *\n\t * @protected\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/element~Element} Clone of this element.\n\t */\n\t_clone( deep = false ) {\n\t\tconst childrenClone = [];\n\n\t\tif ( deep ) {\n\t\t\tfor ( const child of this.getChildren() ) {\n\t\t\t\tchildrenClone.push( child._clone( deep ) );\n\t\t\t}\n\t\t}\n\n\t\t// ContainerElement and AttributeElement should be also cloned properly.\n\t\tconst cloned = new this.constructor( this.name, this._attrs, childrenClone );\n\n\t\t// Classes and styles are cloned separately - this solution is faster than adding them back to attributes and\n\t\t// parse once again in constructor.\n\t\tcloned._classes = new Set( this._classes );\n\t\tcloned._styles = new Map( this._styles );\n\n\t\t// Clone custom properties.\n\t\tcloned._customProperties = new Map( this._customProperties );\n\n\t\t// Clone filler offset method.\n\t\t// We can't define this method in a prototype because it's behavior which\n\t\t// is changed by e.g. toWidget() function from ckeditor5-widget. Perhaps this should be one of custom props.\n\t\tcloned.getFillerOffset = this.getFillerOffset;\n\n\t\treturn cloned;\n\t}\n\n\t/**\n\t * {@link module:engine/view/element~Element#_insertChild Insert} a child node or a list of child nodes at the end of this node\n\t * and sets the parent of these nodes to this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of appended nodes.\n\t */\n\t_appendChild( items ) {\n\t\treturn this._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {Number} index Position where nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\t_insertChild( index, items ) {\n\t\tthis._fireChange( 'children', this );\n\t\tlet count = 0;\n\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\n\t\t\tthis._children.splice( index, 0, node );\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#remove\n\t * @protected\n\t * @param {Number} index Number of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tthis._fireChange( 'children', this );\n\n\t\tfor ( let i = index; i < index + howMany; i++ ) {\n\t\t\tthis._children[ i ].parent = null;\n\t\t}\n\n\t\treturn this._children.splice( index, howMany );\n\t}\n\n\t/**\n\t * Adds or overwrite attribute with a specified key and value.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setAttribute( key, value ) {\n\t\tvalue = String( value );\n\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( key == 'class' ) {\n\t\t\tparseClasses( this._classes, value );\n\t\t} else if ( key == 'style' ) {\n\t\t\tparseInlineStyles( this._styles, value );\n\t\t} else {\n\t\t\tthis._attrs.set( key, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} Returns true if an attribute existed and has been removed.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\t// Remove class attribute.\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\tthis._classes.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove style attribute.\n\t\tif ( key == 'style' ) {\n\t\t\tif ( this._styles.size > 0 ) {\n\t\t\t\tthis._styles.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove other attributes.\n\t\treturn this._attrs.delete( key );\n\t}\n\n\t/**\n\t * Adds specified class.\n\t *\n\t *\t\telement._addClass( 'foo' ); // Adds 'foo' class.\n\t *\t\telement._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#addClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_addClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.add( name ) );\n\t}\n\n\t/**\n\t * Removes specified class.\n\t *\n\t *\t\telement._removeClass( 'foo' );  // Removes 'foo' class.\n\t *\t\telement._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.delete( name ) );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\telement._setStyle( 'color', 'red' );\n\t *\t\telement._setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t} );\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setStyle\n\t * @protected\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setStyle( property, value ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( isPlainObject( property ) ) {\n\t\t\tconst keys = Object.keys( property );\n\n\t\t\tfor ( const key of keys ) {\n\t\t\t\tthis._styles.set( key, property[ key ] );\n\t\t\t}\n\t\t} else {\n\t\t\tthis._styles.set( property, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes specified style.\n\t *\n\t *\t\telement._removeStyle( 'color' );  // Removes 'color' style.\n\t *\t\telement._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeStyle\n\t * @protected\n\t * @param {Array.<String>|String} property\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeStyle( property ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tproperty = Array.isArray( property ) ? property : [ property ];\n\t\tproperty.forEach( name => this._styles.delete( name ) );\n\t}\n\n\t/**\n\t * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t */\n\t_setCustomProperty( key, value ) {\n\t\tthis._customProperties.set( key, value );\n\t}\n\n\t/**\n\t * Removes the custom property stored under the given key.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\t_removeCustomProperty( key ) {\n\t\treturn this._customProperties.delete( key );\n\t}\n\n\t/**\n\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t *\n\t * @abstract\n\t * @method module:engine/view/element~Element#getFillerOffset\n\t */\n\n\t// @if CK_DEBUG_ENGINE // printTree( level = 0) {\n\t// @if CK_DEBUG_ENGINE // \tlet string = '';\n\n\t// @if CK_DEBUG_ENGINE //\tstring += '\\t'.repeat( level ) + `<${ this.name }${ convertMapToTags( this.getAttributes() ) }>`;\n\n\t// @if CK_DEBUG_ENGINE //\tfor ( const child of this.getChildren() ) {\n\t// @if CK_DEBUG_ENGINE //\t\tif ( child.is( 'text' ) ) {\n\t// @if CK_DEBUG_ENGINE //\t\t\tstring += '\\n' + '\\t'.repeat( level + 1 ) + child.data;\n\t// @if CK_DEBUG_ENGINE //\t\t} else {\n\t// @if CK_DEBUG_ENGINE //\t\t\tstring += '\\n' + child.printTree( level + 1 );\n\t// @if CK_DEBUG_ENGINE //\t\t}\n\t// @if CK_DEBUG_ENGINE //\t}\n\n\t// @if CK_DEBUG_ENGINE //\tif ( this.childCount ) {\n\t// @if CK_DEBUG_ENGINE //\t\tstring += '\\n' + '\\t'.repeat( level );\n\t// @if CK_DEBUG_ENGINE //\t}\n\n\t// @if CK_DEBUG_ENGINE //\tstring += `</${ this.name }>`;\n\n\t// @if CK_DEBUG_ENGINE //\treturn string;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logTree() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( this.printTree() );\n\t// @if CK_DEBUG_ENGINE // }\n}\n\n// Parses attributes provided to the element constructor before they are applied to an element. If attributes are passed\n// as an object (instead of `Map`), the object is transformed to the map. Attributes with `null` value are removed.\n// Attributes with non-`String` value are converted to `String`.\n//\n// @param {Object|Map} attrs Attributes to parse.\n// @returns {Map} Parsed attributes.\nfunction parseAttributes( attrs ) {\n\tif ( isPlainObject( attrs ) ) {\n\t\tattrs = objectToMap( attrs );\n\t} else {\n\t\tattrs = new Map( attrs );\n\t}\n\n\tfor ( const [ key, value ] of attrs ) {\n\t\tif ( value === null ) {\n\t\t\tattrs.delete( key );\n\t\t} else if ( typeof value != 'string' ) {\n\t\t\tattrs.set( key, String( value ) );\n\t\t}\n\t}\n\n\treturn attrs;\n}\n\n// Parses inline styles and puts property - value pairs into styles map.\n// Styles map is cleared before insertion.\n//\n// @param {Map.<String, String>} stylesMap Map to insert parsed properties and values.\n// @param {String} stylesString Styles to parse.\nfunction parseInlineStyles( stylesMap, stylesString ) {\n\t// `null` if no quote was found in input string or last found quote was a closing quote. See below.\n\tlet quoteType = null;\n\tlet propertyNameStart = 0;\n\tlet propertyValueStart = 0;\n\tlet propertyName = null;\n\n\tstylesMap.clear();\n\n\t// Do not set anything if input string is empty.\n\tif ( stylesString === '' ) {\n\t\treturn;\n\t}\n\n\t// Fix inline styles that do not end with `;` so they are compatible with algorithm below.\n\tif ( stylesString.charAt( stylesString.length - 1 ) != ';' ) {\n\t\tstylesString = stylesString + ';';\n\t}\n\n\t// Seek the whole string for \"special characters\".\n\tfor ( let i = 0; i < stylesString.length; i++ ) {\n\t\tconst char = stylesString.charAt( i );\n\n\t\tif ( quoteType === null ) {\n\t\t\t// No quote found yet or last found quote was a closing quote.\n\t\t\tswitch ( char ) {\n\t\t\t\tcase ':':\n\t\t\t\t\t// Most of time colon means that property name just ended.\n\t\t\t\t\t// Sometimes however `:` is found inside property value (for example in background image url).\n\t\t\t\t\tif ( !propertyName ) {\n\t\t\t\t\t\t// Treat this as end of property only if property name is not already saved.\n\t\t\t\t\t\t// Save property name.\n\t\t\t\t\t\tpropertyName = stylesString.substr( propertyNameStart, i - propertyNameStart );\n\t\t\t\t\t\t// Save this point as the start of property value.\n\t\t\t\t\t\tpropertyValueStart = i + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '\"':\n\t\t\t\tcase '\\'':\n\t\t\t\t\t// Opening quote found (this is an opening quote, because `quoteType` is `null`).\n\t\t\t\t\tquoteType = char;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ';': {\n\t\t\t\t\t// Property value just ended.\n\t\t\t\t\t// Use previously stored property value start to obtain property value.\n\t\t\t\t\tconst propertyValue = stylesString.substr( propertyValueStart, i - propertyValueStart );\n\n\t\t\t\t\tif ( propertyName ) {\n\t\t\t\t\t\t// Save parsed part.\n\t\t\t\t\t\tstylesMap.set( propertyName.trim(), propertyValue.trim() );\n\t\t\t\t\t}\n\n\t\t\t\t\tpropertyName = null;\n\n\t\t\t\t\t// Save this point as property name start. Property name starts immediately after previous property value ends.\n\t\t\t\t\tpropertyNameStart = i + 1;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( char === quoteType ) {\n\t\t\t// If a quote char is found and it is a closing quote, mark this fact by `null`-ing `quoteType`.\n\t\t\tquoteType = null;\n\t\t}\n\t}\n}\n\n// Parses class attribute and puts all classes into classes set.\n// Classes set s cleared before insertion.\n//\n// @param {Set.<String>} classesSet Set to insert parsed classes.\n// @param {String} classesString String with classes to parse.\nfunction parseClasses( classesSet, classesString ) {\n\tconst classArray = classesString.split( /\\s+/ );\n\tclassesSet.clear();\n\tclassArray.forEach( name => classesSet.add( name ) );\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n"]}]}