{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/view.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/view.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS92aWV3L3ZpZXcKICovCmltcG9ydCBEb2N1bWVudCBmcm9tICcuL2RvY3VtZW50JzsKaW1wb3J0IERvd25jYXN0V3JpdGVyIGZyb20gJy4vZG93bmNhc3R3cml0ZXInOwppbXBvcnQgUmVuZGVyZXIgZnJvbSAnLi9yZW5kZXJlcic7CmltcG9ydCBEb21Db252ZXJ0ZXIgZnJvbSAnLi9kb21jb252ZXJ0ZXInOwppbXBvcnQgUG9zaXRpb24gZnJvbSAnLi9wb3NpdGlvbic7CmltcG9ydCBSYW5nZSBmcm9tICcuL3JhbmdlJzsKaW1wb3J0IFNlbGVjdGlvbiBmcm9tICcuL3NlbGVjdGlvbic7CmltcG9ydCBNdXRhdGlvbk9ic2VydmVyIGZyb20gJy4vb2JzZXJ2ZXIvbXV0YXRpb25vYnNlcnZlcic7CmltcG9ydCBLZXlPYnNlcnZlciBmcm9tICcuL29ic2VydmVyL2tleW9ic2VydmVyJzsKaW1wb3J0IEZha2VTZWxlY3Rpb25PYnNlcnZlciBmcm9tICcuL29ic2VydmVyL2Zha2VzZWxlY3Rpb25vYnNlcnZlcic7CmltcG9ydCBTZWxlY3Rpb25PYnNlcnZlciBmcm9tICcuL29ic2VydmVyL3NlbGVjdGlvbm9ic2VydmVyJzsKaW1wb3J0IEZvY3VzT2JzZXJ2ZXIgZnJvbSAnLi9vYnNlcnZlci9mb2N1c29ic2VydmVyJzsKaW1wb3J0IENvbXBvc2l0aW9uT2JzZXJ2ZXIgZnJvbSAnLi9vYnNlcnZlci9jb21wb3NpdGlvbm9ic2VydmVyJzsKaW1wb3J0IElucHV0T2JzZXJ2ZXIgZnJvbSAnLi9vYnNlcnZlci9pbnB1dG9ic2VydmVyJzsKaW1wb3J0IE9ic2VydmFibGVNaXhpbiBmcm9tICdAY2tlZGl0b3IvY2tlZGl0b3I1LXV0aWxzL3NyYy9vYnNlcnZhYmxlbWl4aW4nOwppbXBvcnQgbWl4IGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL21peCc7CmltcG9ydCB7IHNjcm9sbFZpZXdwb3J0VG9TaG93VGFyZ2V0IH0gZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvZG9tL3Njcm9sbCc7CmltcG9ydCB7IGluamVjdFVpRWxlbWVudEhhbmRsaW5nIH0gZnJvbSAnLi91aWVsZW1lbnQnOwppbXBvcnQgeyBpbmplY3RRdWlya3NIYW5kbGluZyB9IGZyb20gJy4vZmlsbGVyJzsKaW1wb3J0IENLRWRpdG9yRXJyb3IgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvY2tlZGl0b3JlcnJvcic7CmltcG9ydCBlbnYgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvZW52JzsKLyoqCiAqIEVkaXRvcidzIHZpZXcgY29udHJvbGxlciBjbGFzcy4gSXRzIG1haW4gcmVzcG9uc2liaWxpdHkgaXMgRE9NIC0gVmlldyBtYW5hZ2VtZW50IGZvciBlZGl0aW5nIHB1cnBvc2VzLCB0byBwcm92aWRlCiAqIGFic3RyYWN0aW9uIG92ZXIgdGhlIERPTSBzdHJ1Y3R1cmUgYW5kIGV2ZW50cyBhbmQgaGlkZSBhbGwgYnJvd3NlcnMgcXVpcmtzLgogKgogKiBWaWV3IGNvbnRyb2xsZXIgcmVuZGVycyB2aWV3IGRvY3VtZW50IHRvIERPTSB3aGVuZXZlciB2aWV3IHN0cnVjdHVyZSBjaGFuZ2VzLiBUbyBkZXRlcm1pbmUgd2hlbiB2aWV3IGNhbiBiZSByZW5kZXJlZCwKICogYWxsIGNoYW5nZXMgbmVlZCB0byBiZSBkb25lIHVzaW5nIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3ZpZXd+VmlldyNjaGFuZ2V9IG1ldGhvZCwgdXNpbmcKICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlcn06CiAqCiAqCQl2aWV3LmNoYW5nZSggd3JpdGVyID0+IHsKICoJCQl3cml0ZXIuaW5zZXJ0KCBwb3NpdGlvbiwgd3JpdGVyLmNyZWF0ZVRleHQoICdmb28nICkgKTsKICoJCX0gKTsKICoKICogVmlldyBjb250cm9sbGVyIGFsc28gcmVnaXN0ZXIge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9vYnNlcnZlcn5PYnNlcnZlciBvYnNlcnZlcnN9IHdoaWNoIG9ic2VydmVzIGNoYW5nZXMKICogb24gRE9NIGFuZCBmaXJlIGV2ZW50cyBvbiB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9kb2N1bWVudH5Eb2N1bWVudCBEb2N1bWVudH0uCiAqIE5vdGUgdGhhdCB0aGUgZm9sbG93aW5nIG9ic2VydmVycyBhcmUgYWRkZWQgYnkgdGhlIGNsYXNzIGNvbnN0cnVjdG9yIGFuZCBhcmUgYWx3YXlzIGF2YWlsYWJsZToKICoKICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L29ic2VydmVyL211dGF0aW9ub2JzZXJ2ZXJ+TXV0YXRpb25PYnNlcnZlcn0sCiAqICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9zZWxlY3Rpb25vYnNlcnZlcn5TZWxlY3Rpb25PYnNlcnZlcn0sCiAqICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9mb2N1c29ic2VydmVyfkZvY3VzT2JzZXJ2ZXJ9LAogKiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIva2V5b2JzZXJ2ZXJ+S2V5T2JzZXJ2ZXJ9LAogKiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIvZmFrZXNlbGVjdGlvbm9ic2VydmVyfkZha2VTZWxlY3Rpb25PYnNlcnZlcn0uCiAqICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9jb21wb3NpdGlvbm9ic2VydmVyfkNvbXBvc2l0aW9uT2JzZXJ2ZXJ9LgogKgogKiBUaGlzIGNsYXNzIGFsc28ge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy92aWV3flZpZXcjYXR0YWNoRG9tUm9vdCBiaW5kcyB0aGUgRE9NIGFuZCB0aGUgdmlldyBlbGVtZW50c30uCiAqCiAqIElmIHlvdSBkbyBub3QgbmVlZCBmdWxsIGEgRE9NIC0gdmlldyBtYW5hZ2VtZW50LCBhbmQgb25seSB3YW50IHRvIHRyYW5zZm9ybSBhIHRyZWUgb2YgdmlldyBlbGVtZW50cyB0byBhIHRyZWUgb2YgRE9NCiAqIGVsZW1lbnRzIHlvdSBkbyBub3QgbmVlZCB0aGlzIGNvbnRyb2xsZXIuIFlvdSBjYW4gdXNlIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2RvbWNvbnZlcnRlcn5Eb21Db252ZXJ0ZXIgRG9tQ29udmVydGVyfSBpbnN0ZWFkLgogKgogKiBAbWl4ZXMgbW9kdWxlOnV0aWxzL29ic2VydmFibGVtaXhpbn5PYnNlcnZhYmxlTWl4aW4KICovCgpleHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3IHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIC8qKgogICAgICogSW5zdGFuY2Ugb2YgdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnR+RG9jdW1lbnR9IGFzc29jaWF0ZWQgd2l0aCB0aGlzIHZpZXcgY29udHJvbGxlci4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEB0eXBlIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnR+RG9jdW1lbnR9CiAgICAgKi8KICAgIHRoaXMuZG9jdW1lbnQgPSBuZXcgRG9jdW1lbnQoKTsKICAgIC8qKgogICAgICogSW5zdGFuY2Ugb2YgdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9tY29udmVydGVyfkRvbUNvbnZlcnRlciBkb21Db252ZXJ0ZXJ9IHVzZWQgYnkKICAgICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvdmlld35WaWV3I19yZW5kZXJlciByZW5kZXJlcn0KICAgICAqIGFuZCB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L29ic2VydmVyL29ic2VydmVyfk9ic2VydmVyIG9ic2VydmVyc30uCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAdHlwZSB7bW9kdWxlOmVuZ2luZS92aWV3L2RvbWNvbnZlcnRlcn5Eb21Db252ZXJ0ZXJ9CiAgICAgKi8KCiAgICB0aGlzLmRvbUNvbnZlcnRlciA9IG5ldyBEb21Db252ZXJ0ZXIoKTsKICAgIC8qKgogICAgICogUm9vdHMgb2YgdGhlIERPTSB0cmVlLiBNYXAgb24gdGhlIGBIVE1MRWxlbWVudGBzIHdpdGggcm9vdHMgbmFtZXMgYXMga2V5cy4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEB0eXBlIHtNYXAuPFN0cmluZywgSFRNTEVsZW1lbnQ+fQogICAgICovCgogICAgdGhpcy5kb21Sb290cyA9IG5ldyBNYXAoKTsKICAgIC8qKgogICAgICogVXNlZCB0byBwcmV2ZW50IGNhbGxpbmcge0BsaW5rICNmb3JjZVJlbmRlcn0gYW5kIHtAbGluayAjY2hhbmdlfSBkdXJpbmcgcmVuZGVyaW5nIHZpZXcgdG8gdGhlIERPTS4KICAgICAqCiAgICAgKiBAcmVhZG9ubHkKICAgICAqIEBtZW1iZXIge0Jvb2xlYW59ICNpc1JlbmRlcmluZ0luUHJvZ3Jlc3MKICAgICAqLwoKICAgIHRoaXMuc2V0KCdpc1JlbmRlcmluZ0luUHJvZ3Jlc3MnLCBmYWxzZSk7CiAgICAvKioKICAgICAqIEluc3RhbmNlIG9mIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3JlbmRlcmVyflJlbmRlcmVyIHJlbmRlcmVyfS4KICAgICAqCiAgICAgKiBAcHJvdGVjdGVkCiAgICAgKiBAdHlwZSB7bW9kdWxlOmVuZ2luZS92aWV3L3JlbmRlcmVyflJlbmRlcmVyfQogICAgICovCgogICAgdGhpcy5fcmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIodGhpcy5kb21Db252ZXJ0ZXIsIHRoaXMuZG9jdW1lbnQuc2VsZWN0aW9uKTsKCiAgICB0aGlzLl9yZW5kZXJlci5iaW5kKCdpc0ZvY3VzZWQnKS50byh0aGlzLmRvY3VtZW50KTsKICAgIC8qKgogICAgICogQSBET00gcm9vdCBhdHRyaWJ1dGVzIGNhY2hlLiBJdCBzYXZlcyB0aGUgaW5pdGlhbCB2YWx1ZXMgb2YgRE9NIHJvb3QgYXR0cmlidXRlcyBiZWZvcmUgdGhlIERPTSBlbGVtZW50CiAgICAgKiBpcyB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3ZpZXd+VmlldyNhdHRhY2hEb21Sb290IGF0dGFjaGVkfSB0byB0aGUgdmlldyBzbyBsYXRlciBvbiwgd2hlbgogICAgICogdGhlIHZpZXcgaXMgZGVzdHJveWVkICh7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3ZpZXd+VmlldyNkZXRhY2hEb21Sb290fSksIHRoZXkgY2FuIGJlIGVhc2lseSByZXN0b3JlZC4KICAgICAqIFRoaXMgd2F5LCB0aGUgRE9NIGVsZW1lbnQgY2FuIGdvIGJhY2sgdG8gdGhlIChjbGVhbikgc3RhdGUgYXMgaWYgdGhlIGVkaXRpbmcgdmlldyBuZXZlciB1c2VkIGl0LgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAbWVtYmVyIHtXZWFrTWFwLjxIVE1MRWxlbWVudCxPYmplY3Q+fQogICAgICovCgoKICAgIHRoaXMuX2luaXRpYWxEb21Sb290QXR0cmlidXRlcyA9IG5ldyBXZWFrTWFwKCk7CiAgICAvKioKICAgICAqIE1hcCBvZiByZWdpc3RlcmVkIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIvb2JzZXJ2ZXJ+T2JzZXJ2ZXIgb2JzZXJ2ZXJzfS4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHR5cGUge01hcC48RnVuY3Rpb24sIG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9vYnNlcnZlcn5PYnNlcnZlcj59CiAgICAgKi8KCiAgICB0aGlzLl9vYnNlcnZlcnMgPSBuZXcgTWFwKCk7CiAgICAvKioKICAgICAqIElzIHNldCB0byBgdHJ1ZWAgd2hlbiB7QGxpbmsgI2NoYW5nZSB2aWV3IGNoYW5nZXN9IGFyZSBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICovCgogICAgdGhpcy5fb25nb2luZ0NoYW5nZSA9IGZhbHNlOwogICAgLyoqCiAgICAgKiBVc2VkIHRvIHByZXZlbnQgY2FsbGluZyB7QGxpbmsgI2ZvcmNlUmVuZGVyfSBhbmQge0BsaW5rICNjaGFuZ2V9IGR1cmluZyByZW5kZXJpbmcgdmlldyB0byB0aGUgRE9NLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAdHlwZSB7Qm9vbGVhbn0KICAgICAqLwoKICAgIHRoaXMuX3Bvc3RGaXhlcnNJblByb2dyZXNzID0gZmFsc2U7CiAgICAvKioKICAgICAqIEludGVybmFsIGZsYWcgdG8gdGVtcG9yYXJ5IGRpc2FibGUgcmVuZGVyaW5nLiBTZWUgdGhlIHVzYWdlIGluIHRoZSB7QGxpbmsgI19kaXNhYmxlUmVuZGVyaW5nfS4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHR5cGUge0Jvb2xlYW59CiAgICAgKi8KCiAgICB0aGlzLl9yZW5kZXJpbmdEaXNhYmxlZCA9IGZhbHNlOwogICAgLyoqCiAgICAgKiBJbnRlcm5hbCBmbGFnIHRoYXQgZGlzYWJsZXMgcmVuZGVyaW5nIHdoZW4gdGhlcmUgYXJlIG5vIGNoYW5nZXMgc2luY2UgdGhlIGxhc3QgcmVuZGVyaW5nLgogICAgICogSXQgc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IGNoYW5nZWQgc2VsZWN0aW9uIGFuZCBjaGFuZ2VkIGVsZW1lbnRzIGZyb20gYXR0YWNoZWQgZG9jdW1lbnQgcm9vdHMuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICovCgogICAgdGhpcy5faGFzQ2hhbmdlZFNpbmNlVGhlTGFzdFJlbmRlcmluZyA9IGZhbHNlOwogICAgLyoqCiAgICAgKiBEb3duY2FzdFdyaXRlciBpbnN0YW5jZSB1c2VkIGluIHtAbGluayAjY2hhbmdlIGNoYW5nZSBtZXRob2R9IGNhbGxiYWNrcy4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHR5cGUge21vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlcn0KICAgICAqLwoKICAgIHRoaXMuX3dyaXRlciA9IG5ldyBEb3duY2FzdFdyaXRlcih0aGlzLmRvY3VtZW50KTsgLy8gQWRkIGRlZmF1bHQgb2JzZXJ2ZXJzLgoKICAgIHRoaXMuYWRkT2JzZXJ2ZXIoTXV0YXRpb25PYnNlcnZlcik7CiAgICB0aGlzLmFkZE9ic2VydmVyKFNlbGVjdGlvbk9ic2VydmVyKTsKICAgIHRoaXMuYWRkT2JzZXJ2ZXIoRm9jdXNPYnNlcnZlcik7CiAgICB0aGlzLmFkZE9ic2VydmVyKEtleU9ic2VydmVyKTsKICAgIHRoaXMuYWRkT2JzZXJ2ZXIoRmFrZVNlbGVjdGlvbk9ic2VydmVyKTsKICAgIHRoaXMuYWRkT2JzZXJ2ZXIoQ29tcG9zaXRpb25PYnNlcnZlcik7CgogICAgaWYgKGVudi5pc0FuZHJvaWQpIHsKICAgICAgdGhpcy5hZGRPYnNlcnZlcihJbnB1dE9ic2VydmVyKTsKICAgIH0gLy8gSW5qZWN0IHF1aXJrcyBoYW5kbGVycy4KCgogICAgaW5qZWN0UXVpcmtzSGFuZGxpbmcodGhpcyk7CiAgICBpbmplY3RVaUVsZW1lbnRIYW5kbGluZyh0aGlzKTsgLy8gVXNlICdub3JtYWwnIHByaW9yaXR5IHNvIHRoYXQgcmVuZGVyaW5nIGlzIHBlcmZvcm1lZCBhcyBmaXJzdCB3aGVuIHVzaW5nIHRoYXQgcHJpb3JpdHkuCgogICAgdGhpcy5vbigncmVuZGVyJywgKCkgPT4gewogICAgICB0aGlzLl9yZW5kZXIoKTsgLy8gSW5mb3JtcyB0aGF0IGxheW91dCBoYXMgY2hhbmdlZCBhZnRlciByZW5kZXIuCgoKICAgICAgdGhpcy5kb2N1bWVudC5maXJlKCdsYXlvdXRDaGFuZ2VkJyk7IC8vIFJlc2V0IHRoZSBgX2hhc0NoYW5nZWRTaW5jZVRoZUxhc3RSZW5kZXJpbmdgIGZsYWcgYWZ0ZXIgcmVuZGVyaW5nLgoKICAgICAgdGhpcy5faGFzQ2hhbmdlZFNpbmNlVGhlTGFzdFJlbmRlcmluZyA9IGZhbHNlOwogICAgfSk7IC8vIExpc3RlbiB0byB0aGUgZG9jdW1lbnQgc2VsZWN0aW9uIGNoYW5nZXMgZGlyZWN0bHkuCgogICAgdGhpcy5saXN0ZW5Ubyh0aGlzLmRvY3VtZW50LnNlbGVjdGlvbiwgJ2NoYW5nZScsICgpID0+IHsKICAgICAgdGhpcy5faGFzQ2hhbmdlZFNpbmNlVGhlTGFzdFJlbmRlcmluZyA9IHRydWU7CiAgICB9KTsKICB9CiAgLyoqCiAgICogQXR0YWNoZXMgYSBET00gcm9vdCBlbGVtZW50IHRvIHRoZSB2aWV3IGVsZW1lbnQgYW5kIGVuYWJsZSBhbGwgb2JzZXJ2ZXJzIG9uIHRoYXQgZWxlbWVudC4KICAgKiBBbHNvIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvcmVuZGVyZXJ+UmVuZGVyZXIjbWFya1RvU3luYyBtYXJrIGVsZW1lbnR9IHRvIGJlIHN5bmNocm9uaXplZAogICAqIHdpdGggdGhlIHZpZXcgd2hhdCBtZWFucyB0aGF0IGFsbCBjaGlsZCBub2RlcyB3aWxsIGJlIHJlbW92ZWQgYW5kIHJlcGxhY2VkIHdpdGggY29udGVudCBvZiB0aGUgdmlldyByb290LgogICAqCiAgICogVGhpcyBtZXRob2QgYWxzbyB3aWxsIGNoYW5nZSB2aWV3IGVsZW1lbnQgbmFtZSBhcyB0aGUgc2FtZSBhcyB0YWcgbmFtZSBvZiBnaXZlbiBkb20gcm9vdC4KICAgKiBOYW1lIGlzIGFsd2F5cyB0cmFuc2Zvcm1lZCB0byBsb3dlciBjYXNlLgogICAqCiAgICogKipOb3RlOioqIFVzZSB7QGxpbmsgI2RldGFjaERvbVJvb3QgYGRldGFjaERvbVJvb3QoKWB9IHRvIHJldmVydCB0aGlzIGFjdGlvbi4KICAgKgogICAqIEBwYXJhbSB7RWxlbWVudH0gZG9tUm9vdCBET00gcm9vdCBlbGVtZW50LgogICAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZT0nbWFpbiddIE5hbWUgb2YgdGhlIHJvb3QuCiAgICovCgoKICBhdHRhY2hEb21Sb290KGRvbVJvb3QsIG5hbWUgPSAnbWFpbicpIHsKICAgIGNvbnN0IHZpZXdSb290ID0gdGhpcy5kb2N1bWVudC5nZXRSb290KG5hbWUpOyAvLyBTZXQgdmlldyByb290IG5hbWUgdGhlIHNhbWUgYXMgRE9NIHJvb3QgdGFnIG5hbWUuCgogICAgdmlld1Jvb3QuX25hbWUgPSBkb21Sb290LnRhZ05hbWUudG9Mb3dlckNhc2UoKTsKICAgIGNvbnN0IGluaXRpYWxEb21Sb290QXR0cmlidXRlcyA9IHt9OyAvLyAxLiBDb3B5IGFuZCBjYWNoZSB0aGUgYXR0cmlidXRlcyB0byByZW1lbWJlciB0aGUgc3RhdGUgb2YgdGhlIGVsZW1lbnQgYmVmb3JlIGF0dGFjaGluZy4KICAgIC8vICAgIFRoZSBjYWNoZWQgYXR0cmlidXRlcyB3aWxsIGJlIHJlc3RvcmVkIGluIGRldGFjaERvbVJvb3QoKSBzbyB0aGUgZWxlbWVudCBnb2VzIHRvIHRoZQogICAgLy8gICAgY2xlYW4gc3RhdGUgYXMgaWYgdGhlIGVkaXRpbmcgdmlldyBuZXZlciB1c2VkIGl0LgogICAgLy8gMi4gQXBwbHkgdGhlIGF0dHJpYnV0ZXMgdXNpbmcgdGhlIHZpZXcgd3JpdGVyLCBzbyB0aGV5IGFsbCBnbyB1bmRlciB0aGUgY29udHJvbCBvZiB0aGUgZW5naW5lLgogICAgLy8gICAgVGhlIGVkaXRpbmcgdmlldyB0YWtlcyBvdmVyIHRoZSBhdHRyaWJ1dGUgbWFuYWdlbWVudCBjb21wbGV0ZWx5IGJlY2F1c2UgdmFyaW91cwogICAgLy8gICAgZmVhdHVyZXMgKGUuZy4gYWRkUGxhY2Vob2xkZXIoKSkgcmVxdWlyZSBkeW5hbWljIGNoYW5nZXMgb2YgdGhvc2UgYXR0cmlidXRlcyBhbmQgdGhleQogICAgLy8gICAgY2Fubm90IGJlIG1hbmFnZWQgYnkgdGhlIGVuZ2luZSBhbmQgdGhlIFVJIGxpYnJhcnkgYXQgdGhlIHNhbWUgdGltZS4KCiAgICBmb3IgKGNvbnN0IHsKICAgICAgbmFtZSwKICAgICAgdmFsdWUKICAgIH0gb2YgQXJyYXkuZnJvbShkb21Sb290LmF0dHJpYnV0ZXMpKSB7CiAgICAgIGluaXRpYWxEb21Sb290QXR0cmlidXRlc1tuYW1lXSA9IHZhbHVlOyAvLyBEbyBub3QgdXNlIHdyaXRlci5zZXRBdHRyaWJ1dGUoKSBmb3IgdGhlIGNsYXNzIGF0dHJpYnV0ZS4gVGhlIEVkaXRhYmxlVUlWaWV3IGNsYXNzCiAgICAgIC8vIGFuZCBpdHMgZGVzY2VuZGFudHMgY291bGQgaGF2ZSBhbHJlYWR5IHNldCBzb21lIHVzaW5nIHRoZSB3cml0ZXIuYWRkQ2xhc3MoKSBvbiB0aGUgdmlldwogICAgICAvLyBkb2N1bWVudCByb290LiBUaGV5IGhhdmVuJ3QgYmVlbiByZW5kZXJlZCB5ZXQgc28gdGhleSBhcmUgbm90IHByZXNlbnQgaW4gdGhlIERPTSByb290LgogICAgICAvLyBVc2luZyB3cml0ZXIuc2V0QXR0cmlidXRlKCAnY2xhc3MnLCAuLi4gKSB3b3VsZCBvdmVycmlkZSB0aGVtIGNvbXBsZXRlbHkuCgogICAgICBpZiAobmFtZSA9PT0gJ2NsYXNzJykgewogICAgICAgIHRoaXMuX3dyaXRlci5hZGRDbGFzcyh2YWx1ZS5zcGxpdCgnICcpLCB2aWV3Um9vdCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5fd3JpdGVyLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgdmlld1Jvb3QpOwogICAgICB9CiAgICB9CgogICAgdGhpcy5faW5pdGlhbERvbVJvb3RBdHRyaWJ1dGVzLnNldChkb21Sb290LCBpbml0aWFsRG9tUm9vdEF0dHJpYnV0ZXMpOwoKICAgIGNvbnN0IHVwZGF0ZUNvbnRlbnRlZGl0YWJsZUF0dHJpYnV0ZSA9ICgpID0+IHsKICAgICAgdGhpcy5fd3JpdGVyLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgIXZpZXdSb290LmlzUmVhZE9ubHksIHZpZXdSb290KTsKCiAgICAgIGlmICh2aWV3Um9vdC5pc1JlYWRPbmx5KSB7CiAgICAgICAgdGhpcy5fd3JpdGVyLmFkZENsYXNzKCdjay1yZWFkLW9ubHknLCB2aWV3Um9vdCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5fd3JpdGVyLnJlbW92ZUNsYXNzKCdjay1yZWFkLW9ubHknLCB2aWV3Um9vdCk7CiAgICAgIH0KICAgIH07IC8vIFNldCBpbml0aWFsIHZhbHVlLgoKCiAgICB1cGRhdGVDb250ZW50ZWRpdGFibGVBdHRyaWJ1dGUoKTsKICAgIHRoaXMuZG9tUm9vdHMuc2V0KG5hbWUsIGRvbVJvb3QpOwogICAgdGhpcy5kb21Db252ZXJ0ZXIuYmluZEVsZW1lbnRzKGRvbVJvb3QsIHZpZXdSb290KTsKCiAgICB0aGlzLl9yZW5kZXJlci5tYXJrVG9TeW5jKCdjaGlsZHJlbicsIHZpZXdSb290KTsKCiAgICB0aGlzLl9yZW5kZXJlci5tYXJrVG9TeW5jKCdhdHRyaWJ1dGVzJywgdmlld1Jvb3QpOwoKICAgIHRoaXMuX3JlbmRlcmVyLmRvbURvY3VtZW50cy5hZGQoZG9tUm9vdC5vd25lckRvY3VtZW50KTsKCiAgICB2aWV3Um9vdC5vbignY2hhbmdlOmNoaWxkcmVuJywgKGV2dCwgbm9kZSkgPT4gdGhpcy5fcmVuZGVyZXIubWFya1RvU3luYygnY2hpbGRyZW4nLCBub2RlKSk7CiAgICB2aWV3Um9vdC5vbignY2hhbmdlOmF0dHJpYnV0ZXMnLCAoZXZ0LCBub2RlKSA9PiB0aGlzLl9yZW5kZXJlci5tYXJrVG9TeW5jKCdhdHRyaWJ1dGVzJywgbm9kZSkpOwogICAgdmlld1Jvb3Qub24oJ2NoYW5nZTp0ZXh0JywgKGV2dCwgbm9kZSkgPT4gdGhpcy5fcmVuZGVyZXIubWFya1RvU3luYygndGV4dCcsIG5vZGUpKTsKICAgIHZpZXdSb290Lm9uKCdjaGFuZ2U6aXNSZWFkT25seScsICgpID0+IHRoaXMuY2hhbmdlKHVwZGF0ZUNvbnRlbnRlZGl0YWJsZUF0dHJpYnV0ZSkpOwogICAgdmlld1Jvb3Qub24oJ2NoYW5nZScsICgpID0+IHsKICAgICAgdGhpcy5faGFzQ2hhbmdlZFNpbmNlVGhlTGFzdFJlbmRlcmluZyA9IHRydWU7CiAgICB9KTsKCiAgICBmb3IgKGNvbnN0IG9ic2VydmVyIG9mIHRoaXMuX29ic2VydmVycy52YWx1ZXMoKSkgewogICAgICBvYnNlcnZlci5vYnNlcnZlKGRvbVJvb3QsIG5hbWUpOwogICAgfQogIH0KICAvKioKICAgKiBEZXRhY2hlcyBhIERPTSByb290IGVsZW1lbnQgZnJvbSB0aGUgdmlldyBlbGVtZW50IGFuZCByZXN0b3JlcyBpdHMgYXR0cmlidXRlcyB0byB0aGUgc3RhdGUgYmVmb3JlCiAgICoge0BsaW5rICNhdHRhY2hEb21Sb290IGBhdHRhY2hEb21Sb290KClgfS4KICAgKgogICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHJvb3QgdG8gZGV0YWNoLgogICAqLwoKCiAgZGV0YWNoRG9tUm9vdChuYW1lKSB7CiAgICBjb25zdCBkb21Sb290ID0gdGhpcy5kb21Sb290cy5nZXQobmFtZSk7IC8vIFJlbW92ZSBhbGwgcm9vdCBhdHRyaWJ1dGVzIHNvIHRoZSBET00gZWxlbWVudCBpcyAiYmFyZSIuCgogICAgQXJyYXkuZnJvbShkb21Sb290LmF0dHJpYnV0ZXMpLmZvckVhY2goKHsKICAgICAgbmFtZQogICAgfSkgPT4gZG9tUm9vdC5yZW1vdmVBdHRyaWJ1dGUobmFtZSkpOwoKICAgIGNvbnN0IGluaXRpYWxEb21Sb290QXR0cmlidXRlcyA9IHRoaXMuX2luaXRpYWxEb21Sb290QXR0cmlidXRlcy5nZXQoZG9tUm9vdCk7IC8vIFJldmVydCBhbGwgdmlldyByb290IGF0dHJpYnV0ZXMgYmFjayB0byB0aGUgc3RhdGUgYmVmb3JlIGF0dGFjaERvbVJvb3Qgd2FzIGNhbGxlZC4KCgogICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgaW4gaW5pdGlhbERvbVJvb3RBdHRyaWJ1dGVzKSB7CiAgICAgIGRvbVJvb3Quc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgaW5pdGlhbERvbVJvb3RBdHRyaWJ1dGVzW2F0dHJpYnV0ZV0pOwogICAgfQoKICAgIHRoaXMuZG9tUm9vdHMuZGVsZXRlKG5hbWUpOwogICAgdGhpcy5kb21Db252ZXJ0ZXIudW5iaW5kRG9tRWxlbWVudChkb21Sb290KTsKICB9CiAgLyoqCiAgICogR2V0cyBET00gcm9vdCBlbGVtZW50LgogICAqCiAgICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lPSdtYWluJ10gIE5hbWUgb2YgdGhlIHJvb3QuCiAgICogQHJldHVybnMge0VsZW1lbnR9IERPTSByb290IGVsZW1lbnQgaW5zdGFuY2UuCiAgICovCgoKICBnZXREb21Sb290KG5hbWUgPSAnbWFpbicpIHsKICAgIHJldHVybiB0aGlzLmRvbVJvb3RzLmdldChuYW1lKTsKICB9CiAgLyoqCiAgICogQ3JlYXRlcyBvYnNlcnZlciBvZiB0aGUgZ2l2ZW4gdHlwZSBpZiBub3QgeWV0IGNyZWF0ZWQsIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIvb2JzZXJ2ZXJ+T2JzZXJ2ZXIjZW5hYmxlIGVuYWJsZXN9IGl0CiAgICogYW5kIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIvb2JzZXJ2ZXJ+T2JzZXJ2ZXIjb2JzZXJ2ZSBhdHRhY2hlc30gdG8gYWxsIGV4aXN0aW5nIGFuZCBmdXR1cmUKICAgKiB7QGxpbmsgI2RvbVJvb3RzIERPTSByb290c30uCiAgICoKICAgKiBOb3RlOiBPYnNlcnZlcnMgYXJlIHJlY29nbml6ZWQgYnkgdGhlaXIgY29uc3RydWN0b3IgKGNsYXNzZXMpLiBBIHNpbmdsZSBvYnNlcnZlciB3aWxsIGJlIGluc3RhbnRpYXRlZCBhbmQgdXNlZCBvbmx5CiAgICogd2hlbiByZWdpc3RlcmVkIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpcyBtZWFucyB0aGF0IGZlYXR1cmVzIGFuZCBvdGhlciBjb21wb25lbnRzIGNhbiByZWdpc3RlciBhIHNpbmdsZSBvYnNlcnZlcgogICAqIG11bHRpcGxlIHRpbWVzIHdpdGhvdXQgY2FyaW5nIHdoZXRoZXIgaXQgaGFzIGJlZW4gYWxyZWFkeSBhZGRlZCBvciBub3QuCiAgICoKICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBPYnNlcnZlciBUaGUgY29uc3RydWN0b3Igb2YgYW4gb2JzZXJ2ZXIgdG8gYWRkLgogICAqIFNob3VsZCBjcmVhdGUgYW4gaW5zdGFuY2UgaW5oZXJpdGluZyBmcm9tIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIvb2JzZXJ2ZXJ+T2JzZXJ2ZXJ9LgogICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIvb2JzZXJ2ZXJ+T2JzZXJ2ZXJ9IEFkZGVkIG9ic2VydmVyIGluc3RhbmNlLgogICAqLwoKCiAgYWRkT2JzZXJ2ZXIoT2JzZXJ2ZXIpIHsKICAgIGxldCBvYnNlcnZlciA9IHRoaXMuX29ic2VydmVycy5nZXQoT2JzZXJ2ZXIpOwoKICAgIGlmIChvYnNlcnZlcikgewogICAgICByZXR1cm4gb2JzZXJ2ZXI7CiAgICB9CgogICAgb2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2ZXIodGhpcyk7CgogICAgdGhpcy5fb2JzZXJ2ZXJzLnNldChPYnNlcnZlciwgb2JzZXJ2ZXIpOwoKICAgIGZvciAoY29uc3QgW25hbWUsIGRvbUVsZW1lbnRdIG9mIHRoaXMuZG9tUm9vdHMpIHsKICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb21FbGVtZW50LCBuYW1lKTsKICAgIH0KCiAgICBvYnNlcnZlci5lbmFibGUoKTsKICAgIHJldHVybiBvYnNlcnZlcjsKICB9CiAgLyoqCiAgICogUmV0dXJucyBvYnNlcnZlciBvZiB0aGUgZ2l2ZW4gdHlwZSBvciBgdW5kZWZpbmVkYCBpZiBzdWNoIG9ic2VydmVyIGhhcyBub3QgYmVlbiBhZGRlZCB5ZXQuCiAgICoKICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBPYnNlcnZlciBUaGUgY29uc3RydWN0b3Igb2YgYW4gb2JzZXJ2ZXIgdG8gZ2V0LgogICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIvb2JzZXJ2ZXJ+T2JzZXJ2ZXJ8dW5kZWZpbmVkfSBPYnNlcnZlciBpbnN0YW5jZSBvciB1bmRlZmluZWQuCiAgICovCgoKICBnZXRPYnNlcnZlcihPYnNlcnZlcikgewogICAgcmV0dXJuIHRoaXMuX29ic2VydmVycy5nZXQoT2JzZXJ2ZXIpOwogIH0KICAvKioKICAgKiBEaXNhYmxlcyBhbGwgYWRkZWQgb2JzZXJ2ZXJzLgogICAqLwoKCiAgZGlzYWJsZU9ic2VydmVycygpIHsKICAgIGZvciAoY29uc3Qgb2JzZXJ2ZXIgb2YgdGhpcy5fb2JzZXJ2ZXJzLnZhbHVlcygpKSB7CiAgICAgIG9ic2VydmVyLmRpc2FibGUoKTsKICAgIH0KICB9CiAgLyoqCiAgICogRW5hYmxlcyBhbGwgYWRkZWQgb2JzZXJ2ZXJzLgogICAqLwoKCiAgZW5hYmxlT2JzZXJ2ZXJzKCkgewogICAgZm9yIChjb25zdCBvYnNlcnZlciBvZiB0aGlzLl9vYnNlcnZlcnMudmFsdWVzKCkpIHsKICAgICAgb2JzZXJ2ZXIuZW5hYmxlKCk7CiAgICB9CiAgfQogIC8qKgogICAqIFNjcm9sbHMgdGhlIHBhZ2Ugdmlld3BvcnQgYW5kIHtAbGluayAjZG9tUm9vdHN9IHdpdGggdGhlaXIgYW5jZXN0b3JzIHRvIHJldmVhbCB0aGUKICAgKiBjYXJldCwgaWYgbm90IGFscmVhZHkgdmlzaWJsZSB0byB0aGUgdXNlci4KICAgKi8KCgogIHNjcm9sbFRvVGhlU2VsZWN0aW9uKCkgewogICAgY29uc3QgcmFuZ2UgPSB0aGlzLmRvY3VtZW50LnNlbGVjdGlvbi5nZXRGaXJzdFJhbmdlKCk7CgogICAgaWYgKHJhbmdlKSB7CiAgICAgIHNjcm9sbFZpZXdwb3J0VG9TaG93VGFyZ2V0KHsKICAgICAgICB0YXJnZXQ6IHRoaXMuZG9tQ29udmVydGVyLnZpZXdSYW5nZVRvRG9tKHJhbmdlKSwKICAgICAgICB2aWV3cG9ydE9mZnNldDogMjAKICAgICAgfSk7CiAgICB9CiAgfQogIC8qKgogICAqIEl0IHdpbGwgZm9jdXMgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZWRpdGFibGVlbGVtZW50fkVkaXRhYmxlRWxlbWVudCBFZGl0YWJsZUVsZW1lbnR9CiAgICogdGhhdCBpcyBjdXJyZW50bHkgaGF2aW5nIHNlbGVjdGlvbiBpbnNpZGUuCiAgICovCgoKICBmb2N1cygpIHsKICAgIGlmICghdGhpcy5kb2N1bWVudC5pc0ZvY3VzZWQpIHsKICAgICAgY29uc3QgZWRpdGFibGUgPSB0aGlzLmRvY3VtZW50LnNlbGVjdGlvbi5lZGl0YWJsZUVsZW1lbnQ7CgogICAgICBpZiAoZWRpdGFibGUpIHsKICAgICAgICB0aGlzLmRvbUNvbnZlcnRlci5mb2N1cyhlZGl0YWJsZSk7CiAgICAgICAgdGhpcy5mb3JjZVJlbmRlcigpOwogICAgICB9IGVsc2Ugey8vIEJlZm9yZSBmb2N1c2luZyB2aWV3IGRvY3VtZW50LCBzZWxlY3Rpb24gc2hvdWxkIGJlIHBsYWNlZCBpbnNpZGUgb25lIG9mIHRoZSB2aWV3J3MgZWRpdGFibGVzLgogICAgICAgIC8vIE5vcm1hbGx5IGl0cyBzZWxlY3Rpb24gd2lsbCBiZSBjb252ZXJ0ZWQgZnJvbSBtb2RlbCBkb2N1bWVudCAod2hpY2ggaGF2ZSBkZWZhdWx0IHNlbGVjdGlvbiksIGJ1dAogICAgICAgIC8vIHdoZW4gdXNpbmcgdmlldyBkb2N1bWVudCBvbiBpdHMgb3duLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IHBsYWNlIHNlbGVjdGlvbiBiZWZvcmUgZm9jdXNpbmcgaXQuCiAgICAgICAgLy8KICAgICAgICAvLyBAaWYgQ0tfREVCVUcgLy8gY29uc29sZS53YXJuKCAnVGhlcmUgaXMgbm8gc2VsZWN0aW9uIGluIGFueSBlZGl0YWJsZSB0byBmb2N1cy4nICk7CiAgICAgIH0KICAgIH0KICB9CiAgLyoqCiAgICogVGhlIGBjaGFuZ2UoKWAgbWV0aG9kIGlzIHRoZSBwcmltYXJ5IHdheSBvZiBjaGFuZ2luZyB0aGUgdmlldy4gWW91IHNob3VsZCB1c2UgaXQgdG8gbW9kaWZ5IGFueSBub2RlIGluIHRoZSB2aWV3IHRyZWUuCiAgICogSXQgbWFrZXMgc3VyZSB0aGF0IGFmdGVyIGFsbCBjaGFuZ2VzIGFyZSBtYWRlIHRoZSB2aWV3IGlzIHJlbmRlcmVkIHRvIHRoZSBET00gKGFzc3VtaW5nIHRoYXQgdGhlIHZpZXcgd2lsbCBiZSBjaGFuZ2VkCiAgICogaW5zaWRlIHRoZSBjYWxsYmFjaykuIEl0IHByZXZlbnRzIHNpdHVhdGlvbnMgd2hlbiB0aGUgRE9NIGlzIHVwZGF0ZWQgd2hlbiB0aGUgdmlldyBzdGF0ZSBpcyBub3QgeWV0IGNvcnJlY3QuIEl0IGFsbG93cwogICAqIHRvIG5lc3QgY2FsbHMgb25lIGluc2lkZSBhbm90aGVyIGFuZCBzdGlsbCBwZXJmb3JtcyBhIHNpbmdsZSByZW5kZXJpbmcgYWZ0ZXIgYWxsIHRob3NlIGNoYW5nZXMgYXJlIG1hZGUuCiAgICogSXQgYWxzbyByZXR1cm5zIHRoZSByZXR1cm4gdmFsdWUgb2YgaXRzIGNhbGxiYWNrLgogICAqCiAgICoJCWNvbnN0IHRleHQgPSB2aWV3LmNoYW5nZSggd3JpdGVyID0+IHsKICAgKgkJCWNvbnN0IG5ld1RleHQgPSB3cml0ZXIuY3JlYXRlVGV4dCggJ2ZvbycgKTsKICAgKgkJCXdyaXRlci5pbnNlcnQoIHBvc2l0aW9uMSwgbmV3VGV4dCApOwogICAqCiAgICoJCQl2aWV3LmNoYW5nZSggd3JpdGVyID0+IHsKICAgKgkJCQl3cml0ZXIuaW5zZXJ0KCBwb3NpdGlvbjIsIHdyaXRlci5jcmVhdGVUZXh0KCAnYmFyJyApICk7CiAgICoJCQl9ICk7CiAgICoKICAgKiAJCQl3cml0ZXIucmVtb3ZlKCByYW5nZSApOwogICAqCiAgICogCQkJcmV0dXJuIG5ld1RleHQ7CiAgICoJCX0gKTsKICAgKgogICAqIFdoZW4gdGhlIG91dGVybW9zdCBjaGFuZ2UgYmxvY2sgaXMgZG9uZSBhbmQgcmVuZGVyaW5nIHRvIHRoZSBET00gaXMgb3ZlciB0aGUKICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3ZpZXd+VmlldyNldmVudDpyZW5kZXIgYFZpZXcjcmVuZGVyYH0gZXZlbnQgaXMgZmlyZWQuCiAgICoKICAgKiBUaGlzIG1ldGhvZCB0aHJvd3MgYSBgYXBwbHlpbmctdmlldy1jaGFuZ2VzLW9uLXJlbmRlcmluZ2AgZXJyb3Igd2hlbgogICAqIHRoZSBjaGFuZ2UgYmxvY2sgaXMgdXNlZCBhZnRlciByZW5kZXJpbmcgdG8gdGhlIERPTSBoYXMgc3RhcnRlZC4KICAgKgogICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIG1heSBtb2RpZnkgdGhlIHZpZXcuCiAgICogQHJldHVybnMgeyp9IFZhbHVlIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjay4KICAgKi8KCgogIGNoYW5nZShjYWxsYmFjaykgewogICAgaWYgKHRoaXMuaXNSZW5kZXJpbmdJblByb2dyZXNzIHx8IHRoaXMuX3Bvc3RGaXhlcnNJblByb2dyZXNzKSB7CiAgICAgIC8qKgogICAgICAgKiBUaHJvd24gd2hlbiB0aGVyZSBpcyBhbiBhdHRlbXB0IHRvIG1ha2UgY2hhbmdlcyB0byB0aGUgdmlldyB0cmVlIHdoZW4gaXQgaXMgaW4gaW5jb3JyZWN0IHN0YXRlLiBUaGlzIG1heQogICAgICAgKiBjYXVzZSBzb21lIHVuZXhwZWN0ZWQgYmVoYXZpb3VyIGFuZCBpbmNvbnNpc3RlbmN5IGJldHdlZW4gdGhlIERPTSBhbmQgdGhlIHZpZXcuCiAgICAgICAqIFRoaXMgbWF5IGJlIGNhdXNlZCBieToKICAgICAgICoKICAgICAgICogKiBjYWxsaW5nIHtAbGluayAjY2hhbmdlfSBvciB7QGxpbmsgI2ZvcmNlUmVuZGVyfSBkdXJpbmcgcmVuZGVyaW5nIHByb2Nlc3MsCiAgICAgICAqICogY2FsbGluZyB7QGxpbmsgI2NoYW5nZX0gb3Ige0BsaW5rICNmb3JjZVJlbmRlcn0gaW5zaWRlIG9mCiAgICAgICAqICAge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9kb2N1bWVudH5Eb2N1bWVudCNyZWdpc3RlclBvc3RGaXhlciBwb3N0LWZpeGVyIGZ1bmN0aW9ufS4KICAgICAgICoKICAgICAgICogQGVycm9yIGNhbm5vdC1jaGFuZ2Utdmlldy10cmVlCiAgICAgICAqLwogICAgICB0aHJvdyBuZXcgQ0tFZGl0b3JFcnJvcignY2Fubm90LWNoYW5nZS12aWV3LXRyZWU6ICcgKyAnQXR0ZW1wdGluZyB0byBtYWtlIGNoYW5nZXMgdG8gdGhlIHZpZXcgd2hlbiBpdCBpcyBpbiBhbiBpbmNvcnJlY3Qgc3RhdGU6IHJlbmRlcmluZyBvciBwb3N0LWZpeGVycyBhcmUgaW4gcHJvZ3Jlc3MuICcgKyAnVGhpcyBtYXkgY2F1c2Ugc29tZSB1bmV4cGVjdGVkIGJlaGF2aW9yIGFuZCBpbmNvbnNpc3RlbmN5IGJldHdlZW4gdGhlIERPTSBhbmQgdGhlIHZpZXcuJywgdGhpcyk7CiAgICB9CgogICAgdHJ5IHsKICAgICAgLy8gUmVjdXJzaXZlIGNhbGwgdG8gdmlldy5jaGFuZ2UoKSBtZXRob2QgLSBleGVjdXRlIGxpc3RlbmVyIGltbWVkaWF0ZWx5LgogICAgICBpZiAodGhpcy5fb25nb2luZ0NoYW5nZSkgewogICAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzLl93cml0ZXIpOwogICAgICB9IC8vIFRoaXMgbG9jayB3aWxsIGFzc3VyZSB0aGF0IGFsbCByZWN1cnNpdmUgY2FsbHMgdG8gdmlldy5jaGFuZ2UoKSB3aWxsIGVuZCB1cCBpbiBzYW1lIGJsb2NrIC0gb25lICJyZW5kZXIiCiAgICAgIC8vIGV2ZW50IGZvciBhbGwgbmVzdGVkIGNhbGxzLgoKCiAgICAgIHRoaXMuX29uZ29pbmdDaGFuZ2UgPSB0cnVlOwogICAgICBjb25zdCBjYWxsYmFja1Jlc3VsdCA9IGNhbGxiYWNrKHRoaXMuX3dyaXRlcik7CiAgICAgIHRoaXMuX29uZ29pbmdDaGFuZ2UgPSBmYWxzZTsgLy8gVGhpcyBsb2NrIGlzIHVzZWQgYnkgZWRpdGluZyBjb250cm9sbGVyIHRvIHJlbmRlciBjaGFuZ2VzIGZyb20gb3V0ZXIgbW9zdCBtb2RlbC5jaGFuZ2UoKSBvbmNlLiBBcyBwbHVnaW5zIG1pZ2h0IGNhbGwKICAgICAgLy8gdmlldy5jaGFuZ2UoKSBpbnNpZGUgbW9kZWwuY2hhbmdlKCkgYmxvY2sgLSB0aGlzIHdpbGwgZW5zdXJlcyB0aGF0IHBvc3RmaXhlcnMgYW5kIHJlbmRlcmluZyBhcmUgY2FsbGVkIG9uY2UgYWZ0ZXIgYWxsCiAgICAgIC8vIGNoYW5nZXMuIEFsc28sIHdlIGRvbid0IG5lZWQgdG8gcmVuZGVyIGFueXRoaW5nIGlmIHRoZXJlJ3JlIG5vIGNoYW5nZXMgc2luY2UgbGFzdCByZW5kZXJpbmcuCgogICAgICBpZiAoIXRoaXMuX3JlbmRlcmluZ0Rpc2FibGVkICYmIHRoaXMuX2hhc0NoYW5nZWRTaW5jZVRoZUxhc3RSZW5kZXJpbmcpIHsKICAgICAgICB0aGlzLl9wb3N0Rml4ZXJzSW5Qcm9ncmVzcyA9IHRydWU7CgogICAgICAgIHRoaXMuZG9jdW1lbnQuX2NhbGxQb3N0Rml4ZXJzKHRoaXMuX3dyaXRlcik7CgogICAgICAgIHRoaXMuX3Bvc3RGaXhlcnNJblByb2dyZXNzID0gZmFsc2U7CiAgICAgICAgdGhpcy5maXJlKCdyZW5kZXInKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNhbGxiYWNrUmVzdWx0OwogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIC8vIEBpZiBDS19ERUJVRyAvLyB0aHJvdyBlcnI7CgogICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwogICAgICBDS0VkaXRvckVycm9yLnJldGhyb3dVbmV4cGVjdGVkRXJyb3IoZXJyLCB0aGlzKTsKICAgIH0KICB9CiAgLyoqCiAgICogRm9yY2VzIHJlbmRlcmluZyB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50fkRvY3VtZW50IHZpZXcgZG9jdW1lbnR9IHRvIERPTS4gSWYgYW55IHZpZXcgY2hhbmdlcyBhcmUKICAgKiBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MsIHJlbmRlcmluZyB3aWxsIHN0YXJ0IGFmdGVyIGFsbCB7QGxpbmsgI2NoYW5nZSBjaGFuZ2UgYmxvY2tzfSBhcmUgcHJvY2Vzc2VkLgogICAqCiAgICogTm90ZSB0aGF0IHRoaXMgbWV0aG9kIGlzIGRlZGljYXRlZCBmb3Igc3BlY2lhbCBjYXNlcy4gQWxsIHZpZXcgY2hhbmdlcyBzaG91bGQgYmUgd3JhcHBlZCBpbiB0aGUge0BsaW5rICNjaGFuZ2V9CiAgICogYmxvY2sgYW5kIHRoZSB2aWV3IHdpbGwgYXV0b21hdGljYWxseSBjaGVjayB3aGV0aGVyIGl0IG5lZWRzIHRvIHJlbmRlciBET00gb3Igbm90LgogICAqCiAgICogVGhyb3dzIHtAbGluayBtb2R1bGU6dXRpbHMvY2tlZGl0b3JlcnJvcn5DS0VkaXRvckVycm9yIENLRWRpdG9yRXJyb3J9IGBhcHBseWluZy12aWV3LWNoYW5nZXMtb24tcmVuZGVyaW5nYCB3aGVuCiAgICogdHJ5aW5nIHRvIHJlLXJlbmRlciB3aGVuIHJlbmRlcmluZyB0byBET00gaGFzIGFscmVhZHkgc3RhcnRlZC4KICAgKi8KCgogIGZvcmNlUmVuZGVyKCkgewogICAgdGhpcy5faGFzQ2hhbmdlZFNpbmNlVGhlTGFzdFJlbmRlcmluZyA9IHRydWU7CiAgICB0aGlzLmNoYW5nZSgoKSA9PiB7fSk7CiAgfQogIC8qKgogICAqIERlc3Ryb3lzIHRoaXMgaW5zdGFuY2UuIE1ha2VzIHN1cmUgdGhhdCBhbGwgb2JzZXJ2ZXJzIGFyZSBkZXN0cm95ZWQgYW5kIGxpc3RlbmVycyByZW1vdmVkLgogICAqLwoKCiAgZGVzdHJveSgpIHsKICAgIGZvciAoY29uc3Qgb2JzZXJ2ZXIgb2YgdGhpcy5fb2JzZXJ2ZXJzLnZhbHVlcygpKSB7CiAgICAgIG9ic2VydmVyLmRlc3Ryb3koKTsKICAgIH0KCiAgICB0aGlzLmRvY3VtZW50LmRlc3Ryb3koKTsKICAgIHRoaXMuc3RvcExpc3RlbmluZygpOwogIH0KICAvKioKICAgKiBDcmVhdGVzIHBvc2l0aW9uIGF0IHRoZSBnaXZlbiBsb2NhdGlvbi4gVGhlIGxvY2F0aW9uIGNhbiBiZSBzcGVjaWZpZWQgYXM6CiAgICoKICAgKiAqIGEge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9wb3NpdGlvbn5Qb3NpdGlvbiBwb3NpdGlvbn0sCiAgICogKiBwYXJlbnQgZWxlbWVudCBhbmQgb2Zmc2V0IChvZmZzZXQgZGVmYXVsdHMgdG8gYDBgKSwKICAgKiAqIHBhcmVudCBlbGVtZW50IGFuZCBgJ2VuZCdgIChzZXRzIHBvc2l0aW9uIGF0IHRoZSBlbmQgb2YgdGhhdCBlbGVtZW50KSwKICAgKiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvaXRlbX5JdGVtIHZpZXcgaXRlbX0gYW5kIGAnYmVmb3JlJ2Agb3IgYCdhZnRlcidgIChzZXRzIHBvc2l0aW9uIGJlZm9yZSBvciBhZnRlciBnaXZlbiB2aWV3IGl0ZW0pLgogICAqCiAgICogVGhpcyBtZXRob2QgaXMgYSBzaG9ydGN1dCB0byBvdGhlciBjb25zdHJ1Y3RvcnMgc3VjaCBhczoKICAgKgogICAqICoge0BsaW5rICNjcmVhdGVQb3NpdGlvbkJlZm9yZX0sCiAgICogKiB7QGxpbmsgI2NyZWF0ZVBvc2l0aW9uQWZ0ZXJ9LAogICAqCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvaXRlbX5JdGVtfG1vZHVsZTplbmdpbmUvbW9kZWwvcG9zaXRpb25+UG9zaXRpb259IGl0ZW1PclBvc2l0aW9uCiAgICogQHBhcmFtIHtOdW1iZXJ8J2VuZCd8J2JlZm9yZSd8J2FmdGVyJ30gW29mZnNldF0gT2Zmc2V0IG9yIG9uZSBvZiB0aGUgZmxhZ3MuIFVzZWQgb25seSB3aGVuCiAgICogZmlyc3QgcGFyYW1ldGVyIGlzIGEge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9pdGVtfkl0ZW0gdmlldyBpdGVtfS4KICAgKi8KCgogIGNyZWF0ZVBvc2l0aW9uQXQoaXRlbU9yUG9zaXRpb24sIG9mZnNldCkgewogICAgcmV0dXJuIFBvc2l0aW9uLl9jcmVhdGVBdChpdGVtT3JQb3NpdGlvbiwgb2Zmc2V0KTsKICB9CiAgLyoqCiAgICogQ3JlYXRlcyBhIG5ldyBwb3NpdGlvbiBhZnRlciBnaXZlbiB2aWV3IGl0ZW0uCiAgICoKICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9pdGVtfkl0ZW19IGl0ZW0gVmlldyBpdGVtIGFmdGVyIHdoaWNoIHRoZSBwb3NpdGlvbiBzaG91bGQgYmUgbG9jYXRlZC4KICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS92aWV3L3Bvc2l0aW9uflBvc2l0aW9ufQogICAqLwoKCiAgY3JlYXRlUG9zaXRpb25BZnRlcihpdGVtKSB7CiAgICByZXR1cm4gUG9zaXRpb24uX2NyZWF0ZUFmdGVyKGl0ZW0pOwogIH0KICAvKioKICAgKiBDcmVhdGVzIGEgbmV3IHBvc2l0aW9uIGJlZm9yZSBnaXZlbiB2aWV3IGl0ZW0uCiAgICoKICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9pdGVtfkl0ZW19IGl0ZW0gVmlldyBpdGVtIGJlZm9yZSB3aGljaCB0aGUgcG9zaXRpb24gc2hvdWxkIGJlIGxvY2F0ZWQuCiAgICogQHJldHVybnMge21vZHVsZTplbmdpbmUvdmlldy9wb3NpdGlvbn5Qb3NpdGlvbn0KICAgKi8KCgogIGNyZWF0ZVBvc2l0aW9uQmVmb3JlKGl0ZW0pIHsKICAgIHJldHVybiBQb3NpdGlvbi5fY3JlYXRlQmVmb3JlKGl0ZW0pOwogIH0KICAvKioKICAgKiBDcmVhdGVzIGEgcmFuZ2Ugc3Bhbm5pbmcgZnJvbSBgc3RhcnRgIHBvc2l0aW9uIHRvIGBlbmRgIHBvc2l0aW9uLgogICAqCiAgICogKipOb3RlOioqIFRoaXMgZmFjdG9yeSBtZXRob2QgY3JlYXRlcyBpdCdzIG93biB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3Bvc2l0aW9uflBvc2l0aW9ufSBpbnN0YW5jZXMgYmFzaW5nIG9uIHBhc3NlZCB2YWx1ZXMuCiAgICoKICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9wb3NpdGlvbn5Qb3NpdGlvbn0gc3RhcnQgU3RhcnQgcG9zaXRpb24uCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvcG9zaXRpb25+UG9zaXRpb259IFtlbmRdIEVuZCBwb3NpdGlvbi4gSWYgbm90IHNldCwgcmFuZ2Ugd2lsbCBiZSBjb2xsYXBzZWQgYXQgYHN0YXJ0YCBwb3NpdGlvbi4KICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS92aWV3L3JhbmdlflJhbmdlfQogICAqLwoKCiAgY3JlYXRlUmFuZ2Uoc3RhcnQsIGVuZCkgewogICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydCwgZW5kKTsKICB9CiAgLyoqCiAgICogQ3JlYXRlcyBhIHJhbmdlIHRoYXQgc3RhcnRzIGJlZm9yZSBnaXZlbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2l0ZW1+SXRlbSB2aWV3IGl0ZW19IGFuZCBlbmRzIGFmdGVyIGl0LgogICAqCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvaXRlbX5JdGVtfSBpdGVtCiAgICogQHJldHVybnMge21vZHVsZTplbmdpbmUvdmlldy9yYW5nZX5SYW5nZX0KICAgKi8KCgogIGNyZWF0ZVJhbmdlT24oaXRlbSkgewogICAgcmV0dXJuIFJhbmdlLl9jcmVhdGVPbihpdGVtKTsKICB9CiAgLyoqCiAgICogQ3JlYXRlcyBhIHJhbmdlIGluc2lkZSBhbiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2VsZW1lbnR+RWxlbWVudCBlbGVtZW50fSB3aGljaCBzdGFydHMgYmVmb3JlIHRoZSBmaXJzdCBjaGlsZCBvZgogICAqIHRoYXQgZWxlbWVudCBhbmQgZW5kcyBhZnRlciB0aGUgbGFzdCBjaGlsZCBvZiB0aGF0IGVsZW1lbnQuCiAgICoKICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9lbGVtZW50fkVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB3aGljaCBpcyBhIHBhcmVudCBmb3IgdGhlIHJhbmdlLgogICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL3ZpZXcvcmFuZ2V+UmFuZ2V9CiAgICovCgoKICBjcmVhdGVSYW5nZUluKGVsZW1lbnQpIHsKICAgIHJldHVybiBSYW5nZS5fY3JlYXRlSW4oZWxlbWVudCk7CiAgfQogIC8qKgogICBDcmVhdGVzIG5ldyB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L3NlbGVjdGlvbn5TZWxlY3Rpb259IGluc3RhbmNlLgogICAqCiAgICogCQkvLyBDcmVhdGVzIGVtcHR5IHNlbGVjdGlvbiB3aXRob3V0IHJhbmdlcy4KICAgKgkJY29uc3Qgc2VsZWN0aW9uID0gdmlldy5jcmVhdGVTZWxlY3Rpb24oKTsKICAgKgogICAqCQkvLyBDcmVhdGVzIHNlbGVjdGlvbiBhdCB0aGUgZ2l2ZW4gcmFuZ2UuCiAgICoJCWNvbnN0IHJhbmdlID0gdmlldy5jcmVhdGVSYW5nZSggc3RhcnQsIGVuZCApOwogICAqCQljb25zdCBzZWxlY3Rpb24gPSB2aWV3LmNyZWF0ZVNlbGVjdGlvbiggcmFuZ2UgKTsKICAgKgogICAqCQkvLyBDcmVhdGVzIHNlbGVjdGlvbiBhdCB0aGUgZ2l2ZW4gcmFuZ2VzCiAgICogCQljb25zdCByYW5nZXMgPSBbIHZpZXcuY3JlYXRlUmFuZ2UoIHN0YXJ0MSwgZW5kMiApLCB2aWV3LmNyZWF0ZVJhbmdlKCBzdGFyMiwgZW5kMiApIF07CiAgICoJCWNvbnN0IHNlbGVjdGlvbiA9IHZpZXcuY3JlYXRlU2VsZWN0aW9uKCByYW5nZXMgKTsKICAgKgogICAqCQkvLyBDcmVhdGVzIHNlbGVjdGlvbiBmcm9tIHRoZSBvdGhlciBzZWxlY3Rpb24uCiAgICoJCWNvbnN0IG90aGVyU2VsZWN0aW9uID0gdmlldy5jcmVhdGVTZWxlY3Rpb24oKTsKICAgKgkJY29uc3Qgc2VsZWN0aW9uID0gdmlldy5jcmVhdGVTZWxlY3Rpb24oIG90aGVyU2VsZWN0aW9uICk7CiAgICoKICAgKgkJLy8gQ3JlYXRlcyBzZWxlY3Rpb24gZnJvbSB0aGUgZG9jdW1lbnQgc2VsZWN0aW9uLgogICAqCQljb25zdCBzZWxlY3Rpb24gPSB2aWV3LmNyZWF0ZVNlbGVjdGlvbiggZWRpdG9yLmVkaXRpbmcudmlldy5kb2N1bWVudC5zZWxlY3Rpb24gKTsKICAgKgogICAqIAkJLy8gQ3JlYXRlcyBzZWxlY3Rpb24gYXQgdGhlIGdpdmVuIHBvc2l0aW9uLgogICAqCQljb25zdCBwb3NpdGlvbiA9IHZpZXcuY3JlYXRlUG9zaXRpb25Gcm9tUGF0aCggcm9vdCwgcGF0aCApOwogICAqCQljb25zdCBzZWxlY3Rpb24gPSB2aWV3LmNyZWF0ZVNlbGVjdGlvbiggcG9zaXRpb24gKTsKICAgKgogICAqCQkvLyBDcmVhdGVzIGNvbGxhcHNlZCBzZWxlY3Rpb24gYXQgdGhlIHBvc2l0aW9uIG9mIGdpdmVuIGl0ZW0gYW5kIG9mZnNldC4KICAgKgkJY29uc3QgcGFyYWdyYXBoID0gdmlldy5jcmVhdGVDb250YWluZXJFbGVtZW50KCAncGFyYWdyYXBoJyApOwogICAqCQljb25zdCBzZWxlY3Rpb24gPSB2aWV3LmNyZWF0ZVNlbGVjdGlvbiggcGFyYWdyYXBoLCBvZmZzZXQgKTsKICAgKgogICAqCQkvLyBDcmVhdGVzIGEgcmFuZ2UgaW5zaWRlIGFuIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvZWxlbWVudH5FbGVtZW50IGVsZW1lbnR9IHdoaWNoIHN0YXJ0cyBiZWZvcmUgdGhlCiAgICoJCS8vIGZpcnN0IGNoaWxkIG9mIHRoYXQgZWxlbWVudCBhbmQgZW5kcyBhZnRlciB0aGUgbGFzdCBjaGlsZCBvZiB0aGF0IGVsZW1lbnQuCiAgICoJCWNvbnN0IHNlbGVjdGlvbiA9IHZpZXcuY3JlYXRlU2VsZWN0aW9uKCBwYXJhZ3JhcGgsICdpbicgKTsKICAgKgogICAqCQkvLyBDcmVhdGVzIGEgcmFuZ2Ugb24gYW4ge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9pdGVtfkl0ZW0gaXRlbX0gd2hpY2ggc3RhcnRzIGJlZm9yZSB0aGUgaXRlbSBhbmQgZW5kcwogICAqCQkvLyBqdXN0IGFmdGVyIHRoZSBpdGVtLgogICAqCQljb25zdCBzZWxlY3Rpb24gPSB2aWV3LmNyZWF0ZVNlbGVjdGlvbiggcGFyYWdyYXBoLCAnb24nICk7CiAgICoKICAgKiBgU2VsZWN0aW9uYCdzIGZhY3RvcnkgbWV0aG9kIGFsbG93IHBhc3NpbmcgYWRkaXRpb25hbCBvcHRpb25zIChgYmFja3dhcmRgLCBgZmFrZWAgYW5kIGBsYWJlbGApIGFzIHRoZSBsYXN0IGFyZ3VtZW50LgogICAqCiAgICoJCS8vIENyZWF0ZXMgYmFja3dhcmQgc2VsZWN0aW9uLgogICAqCQljb25zdCBzZWxlY3Rpb24gPSB2aWV3LmNyZWF0ZVNlbGVjdGlvbiggcmFuZ2UsIHsgYmFja3dhcmQ6IHRydWUgfSApOwogICAqCiAgICogRmFrZSBzZWxlY3Rpb24gZG9lcyBub3QgcmVuZGVyIGFzIGJyb3dzZXIgbmF0aXZlIHNlbGVjdGlvbiBvdmVyIHNlbGVjdGVkIGVsZW1lbnRzIGFuZCBpcyBoaWRkZW4gdG8gdGhlIHVzZXIuCiAgICogVGhpcyB3YXksIG5vIG5hdGl2ZSBzZWxlY3Rpb24gVUkgYXJ0aWZhY3RzIGFyZSBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIgYW5kIHNlbGVjdGlvbiBvdmVyIGVsZW1lbnRzIGNhbiBiZQogICAqIHJlcHJlc2VudGVkIGluIG90aGVyIHdheSwgZm9yIGV4YW1wbGUgYnkgYXBwbHlpbmcgcHJvcGVyIENTUyBjbGFzcy4KICAgKgogICAqIEFkZGl0aW9uYWxseSBmYWtlJ3Mgc2VsZWN0aW9uIGxhYmVsIGNhbiBiZSBwcm92aWRlZC4gSXQgd2lsbCBiZSB1c2VkIHRvIGRlc2NyaWJlIGZha2Ugc2VsZWN0aW9uIGluIERPTQogICAqIChhbmQgYmUgIHByb3Blcmx5IGhhbmRsZWQgYnkgc2NyZWVuIHJlYWRlcnMpLgogICAqCiAgICoJCS8vIENyZWF0ZXMgZmFrZSBzZWxlY3Rpb24gd2l0aCBsYWJlbC4KICAgKgkJY29uc3Qgc2VsZWN0aW9uID0gdmlldy5jcmVhdGVTZWxlY3Rpb24oIHJhbmdlLCB7IGZha2U6IHRydWUsIGxhYmVsOiAnZm9vJyB9ICk7CiAgICoKICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9zZWxlY3Rpb25+U2VsZWN0YWJsZX0gW3NlbGVjdGFibGU9bnVsbF0KICAgKiBAcGFyYW0ge051bWJlcnwnYmVmb3JlJ3wnZW5kJ3wnYWZ0ZXInfCdvbid8J2luJ30gW3BsYWNlT3JPZmZzZXRdIE9mZnNldCBvciBwbGFjZSB3aGVuIHNlbGVjdGFibGUgaXMgYW4gYEl0ZW1gLgogICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10KICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmJhY2t3YXJkXSBTZXRzIHRoaXMgc2VsZWN0aW9uIGluc3RhbmNlIHRvIGJlIGJhY2t3YXJkLgogICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZmFrZV0gU2V0cyB0aGlzIHNlbGVjdGlvbiBpbnN0YW5jZSB0byBiZSBtYXJrZWQgYXMgYGZha2VgLgogICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5sYWJlbF0gTGFiZWwgZm9yIHRoZSBmYWtlIHNlbGVjdGlvbi4KICAgKiBAcmV0dXJucyB7bW9kdWxlOmVuZ2luZS92aWV3L3NlbGVjdGlvbn5TZWxlY3Rpb259CiAgICovCgoKICBjcmVhdGVTZWxlY3Rpb24oc2VsZWN0YWJsZSwgcGxhY2VPck9mZnNldCwgb3B0aW9ucykgewogICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc2VsZWN0YWJsZSwgcGxhY2VPck9mZnNldCwgb3B0aW9ucyk7CiAgfQogIC8qKgogICAqIERpc2FibGVzIG9yIGVuYWJsZXMgcmVuZGVyaW5nLiBJZiB0aGUgZmxhZyBpcyBzZXQgdG8gYHRydWVgIHRoZW4gdGhlIHJlbmRlcmluZyB3aWxsIGJlIGRpc2FibGVkLgogICAqIElmIHRoZSBmbGFnIGlzIHNldCB0byBgZmFsc2VgIGFuZCBpZiB0aGVyZSB3YXMgc29tZSBjaGFuZ2UgaW4gdGhlIG1lYW50aW1lLCB0aGVuIHRoZSByZW5kZXJpbmcgYWN0aW9uIHdpbGwgYmUgcGVyZm9ybWVkLgogICAqCiAgICogQHByb3RlY3RlZAogICAqIEBwYXJhbSB7Qm9vbGVhbn0gZmxhZyBBIGZsYWcgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHJlbmRlcmluZyBzaG91bGQgYmUgZGlzYWJsZWQuCiAgICovCgoKICBfZGlzYWJsZVJlbmRlcmluZyhmbGFnKSB7CiAgICB0aGlzLl9yZW5kZXJpbmdEaXNhYmxlZCA9IGZsYWc7CgogICAgaWYgKGZsYWcgPT0gZmFsc2UpIHsKICAgICAgLy8gUmVuZGVyIHdoZW4geW91IHN0b3AgYmxvY2tpbmcgcmVuZGVyaW5nLgogICAgICB0aGlzLmNoYW5nZSgoKSA9PiB7fSk7CiAgICB9CiAgfQogIC8qKgogICAqIFJlbmRlcnMgYWxsIGNoYW5nZXMuIEluIG9yZGVyIHRvIGF2b2lkIHRyaWdnZXJpbmcgdGhlIG9ic2VydmVycyAoZS5nLiBtdXRhdGlvbnMpIGFsbCBvYnNlcnZlcnMgYXJlIGRpc2FibGVkCiAgICogYmVmb3JlIHJlbmRlcmluZyBhbmQgcmUtZW5hYmxlZCBhZnRlciB0aGF0LgogICAqCiAgICogQHByaXZhdGUKICAgKi8KCgogIF9yZW5kZXIoKSB7CiAgICB0aGlzLmlzUmVuZGVyaW5nSW5Qcm9ncmVzcyA9IHRydWU7CiAgICB0aGlzLmRpc2FibGVPYnNlcnZlcnMoKTsKCiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXIoKTsKCiAgICB0aGlzLmVuYWJsZU9ic2VydmVycygpOwogICAgdGhpcy5pc1JlbmRlcmluZ0luUHJvZ3Jlc3MgPSBmYWxzZTsKICB9CiAgLyoqCiAgICogRmlyZWQgYWZ0ZXIgYSB0b3Btb3N0IHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvdmlld35WaWV3I2NoYW5nZSBjaGFuZ2UgYmxvY2t9IGFuZCBhbGwKICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50fkRvY3VtZW50I3JlZ2lzdGVyUG9zdEZpeGVyIHBvc3QtZml4ZXJzfSBhcmUgZXhlY3V0ZWQuCiAgICoKICAgKiBBY3R1YWwgcmVuZGVyaW5nIGlzIHBlcmZvcm1lZCBhcyBhIGZpcnN0IGxpc3RlbmVyIG9uICdub3JtYWwnIHByaW9yaXR5LgogICAqCiAgICoJCXZpZXcub24oICdyZW5kZXInLCAoKSA9PiB7CiAgICoJCQkvLyBSZW5kZXJpbmcgdG8gdGhlIERPTSBpcyBjb21wbGV0ZS4KICAgKgkJfSApOwogICAqCiAgICogVGhpcyBldmVudCBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byB1cGRhdGUgaW50ZXJmYWNlIGVsZW1lbnRzIGFmdGVyIHRoZSByZW5kZXJpbmcsIGUuZy4gcG9zaXRpb24gb2YgdGhlCiAgICogYmFsbG9vbiBwYW5lbC4gSWYgeW91IHdhbnRzIHRvIGNoYW5nZSB2aWV3IHN0cnVjdHVyZSB1c2UKICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50fkRvY3VtZW50I3JlZ2lzdGVyUG9zdEZpeGVyIHBvc3QtZml4ZXJzfS4KICAgKgogICAqIEBldmVudCBtb2R1bGU6ZW5naW5lL3ZpZXcvdmlld35WaWV3I2V2ZW50OnJlbmRlcgogICAqLwoKCn0KbWl4KFZpZXcsIE9ic2VydmFibGVNaXhpbik7"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/view.js"],"names":["Document","DowncastWriter","Renderer","DomConverter","Position","Range","Selection","MutationObserver","KeyObserver","FakeSelectionObserver","SelectionObserver","FocusObserver","CompositionObserver","InputObserver","ObservableMixin","mix","scrollViewportToShowTarget","injectUiElementHandling","injectQuirksHandling","CKEditorError","env","View","constructor","document","domConverter","domRoots","Map","set","_renderer","selection","bind","to","_initialDomRootAttributes","WeakMap","_observers","_ongoingChange","_postFixersInProgress","_renderingDisabled","_hasChangedSinceTheLastRendering","_writer","addObserver","isAndroid","on","_render","fire","listenTo","attachDomRoot","domRoot","name","viewRoot","getRoot","_name","tagName","toLowerCase","initialDomRootAttributes","value","Array","from","attributes","addClass","split","setAttribute","updateContenteditableAttribute","isReadOnly","removeClass","bindElements","markToSync","domDocuments","add","ownerDocument","evt","node","change","observer","values","observe","detachDomRoot","get","forEach","removeAttribute","attribute","delete","unbindDomElement","getDomRoot","Observer","domElement","enable","getObserver","disableObservers","disable","enableObservers","scrollToTheSelection","range","getFirstRange","target","viewRangeToDom","viewportOffset","focus","isFocused","editable","editableElement","forceRender","callback","isRenderingInProgress","callbackResult","_callPostFixers","err","rethrowUnexpectedError","destroy","stopListening","createPositionAt","itemOrPosition","offset","_createAt","createPositionAfter","item","_createAfter","createPositionBefore","_createBefore","createRange","start","end","createRangeOn","_createOn","createRangeIn","element","_createIn","createSelection","selectable","placeOrOffset","options","_disableRendering","flag","render"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/view\n */\n\nimport Document from './document';\nimport DowncastWriter from './downcastwriter';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\n\nimport MutationObserver from './observer/mutationobserver';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\nimport InputObserver from './observer/inputobserver';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n *\t\tview.change( writer => {\n *\t\t\twriter.insert( position, writer.createText( 'foo' ) );\n *\t\t} );\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View {\n\tconstructor() {\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = new Document();\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} used by\n\t\t * {@link module:engine/view/view~View#_renderer renderer}\n\t\t * and {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = new DomConverter();\n\n\t\t/**\n\t\t * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Map.<String, HTMLElement>}\n\t\t */\n\t\tthis.domRoots = new Map();\n\n\t\t/**\n\t\t * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isRenderingInProgress\n\t\t */\n\t\tthis.set( 'isRenderingInProgress', false );\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\n\t\t *\n\t\t * @protected\n\t\t * @type {module:engine/view/renderer~Renderer}\n\t\t */\n\t\tthis._renderer = new Renderer( this.domConverter, this.document.selection );\n\t\tthis._renderer.bind( 'isFocused' ).to( this.document );\n\n\t\t/**\n\t\t * A DOM root attributes cache. It saves the initial values of DOM root attributes before the DOM element\n\t\t * is {@link module:engine/view/view~View#attachDomRoot attached} to the view so later on, when\n\t\t * the view is destroyed ({@link module:engine/view/view~View#detachDomRoot}), they can be easily restored.\n\t\t * This way, the DOM element can go back to the (clean) state as if the editing view never used it.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap.<HTMLElement,Object>}\n\t\t */\n\t\tthis._initialDomRootAttributes = new WeakMap();\n\n\t\t/**\n\t\t * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<Function, module:engine/view/observer/observer~Observer>}\n\t\t */\n\t\tthis._observers = new Map();\n\n\t\t/**\n\t\t * Is set to `true` when {@link #change view changes} are currently in progress.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._ongoingChange = false;\n\n\t\t/**\n\t\t * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._postFixersInProgress = false;\n\n\t\t/**\n\t\t * Internal flag to temporary disable rendering. See the usage in the {@link #_disableRendering}.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._renderingDisabled = false;\n\n\t\t/**\n\t\t * Internal flag that disables rendering when there are no changes since the last rendering.\n\t\t * It stores information about changed selection and changed elements from attached document roots.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._hasChangedSinceTheLastRendering = false;\n\n\t\t/**\n\t\t * DowncastWriter instance used in {@link #change change method} callbacks.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/view/downcastwriter~DowncastWriter}\n\t\t */\n\t\tthis._writer = new DowncastWriter( this.document );\n\n\t\t// Add default observers.\n\t\tthis.addObserver( MutationObserver );\n\t\tthis.addObserver( SelectionObserver );\n\t\tthis.addObserver( FocusObserver );\n\t\tthis.addObserver( KeyObserver );\n\t\tthis.addObserver( FakeSelectionObserver );\n\t\tthis.addObserver( CompositionObserver );\n\n\t\tif ( env.isAndroid ) {\n\t\t\tthis.addObserver( InputObserver );\n\t\t}\n\n\t\t// Inject quirks handlers.\n\t\tinjectQuirksHandling( this );\n\t\tinjectUiElementHandling( this );\n\n\t\t// Use 'normal' priority so that rendering is performed as first when using that priority.\n\t\tthis.on( 'render', () => {\n\t\t\tthis._render();\n\n\t\t\t// Informs that layout has changed after render.\n\t\t\tthis.document.fire( 'layoutChanged' );\n\n\t\t\t// Reset the `_hasChangedSinceTheLastRendering` flag after rendering.\n\t\t\tthis._hasChangedSinceTheLastRendering = false;\n\t\t} );\n\n\t\t// Listen to the document selection changes directly.\n\t\tthis.listenTo( this.document.selection, 'change', () => {\n\t\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches a DOM root element to the view element and enable all observers on that element.\n\t * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized\n\t * with the view what means that all child nodes will be removed and replaced with content of the view root.\n\t *\n\t * This method also will change view element name as the same as tag name of given dom root.\n\t * Name is always transformed to lower case.\n\t *\n\t * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.\n\t *\n\t * @param {Element} domRoot DOM root element.\n\t * @param {String} [name='main'] Name of the root.\n\t */\n\tattachDomRoot( domRoot, name = 'main' ) {\n\t\tconst viewRoot = this.document.getRoot( name );\n\n\t\t// Set view root name the same as DOM root tag name.\n\t\tviewRoot._name = domRoot.tagName.toLowerCase();\n\n\t\tconst initialDomRootAttributes = {};\n\n\t\t// 1. Copy and cache the attributes to remember the state of the element before attaching.\n\t\t//    The cached attributes will be restored in detachDomRoot() so the element goes to the\n\t\t//    clean state as if the editing view never used it.\n\t\t// 2. Apply the attributes using the view writer, so they all go under the control of the engine.\n\t\t//    The editing view takes over the attribute management completely because various\n\t\t//    features (e.g. addPlaceholder()) require dynamic changes of those attributes and they\n\t\t//    cannot be managed by the engine and the UI library at the same time.\n\t\tfor ( const { name, value } of Array.from( domRoot.attributes ) ) {\n\t\t\tinitialDomRootAttributes[ name ] = value;\n\n\t\t\t// Do not use writer.setAttribute() for the class attribute. The EditableUIView class\n\t\t\t// and its descendants could have already set some using the writer.addClass() on the view\n\t\t\t// document root. They haven't been rendered yet so they are not present in the DOM root.\n\t\t\t// Using writer.setAttribute( 'class', ... ) would override them completely.\n\t\t\tif ( name === 'class' ) {\n\t\t\t\tthis._writer.addClass( value.split( ' ' ), viewRoot );\n\t\t\t} else {\n\t\t\t\tthis._writer.setAttribute( name, value, viewRoot );\n\t\t\t}\n\t\t}\n\n\t\tthis._initialDomRootAttributes.set( domRoot, initialDomRootAttributes );\n\n\t\tconst updateContenteditableAttribute = () => {\n\t\t\tthis._writer.setAttribute( 'contenteditable', !viewRoot.isReadOnly, viewRoot );\n\n\t\t\tif ( viewRoot.isReadOnly ) {\n\t\t\t\tthis._writer.addClass( 'ck-read-only', viewRoot );\n\t\t\t} else {\n\t\t\t\tthis._writer.removeClass( 'ck-read-only', viewRoot );\n\t\t\t}\n\t\t};\n\n\t\t// Set initial value.\n\t\tupdateContenteditableAttribute();\n\n\t\tthis.domRoots.set( name, domRoot );\n\t\tthis.domConverter.bindElements( domRoot, viewRoot );\n\t\tthis._renderer.markToSync( 'children', viewRoot );\n\t\tthis._renderer.markToSync( 'attributes', viewRoot );\n\t\tthis._renderer.domDocuments.add( domRoot.ownerDocument );\n\n\t\tviewRoot.on( 'change:children', ( evt, node ) => this._renderer.markToSync( 'children', node ) );\n\t\tviewRoot.on( 'change:attributes', ( evt, node ) => this._renderer.markToSync( 'attributes', node ) );\n\t\tviewRoot.on( 'change:text', ( evt, node ) => this._renderer.markToSync( 'text', node ) );\n\t\tviewRoot.on( 'change:isReadOnly', () => this.change( updateContenteditableAttribute ) );\n\n\t\tviewRoot.on( 'change', () => {\n\t\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\t} );\n\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.observe( domRoot, name );\n\t\t}\n\t}\n\n\t/**\n\t * Detaches a DOM root element from the view element and restores its attributes to the state before\n\t * {@link #attachDomRoot `attachDomRoot()`}.\n\t *\n\t * @param {String} name Name of the root to detach.\n\t */\n\tdetachDomRoot( name ) {\n\t\tconst domRoot = this.domRoots.get( name );\n\n\t\t// Remove all root attributes so the DOM element is \"bare\".\n\t\tArray.from( domRoot.attributes ).forEach( ( { name } ) => domRoot.removeAttribute( name ) );\n\n\t\tconst initialDomRootAttributes = this._initialDomRootAttributes.get( domRoot );\n\n\t\t// Revert all view root attributes back to the state before attachDomRoot was called.\n\t\tfor ( const attribute in initialDomRootAttributes ) {\n\t\t\tdomRoot.setAttribute( attribute, initialDomRootAttributes[ attribute ] );\n\t\t}\n\n\t\tthis.domRoots.delete( name );\n\t\tthis.domConverter.unbindDomElement( domRoot );\n\t}\n\n\t/**\n\t * Gets DOM root element.\n\t *\n\t * @param {String} [name='main']  Name of the root.\n\t * @returns {Element} DOM root element instance.\n\t */\n\tgetDomRoot( name = 'main' ) {\n\t\treturn this.domRoots.get( name );\n\t}\n\n\t/**\n\t * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n\t * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n\t * {@link #domRoots DOM roots}.\n\t *\n\t * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n\t * when registered for the first time. This means that features and other components can register a single observer\n\t * multiple times without caring whether it has been already added or not.\n\t *\n\t * @param {Function} Observer The constructor of an observer to add.\n\t * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n\t * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\n\t */\n\taddObserver( Observer ) {\n\t\tlet observer = this._observers.get( Observer );\n\n\t\tif ( observer ) {\n\t\t\treturn observer;\n\t\t}\n\n\t\tobserver = new Observer( this );\n\n\t\tthis._observers.set( Observer, observer );\n\n\t\tfor ( const [ name, domElement ] of this.domRoots ) {\n\t\t\tobserver.observe( domElement, name );\n\t\t}\n\n\t\tobserver.enable();\n\n\t\treturn observer;\n\t}\n\n\t/**\n\t * Returns observer of the given type or `undefined` if such observer has not been added yet.\n\t *\n\t * @param {Function} Observer The constructor of an observer to get.\n\t * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\n\t */\n\tgetObserver( Observer ) {\n\t\treturn this._observers.get( Observer );\n\t}\n\n\t/**\n\t * Disables all added observers.\n\t */\n\tdisableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.disable();\n\t\t}\n\t}\n\n\t/**\n\t * Enables all added observers.\n\t */\n\tenableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.enable();\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n\t * caret, if not already visible to the user.\n\t */\n\tscrollToTheSelection() {\n\t\tconst range = this.document.selection.getFirstRange();\n\n\t\tif ( range ) {\n\t\t\tscrollViewportToShowTarget( {\n\t\t\t\ttarget: this.domConverter.viewRangeToDom( range ),\n\t\t\t\tviewportOffset: 20\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n\t * that is currently having selection inside.\n\t */\n\tfocus() {\n\t\tif ( !this.document.isFocused ) {\n\t\t\tconst editable = this.document.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t\tthis.forceRender();\n\t\t\t} else {\n\t\t\t\t// Before focusing view document, selection should be placed inside one of the view's editables.\n\t\t\t\t// Normally its selection will be converted from model document (which have default selection), but\n\t\t\t\t// when using view document on its own, we need to manually place selection before focusing it.\n\t\t\t\t//\n\t\t\t\t// @if CK_DEBUG // console.warn( 'There is no selection in any editable to focus.' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n\t * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed\n\t * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows\n\t * to nest calls one inside another and still performs a single rendering after all those changes are made.\n\t * It also returns the return value of its callback.\n\t *\n\t *\t\tconst text = view.change( writer => {\n\t *\t\t\tconst newText = writer.createText( 'foo' );\n\t *\t\t\twriter.insert( position1, newText );\n\t *\n\t *\t\t\tview.change( writer => {\n\t *\t\t\t\twriter.insert( position2, writer.createText( 'bar' ) );\n\t *\t\t\t} );\n\t *\n\t * \t\t\twriter.remove( range );\n\t *\n\t * \t\t\treturn newText;\n\t *\t\t} );\n\t *\n\t * When the outermost change block is done and rendering to the DOM is over the\n\t * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n\t *\n\t * This method throws a `applying-view-changes-on-rendering` error when\n\t * the change block is used after rendering to the DOM has started.\n\t *\n\t * @param {Function} callback Callback function which may modify the view.\n\t * @returns {*} Value returned by the callback.\n\t */\n\tchange( callback ) {\n\t\tif ( this.isRenderingInProgress || this._postFixersInProgress ) {\n\t\t\t/**\n\t\t\t * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n\t\t\t * cause some unexpected behaviour and inconsistency between the DOM and the view.\n\t\t\t * This may be caused by:\n\t\t\t *\n\t\t\t * * calling {@link #change} or {@link #forceRender} during rendering process,\n\t\t\t * * calling {@link #change} or {@link #forceRender} inside of\n\t\t\t *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n\t\t\t *\n\t\t\t * @error cannot-change-view-tree\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'cannot-change-view-tree: ' +\n\t\t\t\t'Attempting to make changes to the view when it is in an incorrect state: rendering or post-fixers are in progress. ' +\n\t\t\t\t'This may cause some unexpected behavior and inconsistency between the DOM and the view.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\t// Recursive call to view.change() method - execute listener immediately.\n\t\t\tif ( this._ongoingChange ) {\n\t\t\t\treturn callback( this._writer );\n\t\t\t}\n\n\t\t\t// This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n\t\t\t// event for all nested calls.\n\t\t\tthis._ongoingChange = true;\n\t\t\tconst callbackResult = callback( this._writer );\n\t\t\tthis._ongoingChange = false;\n\n\t\t\t// This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n\t\t\t// view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all\n\t\t\t// changes. Also, we don't need to render anything if there're no changes since last rendering.\n\t\t\tif ( !this._renderingDisabled && this._hasChangedSinceTheLastRendering ) {\n\t\t\t\tthis._postFixersInProgress = true;\n\t\t\t\tthis.document._callPostFixers( this._writer );\n\t\t\t\tthis._postFixersInProgress = false;\n\n\t\t\t\tthis.fire( 'render' );\n\t\t\t}\n\n\t\t\treturn callbackResult;\n\t\t} catch ( err ) {\n\t\t\t// @if CK_DEBUG // throw err;\n\t\t\t/* istanbul ignore next */\n\t\t\tCKEditorError.rethrowUnexpectedError( err, this );\n\t\t}\n\t}\n\n\t/**\n\t * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n\t * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n\t *\n\t * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}\n\t * block and the view will automatically check whether it needs to render DOM or not.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n\t * trying to re-render when rendering to DOM has already started.\n\t */\n\tforceRender() {\n\t\tthis._hasChangedSinceTheLastRendering = true;\n\t\tthis.change( () => {} );\n\t}\n\n\t/**\n\t * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n\t */\n\tdestroy() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.destroy();\n\t\t}\n\n\t\tthis.document.destroy();\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t Creates new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = view.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = view.createRange( start, end );\n\t *\t\tconst selection = view.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ view.createRange( start1, end2 ), view.createRange( star2, end2 ) ];\n\t *\t\tconst selection = view.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = view.createSelection();\n\t *\t\tconst selection = view.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = view.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = view.createPositionFromPath( root, path );\n\t *\t\tconst selection = view.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = view.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = view.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = view.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = view.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s factory method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = view.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = view.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selectable} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.\n\t * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.\n\t *\n\t * @protected\n\t * @param {Boolean} flag A flag indicates whether the rendering should be disabled.\n\t */\n\t_disableRendering( flag ) {\n\t\tthis._renderingDisabled = flag;\n\n\t\tif ( flag == false ) {\n\t\t\t// Render when you stop blocking rendering.\n\t\t\tthis.change( () => {} );\n\t\t}\n\t}\n\n\t/**\n\t * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\n\t * before rendering and re-enabled after that.\n\t *\n\t * @private\n\t */\n\t_render() {\n\t\tthis.isRenderingInProgress = true;\n\t\tthis.disableObservers();\n\t\tthis._renderer.render();\n\t\tthis.enableObservers();\n\t\tthis.isRenderingInProgress = false;\n\t}\n\n\t/**\n\t * Fired after a topmost {@link module:engine/view/view~View#change change block} and all\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers} are executed.\n\t *\n\t * Actual rendering is performed as a first listener on 'normal' priority.\n\t *\n\t *\t\tview.on( 'render', () => {\n\t *\t\t\t// Rendering to the DOM is complete.\n\t *\t\t} );\n\t *\n\t * This event is useful when you want to update interface elements after the rendering, e.g. position of the\n\t * balloon panel. If you wants to change view structure use\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers}.\n\t *\n\t * @event module:engine/view/view~View#event:render\n\t */\n}\n\nmix( View, ObservableMixin );\n"]}]}