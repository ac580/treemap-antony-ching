{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js"],"names":["default","EmitterMixin","_getEmitterListenedTo","_setEmitterId","uid","isNode","isWindow","extend","DomEmitterMixin","listenTo","emitter","rest","proxy","_getProxyEmitter","ProxyEmitter","attach","call","stopListening","event","callback","detach","node","getNodeUID","constructor","_domNode","prototype","options","_domListeners","domListener","_createDomListener","useCapture","addEventListener","events","_events","callbacks","length","removeListener","domEvt","fire","removeEventListener"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/emittermixin\n */\n\nimport { default as EmitterMixin, _getEmitterListenedTo, _setEmitterId } from '../emittermixin';\nimport uid from '../uid';\nimport isNode from './isnode';\nimport isWindow from './iswindow';\nimport { extend } from 'lodash-es';\n\n/**\n * Mixin that injects the DOM events API into its host. It provides the API\n * compatible with {@link module:utils/emittermixin~EmitterMixin}.\n *\n * DOM emitter mixin is by default available in the {@link module:ui/view~View} class,\n * but it can also be mixed into any other class:\n *\n *\t\timport mix from '../utils/mix.js';\n *\t\timport DomEmitterMixin from '../utils/dom/emittermixin.js';\n *\n *\t\tclass SomeView {}\n *\t\tmix( SomeView, DomEmitterMixin );\n *\n *\t\tconst view = new SomeView();\n *\t\tview.listenTo( domElement, ( evt, domEvt ) => {\n *\t\t\tconsole.log( evt, domEvt );\n *\t\t} );\n *\n * @mixin EmitterMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n */\nconst DomEmitterMixin = extend( {}, EmitterMixin, {\n\t/**\n\t * Registers a callback function to be executed when an event is fired in a specific Emitter or DOM Node.\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} emitter The object that fires the event.\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n\t * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n\t * order they were added.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t */\n\tlistenTo( emitter, ...rest ) {\n\t\t// Check if emitter is an instance of DOM Node. If so, replace the argument with\n\t\t// corresponding ProxyEmitter (or create one if not existing).\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxy = this._getProxyEmitter( emitter ) || new ProxyEmitter( emitter );\n\n\t\t\tproxy.attach( ...rest );\n\n\t\t\temitter = proxy;\n\t\t}\n\n\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\tEmitterMixin.listenTo.call( this, emitter, ...rest );\n\t},\n\n\t/**\n\t * Stops listening for events. It can be used at different levels:\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * * To stop listening to a specific callback.\n\t * * To stop listening to a specific event.\n\t * * To stop listening to all events fired by a specific object.\n\t * * To stop listening to all events fired by all object.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n\t * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n\t * for all events from `emitter`.\n\t * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n\t * `event`.\n\t */\n\tstopListening( emitter, event, callback ) {\n\t\t// Check if emitter is an instance of DOM Node. If so, replace the argument with corresponding ProxyEmitter.\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxy = this._getProxyEmitter( emitter );\n\n\t\t\t// Element has no listeners.\n\t\t\tif ( !proxy ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\temitter = proxy;\n\t\t}\n\n\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\tEmitterMixin.stopListening.call( this, emitter, event, callback );\n\n\t\tif ( emitter instanceof ProxyEmitter ) {\n\t\t\temitter.detach( event );\n\t\t}\n\t},\n\n\t/**\n\t * Retrieves ProxyEmitter instance for given DOM Node residing in this Host.\n\t *\n\t * @pivate\n\t * @param {Node} node DOM Node of the ProxyEmitter.\n\t * @returns {module:utils/dom/emittermixin~ProxyEmitter} ProxyEmitter instance or null.\n\t */\n\t_getProxyEmitter( node ) {\n\t\treturn _getEmitterListenedTo( this, getNodeUID( node ) );\n\t}\n} );\n\nexport default DomEmitterMixin;\n\n/**\n * Creates a ProxyEmitter instance. Such an instance is a bridge between a DOM Node firing events\n * and any Host listening to them. It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#on}.\n *\n *                                  listenTo( click, ... )\n *                    +-----------------------------------------+\n *                    |              stopListening( ... )       |\n *     +----------------------------+                           |             addEventListener( click, ... )\n *     | Host                       |                           |   +---------------------------------------------+\n *     +----------------------------+                           |   |       removeEventListener( click, ... )     |\n *     | _listeningTo: {            |                +----------v-------------+                                   |\n *     |   UID: {                   |                | ProxyEmitter           |                                   |\n *     |     emitter: ProxyEmitter, |                +------------------------+                      +------------v----------+\n *     |     callbacks: {           |                | events: {              |                      | Node (HTMLElement)    |\n *     |       click: [ callbacks ] |                |   click: [ callbacks ] |                      +-----------------------+\n *     |     }                      |                | },                     |                      | data-ck-expando: UID  |\n *     |   }                        |                | _domNode: Node,        |                      +-----------------------+\n *     | }                          |                | _domListeners: {},     |                                   |\n *     | +------------------------+ |                | _emitterId: UID        |                                   |\n *     | | DomEmitterMixin        | |                +--------------^---------+                                   |\n *     | +------------------------+ |                           |   |                                             |\n *     +--------------^-------------+                           |   +---------------------------------------------+\n *                    |                                         |                  click (DOM Event)\n *                    +-----------------------------------------+\n *                                fire( click, DOM Event )\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n * @private\n */\nclass ProxyEmitter {\n\t/**\n\t * @param {Node} node DOM Node that fires events.\n\t * @returns {Object} ProxyEmitter instance bound to the DOM Node.\n\t */\n\tconstructor( node ) {\n\t\t// Set emitter ID to match DOM Node \"expando\" property.\n\t\t_setEmitterId( this, getNodeUID( node ) );\n\n\t\t// Remember the DOM Node this ProxyEmitter is bound to.\n\t\tthis._domNode = node;\n\t}\n}\n\nextend( ProxyEmitter.prototype, EmitterMixin, {\n\t/**\n\t * Collection of native DOM listeners.\n\t *\n\t * @private\n\t * @member {Object} module:utils/dom/emittermixin~ProxyEmitter#_domListeners\n\t */\n\n\t/**\n\t * Registers a callback function to be executed when an event is fired.\n\t *\n\t * It attaches a native DOM listener to the DOM Node. When fired,\n\t * a corresponding Emitter event will also fire with DOM Event object as an argument.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#attach\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t */\n\tattach( event, callback, options = {} ) {\n\t\t// If the DOM Listener for given event already exist it is pointless\n\t\t// to attach another one.\n\t\tif ( this._domListeners && this._domListeners[ event ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domListener = this._createDomListener( event, !!options.useCapture );\n\n\t\t// Attach the native DOM listener to DOM Node.\n\t\tthis._domNode.addEventListener( event, domListener, !!options.useCapture );\n\n\t\tif ( !this._domListeners ) {\n\t\t\tthis._domListeners = {};\n\t\t}\n\n\t\t// Store the native DOM listener in this ProxyEmitter. It will be helpful\n\t\t// when stopping listening to the event.\n\t\tthis._domListeners[ event ] = domListener;\n\t},\n\n\t/**\n\t * Stops executing the callback on the given event.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#detach\n\t * @param {String} event The name of the event.\n\t */\n\tdetach( event ) {\n\t\tlet events;\n\n\t\t// Remove native DOM listeners which are orphans. If no callbacks\n\t\t// are awaiting given event, detach native DOM listener from DOM Node.\n\t\t// See: {@link attach}.\n\n\t\tif ( this._domListeners[ event ] && ( !( events = this._events[ event ] ) || !events.callbacks.length ) ) {\n\t\t\tthis._domListeners[ event ].removeListener();\n\t\t}\n\t},\n\n\t/**\n\t * Creates a native DOM listener callback. When the native DOM event\n\t * is fired it will fire corresponding event on this ProxyEmitter.\n\t * Note: A native DOM Event is passed as an argument.\n\t *\n\t * @private\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#_createDomListener\n\t * @param {String} event The name of the event.\n\t * @param {Boolean} useCapture Indicates whether the listener was created for capturing event.\n\t * @returns {Function} The DOM listener callback.\n\t */\n\t_createDomListener( event, useCapture ) {\n\t\tconst domListener = domEvt => {\n\t\t\tthis.fire( event, domEvt );\n\t\t};\n\n\t\t// Supply the DOM listener callback with a function that will help\n\t\t// detach it from the DOM Node, when it is no longer necessary.\n\t\t// See: {@link detach}.\n\t\tdomListener.removeListener = () => {\n\t\t\tthis._domNode.removeEventListener( event, domListener, useCapture );\n\t\t\tdelete this._domListeners[ event ];\n\t\t};\n\n\t\treturn domListener;\n\t}\n} );\n\n// Gets an unique DOM Node identifier. The identifier will be set if not defined.\n//\n// @private\n// @param {Node} node\n// @returns {String} UID for given DOM Node.\nfunction getNodeUID( node ) {\n\treturn node[ 'data-ck-expando' ] || ( node[ 'data-ck-expando' ] = uid() );\n}\n\n/**\n * Interface representing classes which mix in {@link module:utils/dom/emittermixin~EmitterMixin}.\n *\n * @interface Emitter\n */\n"]}]}