{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-widget/src/highlightstack.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-widget/src/highlightstack.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIHdpZGdldC9oaWdobGlnaHRzdGFjawogKi8KaW1wb3J0IEVtaXR0ZXJNaXhpbiBmcm9tICdAY2tlZGl0b3IvY2tlZGl0b3I1LXV0aWxzL3NyYy9lbWl0dGVybWl4aW4nOwppbXBvcnQgbWl4IGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL21peCc7Ci8qKgogKiBDbGFzcyB1c2VkIHRvIGhhbmRsZSBjb3JyZWN0IG9yZGVyIG9mIGhpZ2hsaWdodHMgb24gZWxlbWVudHMuCiAqCiAqIFdoZW4gZGlmZmVyZW50IGhpZ2hsaWdodHMgYXJlIGFwcGxpZWQgdG8gc2FtZSBlbGVtZW50IGNvcnJlY3Qgb3JkZXIgc2hvdWxkIGJlIHByZXNlcnZlZDoKICoKICogKiBoaWdobGlnaHQgd2l0aCBoaWdoZXN0IHByaW9yaXR5IHNob3VsZCBiZSBhcHBsaWVkLAogKiAqIGlmIHR3byBoaWdobGlnaHRzIGhhdmUgc2FtZSBwcmlvcml0eSAtIHNvcnQgYnkgQ1NTIGNsYXNzIHByb3ZpZGVkIGluCiAqIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RoZWxwZXJzfkhpZ2hsaWdodERlc2NyaXB0b3J9LgogKgogKiBUaGlzIHdheSwgaGlnaGxpZ2h0IHdpbGwgYmUgYXBwbGllZCB3aXRoIHRoZSBzYW1lIHJ1bGVzIGl0IGlzIGFwcGxpZWQgb24gdGV4dHMuCiAqLwoKZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGlnaGxpZ2h0U3RhY2sgewogIC8qKgogICAqIENyZWF0ZXMgY2xhc3MgaW5zdGFuY2UuCiAgICovCiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLl9zdGFjayA9IFtdOwogIH0KICAvKioKICAgKiBBZGRzIGhpZ2hsaWdodCBkZXNjcmlwdG9yIHRvIHRoZSBzdGFjay4KICAgKgogICAqIEBmaXJlcyBjaGFuZ2U6dG9wCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RoZWxwZXJzfkhpZ2hsaWdodERlc2NyaXB0b3J9IGRlc2NyaXB0b3IKICAgKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlcn0gd3JpdGVyCiAgICovCgoKICBhZGQoZGVzY3JpcHRvciwgd3JpdGVyKSB7CiAgICBjb25zdCBzdGFjayA9IHRoaXMuX3N0YWNrOyAvLyBTYXZlIHRvcCBkZXNjcmlwdG9yIGFuZCBpbnNlcnQgbmV3IG9uZS4gSWYgdG9wIGlzIGNoYW5nZWQgLSBmaXJlIGV2ZW50LgoKICAgIGNvbnN0IG9sZFRvcCA9IHN0YWNrWzBdOwoKICAgIHRoaXMuX2luc2VydERlc2NyaXB0b3IoZGVzY3JpcHRvcik7CgogICAgY29uc3QgbmV3VG9wID0gc3RhY2tbMF07IC8vIFdoZW4gbmV3IG9iamVjdCBpcyBhdCB0aGUgdG9wIGFuZCBzdG9yZXMgZGlmZmVyZW50IGluZm9ybWF0aW9uLgoKICAgIGlmIChvbGRUb3AgIT09IG5ld1RvcCAmJiAhY29tcGFyZURlc2NyaXB0b3JzKG9sZFRvcCwgbmV3VG9wKSkgewogICAgICB0aGlzLmZpcmUoJ2NoYW5nZTp0b3AnLCB7CiAgICAgICAgb2xkRGVzY3JpcHRvcjogb2xkVG9wLAogICAgICAgIG5ld0Rlc2NyaXB0b3I6IG5ld1RvcCwKICAgICAgICB3cml0ZXIKICAgICAgfSk7CiAgICB9CiAgfQogIC8qKgogICAqIFJlbW92ZXMgaGlnaGxpZ2h0IGRlc2NyaXB0b3IgZnJvbSB0aGUgc3RhY2suCiAgICoKICAgKiBAZmlyZXMgY2hhbmdlOnRvcAogICAqIEBwYXJhbSB7U3RyaW5nfSBpZCBJZCBvZiB0aGUgZGVzY3JpcHRvciB0byByZW1vdmUuCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG93bmNhc3R3cml0ZXJ+RG93bmNhc3RXcml0ZXJ9IHdyaXRlcgogICAqLwoKCiAgcmVtb3ZlKGlkLCB3cml0ZXIpIHsKICAgIGNvbnN0IHN0YWNrID0gdGhpcy5fc3RhY2s7CiAgICBjb25zdCBvbGRUb3AgPSBzdGFja1swXTsKCiAgICB0aGlzLl9yZW1vdmVEZXNjcmlwdG9yKGlkKTsKCiAgICBjb25zdCBuZXdUb3AgPSBzdGFja1swXTsgLy8gV2hlbiBuZXcgb2JqZWN0IGlzIGF0IHRoZSB0b3AgYW5kIHN0b3JlcyBkaWZmZXJlbnQgaW5mb3JtYXRpb24uCgogICAgaWYgKG9sZFRvcCAhPT0gbmV3VG9wICYmICFjb21wYXJlRGVzY3JpcHRvcnMob2xkVG9wLCBuZXdUb3ApKSB7CiAgICAgIHRoaXMuZmlyZSgnY2hhbmdlOnRvcCcsIHsKICAgICAgICBvbGREZXNjcmlwdG9yOiBvbGRUb3AsCiAgICAgICAgbmV3RGVzY3JpcHRvcjogbmV3VG9wLAogICAgICAgIHdyaXRlcgogICAgICB9KTsKICAgIH0KICB9CiAgLyoqCiAgICogSW5zZXJ0cyBnaXZlbiBkZXNjcmlwdG9yIGluIGNvcnJlY3QgcGxhY2UgaW4gdGhlIHN0YWNrLiBJdCBhbHNvIHRha2VzIGNhcmUgYWJvdXQgdXBkYXRpbmcgaW5mb3JtYXRpb24gd2hlbgogICAqIGRlc2NyaXB0b3Igd2l0aCBzYW1lIGlkIGlzIGFscmVhZHkgcHJlc2VudC4KICAgKgogICAqIEBwcml2YXRlCiAgICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RoZWxwZXJzfkhpZ2hsaWdodERlc2NyaXB0b3J9IGRlc2NyaXB0b3IKICAgKi8KCgogIF9pbnNlcnREZXNjcmlwdG9yKGRlc2NyaXB0b3IpIHsKICAgIGNvbnN0IHN0YWNrID0gdGhpcy5fc3RhY2s7CiAgICBjb25zdCBpbmRleCA9IHN0YWNrLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IGRlc2NyaXB0b3IuaWQpOyAvLyBJbnNlcnRpbmcgZXhhY3Qgc2FtZSBkZXNjcmlwdG9yIC0gZG8gbm90aGluZy4KCiAgICBpZiAoY29tcGFyZURlc2NyaXB0b3JzKGRlc2NyaXB0b3IsIHN0YWNrW2luZGV4XSkpIHsKICAgICAgcmV0dXJuOwogICAgfSAvLyBJZiBkZXNjcmlwdG9yIHdpdGggc2FtZSBpZCBidXQgd2l0aCBkaWZmZXJlbnQgaW5mb3JtYXRpb24gaXMgb24gdGhlIHN0YWNrIC0gcmVtb3ZlIGl0LgoKCiAgICBpZiAoaW5kZXggPiAtMSkgewogICAgICBzdGFjay5zcGxpY2UoaW5kZXgsIDEpOwogICAgfSAvLyBGaW5kIGNvcnJlY3QgcGxhY2UgdG8gaW5zZXJ0IGRlc2NyaXB0b3IgaW4gdGhlIHN0YWNrLgogICAgLy8gSXQgaGF2ZSBkaWZmZXJlbnQgaW5mb3JtYXRpb24gKGZvciBleGFtcGxlIHByaW9yaXR5KSBzbyBpdCBtdXN0IGJlIHJlLWluc2VydGVkIGluIGNvcnJlY3QgcGxhY2UuCgoKICAgIGxldCBpID0gMDsKCiAgICB3aGlsZSAoc3RhY2tbaV0gJiYgc2hvdWxkQUJlQmVmb3JlQihzdGFja1tpXSwgZGVzY3JpcHRvcikpIHsKICAgICAgaSsrOwogICAgfQoKICAgIHN0YWNrLnNwbGljZShpLCAwLCBkZXNjcmlwdG9yKTsKICB9CiAgLyoqCiAgICogUmVtb3ZlcyBkZXNjcmlwdG9yIHdpdGggZ2l2ZW4gaWQgZnJvbSB0aGUgc3RhY2suCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEBwYXJhbSB7U3RyaW5nfSBpZCBEZXNjcmlwdG9yJ3MgaWQuCiAgICovCgoKICBfcmVtb3ZlRGVzY3JpcHRvcihpZCkgewogICAgY29uc3Qgc3RhY2sgPSB0aGlzLl9zdGFjazsKICAgIGNvbnN0IGluZGV4ID0gc3RhY2suZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PT0gaWQpOyAvLyBJZiBkZXNjcmlwdG9yIHdpdGggc2FtZSBpZCBpcyBvbiB0aGUgbGlzdCAtIHJlbW92ZSBpdC4KCiAgICBpZiAoaW5kZXggPiAtMSkgewogICAgICBzdGFjay5zcGxpY2UoaW5kZXgsIDEpOwogICAgfQogIH0KCn0KbWl4KEhpZ2hsaWdodFN0YWNrLCBFbWl0dGVyTWl4aW4pOyAvLyBDb21wYXJlcyB0d28gZGVzY3JpcHRvcnMgYnkgY2hlY2tpbmcgdGhlaXIgcHJpb3JpdHkgYW5kIGNsYXNzIGxpc3QuCi8vCi8vIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0aGVscGVyc35IaWdobGlnaHREZXNjcmlwdG9yfSBhCi8vIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0aGVscGVyc35IaWdobGlnaHREZXNjcmlwdG9yfSBiCi8vIEByZXR1cm5zIHtCb29sZWFufSBSZXR1cm5zIHRydWUgaWYgYm90aCBkZXNjcmlwdG9ycyBhcmUgZGVmaW5lZCBhbmQgaGF2ZSBzYW1lIHByaW9yaXR5IGFuZCBjbGFzc2VzLgoKZnVuY3Rpb24gY29tcGFyZURlc2NyaXB0b3JzKGEsIGIpIHsKICByZXR1cm4gYSAmJiBiICYmIGEucHJpb3JpdHkgPT0gYi5wcmlvcml0eSAmJiBjbGFzc2VzVG9TdHJpbmcoYS5jbGFzc2VzKSA9PSBjbGFzc2VzVG9TdHJpbmcoYi5jbGFzc2VzKTsKfSAvLyBDaGVja3Mgd2hlbmV2ZXIgZmlyc3QgZGVzY3JpcHRvciBzaG91bGQgYmUgcGxhY2VkIGluIHRoZSBzdGFjayBiZWZvcmUgc2Vjb25kIG9uZS4KLy8KLy8gQHBhcmFtIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RoZWxwZXJzfkhpZ2hsaWdodERlc2NyaXB0b3J9IGEKLy8gQHBhcmFtIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RoZWxwZXJzfkhpZ2hsaWdodERlc2NyaXB0b3J9IGIKLy8gQHJldHVybnMge0Jvb2xlYW59CgoKZnVuY3Rpb24gc2hvdWxkQUJlQmVmb3JlQihhLCBiKSB7CiAgaWYgKGEucHJpb3JpdHkgPiBiLnByaW9yaXR5KSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9IGVsc2UgaWYgKGEucHJpb3JpdHkgPCBiLnByaW9yaXR5KSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfSAvLyBXaGVuIHByaW9yaXRpZXMgYXJlIGVxdWFsIGFuZCBuYW1lcyBhcmUgZGlmZmVyZW50IC0gdXNlIGNsYXNzZXMgdG8gY29tcGFyZS4KCgogIHJldHVybiBjbGFzc2VzVG9TdHJpbmcoYS5jbGFzc2VzKSA+IGNsYXNzZXNUb1N0cmluZyhiLmNsYXNzZXMpOwp9IC8vIENvbnZlcnRzIENTUyBjbGFzc2VzIHBhc3NlZCB3aXRoIHtAbGluayBtb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RoZWxwZXJzfkhpZ2hsaWdodERlc2NyaXB0b3J9IHRvCi8vIHNvcnRlZCBzdHJpbmcuCi8vCi8vIEBwYXJhbSB7U3RyaW5nfEFycmF5PFN0cmluZz59IGRlc2NyaXB0b3IKLy8gQHJldHVybnMge1N0cmluZ30KCgpmdW5jdGlvbiBjbGFzc2VzVG9TdHJpbmcoY2xhc3NlcykgewogIHJldHVybiBBcnJheS5pc0FycmF5KGNsYXNzZXMpID8gY2xhc3Nlcy5zb3J0KCkuam9pbignLCcpIDogY2xhc3NlczsKfQovKioKICogRmlyZWQgd2hlbiB0b3AgZWxlbWVudCBvbiB7QGxpbmsgbW9kdWxlOndpZGdldC9oaWdobGlnaHRzdGFja35IaWdobGlnaHRTdGFja30gaGFzIGJlZW4gY2hhbmdlZAogKgogKiBAZXZlbnQgY2hhbmdlOnRvcAogKiBAcGFyYW0ge09iamVjdH0gZGF0YSBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjaGFuZ2UuCiAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS9jb252ZXJzaW9uL2Rvd25jYXN0aGVscGVyc35IaWdobGlnaHREZXNjcmlwdG9yfSBbZGF0YS5uZXdEZXNjcmlwdG9yXSBOZXcgaGlnaGxpZ2h0CiAqIGRlc2NyaXB0b3IuIEl0IHdpbGwgYmUgYHVuZGVmaW5lZGAgd2hlbiBsYXN0IGRlc2NyaXB0b3IgaXMgcmVtb3ZlZCBmcm9tIHRoZSBzdGFjay4KICogQHBhcmFtIHttb2R1bGU6ZW5naW5lL2NvbnZlcnNpb24vZG93bmNhc3RoZWxwZXJzfkhpZ2hsaWdodERlc2NyaXB0b3J9IFtkYXRhLm9sZERlc2NyaXB0b3JdIE9sZCBoaWdobGlnaHQKICogZGVzY3JpcHRvci4gSXQgd2lsbCBiZSBgdW5kZWZpbmVkYCB3aGVuIGZpcnN0IGRlc2NyaXB0b3IgaXMgYWRkZWQgdG8gdGhlIHN0YWNrLgogKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlcn0gd3JpdGVyIFZpZXcgd3JpdGVyIHRoYXQgY2FuIGJlIHVzZWQgdG8gbW9kaWZ5IGVsZW1lbnQuCiAqLw=="},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-widget/src/highlightstack.js"],"names":["EmitterMixin","mix","HighlightStack","constructor","_stack","add","descriptor","writer","stack","oldTop","_insertDescriptor","newTop","compareDescriptors","fire","oldDescriptor","newDescriptor","remove","id","_removeDescriptor","index","findIndex","item","splice","i","shouldABeBeforeB","a","b","priority","classesToString","classes","Array","isArray","sort","join"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/highlightstack\n */\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Class used to handle correct order of highlights on elements.\n *\n * When different highlights are applied to same element correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */\nexport default class HighlightStack {\n\t/**\n\t * Creates class instance.\n\t */\n\tconstructor() {\n\t\tthis._stack = [];\n\t}\n\n\t/**\n\t * Adds highlight descriptor to the stack.\n\t *\n\t * @fires change:top\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\tadd( descriptor, writer ) {\n\t\tconst stack = this._stack;\n\n\t\t// Save top descriptor and insert new one. If top is changed - fire event.\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._insertDescriptor( descriptor );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Removes highlight descriptor from the stack.\n\t *\n\t * @fires change:top\n\t * @param {String} id Id of the descriptor to remove.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\tremove( id, writer ) {\n\t\tconst stack = this._stack;\n\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._removeDescriptor( id );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts given descriptor in correct place in the stack. It also takes care about updating information when\n\t * descriptor with same id is already present.\n\t *\n\t * @private\n\t * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n\t */\n\t_insertDescriptor( descriptor ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === descriptor.id );\n\n\t\t// Inserting exact same descriptor - do nothing.\n\t\tif ( compareDescriptors( descriptor, stack[ index ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If descriptor with same id but with different information is on the stack - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\n\t\t// Find correct place to insert descriptor in the stack.\n\t\t// It have different information (for example priority) so it must be re-inserted in correct place.\n\t\tlet i = 0;\n\n\t\twhile ( stack[ i ] && shouldABeBeforeB( stack[ i ], descriptor ) ) {\n\t\t\ti++;\n\t\t}\n\n\t\tstack.splice( i, 0, descriptor );\n\t}\n\n\t/**\n\t * Removes descriptor with given id from the stack.\n\t *\n\t * @private\n\t * @param {String} id Descriptor's id.\n\t */\n\t_removeDescriptor( id ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === id );\n\n\t\t// If descriptor with same id is on the list - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\t}\n}\n\nmix( HighlightStack, EmitterMixin );\n\n// Compares two descriptors by checking their priority and class list.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean} Returns true if both descriptors are defined and have same priority and classes.\nfunction compareDescriptors( a, b ) {\n\treturn a && b && a.priority == b.priority && classesToString( a.classes ) == classesToString( b.classes );\n}\n\n// Checks whenever first descriptor should be placed in the stack before second one.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean}\nfunction shouldABeBeforeB( a, b ) {\n\tif ( a.priority > b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority < b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use classes to compare.\n\treturn classesToString( a.classes ) > classesToString( b.classes );\n}\n\n// Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} to\n// sorted string.\n//\n// @param {String|Array<String>} descriptor\n// @returns {String}\nfunction classesToString( classes ) {\n\treturn Array.isArray( classes ) ? classes.sort().join( ',' ) : classes;\n}\n\n/**\n * Fired when top element on {@link module:widget/highlightstack~HighlightStack} has been changed\n *\n * @event change:top\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.newDescriptor] New highlight\n * descriptor. It will be `undefined` when last descriptor is removed from the stack.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.oldDescriptor] Old highlight\n * descriptor. It will be `undefined` when first descriptor is added to the stack.\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that can be used to modify element.\n */\n"]}]}