{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/domconverter.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/domconverter.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/domconverter.js"],"names":["ViewText","ViewElement","ViewPosition","ViewRange","ViewSelection","ViewDocumentFragment","ViewTreeWalker","BR_FILLER","getDataWithoutFiller","INLINE_FILLER_LENGTH","isInlineFiller","NBSP_FILLER","startsWithFiller","global","indexOf","getAncestors","getCommonAncestor","isText","isElement","BR_FILLER_REF","document","DomConverter","constructor","options","blockFillerMode","preElements","blockElements","_blockFiller","_domToViewMapping","WeakMap","_viewToDomMapping","_fakeSelectionMapping","bindFakeSelection","domElement","viewDocumentSelection","set","fakeSelectionToView","get","bindElements","viewElement","unbindDomElement","delete","child","Array","from","childNodes","bindDocumentFragments","domFragment","viewFragment","viewToDom","viewNode","domDocument","is","textData","_processDataFromViewText","createTextNode","mapViewToDom","createDocumentFragment","bind","render","hasAttribute","createElementNS","getAttribute","name","createElement","key","getAttributeKeys","setAttribute","withChildren","undefined","viewChildrenToDom","appendChild","fillerPositionOffset","getFillerOffset","offset","childView","getChildren","viewRangeToDom","viewRange","domStart","viewPositionToDom","start","domEnd","end","domRange","createRange","setStart","parent","setEnd","viewPosition","viewParent","domParent","findCorrespondingDomText","domBefore","domAfter","nodeBefore","parentNode","nextSibling","domToView","domNode","isBlockFiller","uiElement","getParentUIElement","_processDataFromDomText","isComment","mapDomToView","isDocumentFragment","viewName","keepOriginalCase","tagName","toLowerCase","attrs","attributes","i","length","_setAttribute","value","domChildrenToView","_appendChild","domChild","viewChild","domSelectionToView","domSelection","rangeCount","container","getRangeAt","startContainer","viewSelection","isBackward","isDomSelectionBackward","viewRanges","domRangeToView","push","backward","viewStart","domPositionToView","startOffset","viewEnd","endContainer","endOffset","domOffset","_createBefore","findCorrespondingViewText","viewBefore","index","domElementOrDocumentFragment","domText","previousSibling","firstChild","getChild","documentFragmentOrElement","viewText","focus","viewEditable","domEditable","ownerDocument","activeElement","scrollX","scrollY","window","scrollPositions","forEachDomNodeAncestor","node","scrollLeft","scrollTop","shift","scrollTo","nodeType","Node","ELEMENT_NODE","DOCUMENT_FRAGMENT_NODE","COMMENT_NODE","isEqualNode","hasBlockParent","isNbspBlockFiller","selection","isCollapsed","range","anchorNode","anchorOffset","focusNode","focusOffset","collapsed","detach","ancestors","pop","isDomSelectionCorrect","_isDomSelectionPositionCorrect","data","some","includes","charAt","prevNode","_getTouchingViewTextNode","prevEndsWithSpace","_nodeEndsWithSpace","substr","nextNode","replace","_hasDomParentOfType","_getTouchingInlineDomNode","shouldLeftTrim","_checkShouldLeftTrimDomText","shouldRightTrim","_checkShouldRightTrimDomText","Text","test","getNext","treeWalker","startPosition","_createAfter","direction","item","topmostParent","createTreeWalker","NodeFilter","SHOW_TEXT","SHOW_ELEMENT","acceptNode","FILTER_ACCEPT","FILTER_SKIP","currentNode","touchingNode","lca","types","boundaryParent","parents","slice","callback","isNBSP"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/domconverter\n */\n\n/* globals document, Node, NodeFilter, Text */\n\nimport ViewText from './text';\nimport ViewElement from './element';\nimport ViewPosition from './position';\nimport ViewRange from './range';\nimport ViewSelection from './selection';\nimport ViewDocumentFragment from './documentfragment';\nimport ViewTreeWalker from './treewalker';\nimport { BR_FILLER, getDataWithoutFiller, INLINE_FILLER_LENGTH, isInlineFiller, NBSP_FILLER, startsWithFiller } from './filler';\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport indexOf from '@ckeditor/ckeditor5-utils/src/dom/indexof';\nimport getAncestors from '@ckeditor/ckeditor5-utils/src/dom/getancestors';\nimport getCommonAncestor from '@ckeditor/ckeditor5-utils/src/dom/getcommonancestor';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\nimport { isElement } from 'lodash-es';\n\n// eslint-disable-next-line new-cap\nconst BR_FILLER_REF = BR_FILLER( document );\n\n/**\n * DomConverter is a set of tools to do transformations between DOM nodes and view nodes. It also handles\n * {@link module:engine/view/domconverter~DomConverter#bindElements binding} these nodes.\n *\n * The instance of DOMConverter is available in {@link module:engine/view/view~View#domConverter `editor.editing.view.domConverter`}.\n *\n * DomConverter does not check which nodes should be rendered (use {@link module:engine/view/renderer~Renderer}), does not keep a\n * state of a tree nor keeps synchronization between tree view and DOM tree (use {@link module:engine/view/document~Document}).\n *\n * DomConverter keeps DOM elements to View element bindings, so when the converter will be destroyed, the binding will\n * be lost. Two converters will keep separate binding maps, so one tree view can be bound with two DOM trees.\n */\nexport default class DomConverter {\n\t/**\n\t * Creates DOM converter.\n\t *\n\t * @param {Object} options Object with configuration options.\n\t * @param {module:engine/view/filler~BlockFillerMode} [options.blockFillerMode='br'] The type of the block filler to use.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * The mode of a block filler used by DOM converter.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'br'|'nbsp'} module:engine/view/domconverter~DomConverter#blockFillerMode\n\t\t */\n\t\tthis.blockFillerMode = options.blockFillerMode || 'br';\n\n\t\t/**\n\t\t * Elements which are considered pre-formatted elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#preElements\n\t\t */\n\t\tthis.preElements = [ 'pre' ];\n\n\t\t/**\n\t\t * Elements which are considered block elements (and hence should be filled with a\n\t\t * {@link #isBlockFiller block filler}).\n\t\t *\n\t\t * Whether an element is considered a block element also affects handling of trailing whitespaces.\n\t\t *\n\t\t * You can extend this array if you introduce support for block elements which are not yet recognized here.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#blockElements\n\t\t */\n\t\tthis.blockElements = [ 'p', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li', 'dd', 'dt', 'figcaption' ];\n\n\t\t/**\n\t\t * Block {@link module:engine/view/filler filler} creator, which is used to create all block fillers during the\n\t\t * view to DOM conversion and to recognize block fillers during the DOM to view conversion.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {Function} module:engine/view/domconverter~DomConverter#_blockFiller\n\t\t */\n\t\tthis._blockFiller = this.blockFillerMode == 'br' ? BR_FILLER : NBSP_FILLER;\n\n\t\t/**\n\t\t * DOM to View mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_domToViewMapping\n\t\t */\n\t\tthis._domToViewMapping = new WeakMap();\n\n\t\t/**\n\t\t * View to DOM mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_viewToDomMapping\n\t\t */\n\t\tthis._viewToDomMapping = new WeakMap();\n\n\t\t/**\n\t\t * Holds mapping between fake selection containers and corresponding view selections.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_fakeSelectionMapping\n\t\t */\n\t\tthis._fakeSelectionMapping = new WeakMap();\n\t}\n\n\t/**\n\t * Binds given DOM element that represents fake selection to a **position** of a\n\t * {@link module:engine/view/documentselection~DocumentSelection document selection}.\n\t * Document selection copy is stored and can be retrieved by\n\t * {@link module:engine/view/domconverter~DomConverter#fakeSelectionToView} method.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @param {module:engine/view/documentselection~DocumentSelection} viewDocumentSelection\n\t */\n\tbindFakeSelection( domElement, viewDocumentSelection ) {\n\t\tthis._fakeSelectionMapping.set( domElement, new ViewSelection( viewDocumentSelection ) );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/view/selection~Selection view selection} instance corresponding to\n\t * given DOM element that represents fake selection. Returns `undefined` if binding to given DOM element does not exists.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @returns {module:engine/view/selection~Selection|undefined}\n\t */\n\tfakeSelectionToView( domElement ) {\n\t\treturn this._fakeSelectionMapping.get( domElement );\n\t}\n\n\t/**\n\t * Binds DOM and View elements, so it will be possible to get corresponding elements using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {HTMLElement} domElement DOM element to bind.\n\t * @param {module:engine/view/element~Element} viewElement View element to bind.\n\t */\n\tbindElements( domElement, viewElement ) {\n\t\tthis._domToViewMapping.set( domElement, viewElement );\n\t\tthis._viewToDomMapping.set( viewElement, domElement );\n\t}\n\n\t/**\n\t * Unbinds given `domElement` from the view element it was bound to. Unbinding is deep, meaning that all children of\n\t * `domElement` will be unbound too.\n\t *\n\t * @param {HTMLElement} domElement DOM element to unbind.\n\t */\n\tunbindDomElement( domElement ) {\n\t\tconst viewElement = this._domToViewMapping.get( domElement );\n\n\t\tif ( viewElement ) {\n\t\t\tthis._domToViewMapping.delete( domElement );\n\t\t\tthis._viewToDomMapping.delete( viewElement );\n\n\t\t\t// Use Array.from because of MS Edge (#923).\n\t\t\tfor ( const child of Array.from( domElement.childNodes ) ) {\n\t\t\t\tthis.unbindDomElement( child );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Binds DOM and View document fragments, so it will be possible to get corresponding document fragments using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {DocumentFragment} domFragment DOM document fragment to bind.\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment View document fragment to bind.\n\t */\n\tbindDocumentFragments( domFragment, viewFragment ) {\n\t\tthis._domToViewMapping.set( domFragment, viewFragment );\n\t\tthis._viewToDomMapping.set( viewFragment, domFragment );\n\t}\n\n\t/**\n\t * Converts view to DOM. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View node or document fragment to transform.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @returns {Node|DocumentFragment} Converted node or DocumentFragment.\n\t */\n\tviewToDom( viewNode, domDocument, options = {} ) {\n\t\tif ( viewNode.is( 'text' ) ) {\n\t\t\tconst textData = this._processDataFromViewText( viewNode );\n\n\t\t\treturn domDocument.createTextNode( textData );\n\t\t} else {\n\t\t\tif ( this.mapViewToDom( viewNode ) ) {\n\t\t\t\treturn this.mapViewToDom( viewNode );\n\t\t\t}\n\n\t\t\tlet domElement;\n\n\t\t\tif ( viewNode.is( 'documentFragment' ) ) {\n\t\t\t\t// Create DOM document fragment.\n\t\t\t\tdomElement = domDocument.createDocumentFragment();\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domElement, viewNode );\n\t\t\t\t}\n\t\t\t} else if ( viewNode.is( 'uiElement' ) ) {\n\t\t\t\t// UIElement has its own render() method (see #799).\n\t\t\t\tdomElement = viewNode.render( domDocument );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\treturn domElement;\n\t\t\t} else {\n\t\t\t\t// Create DOM element.\n\t\t\t\tif ( viewNode.hasAttribute( 'xmlns' ) ) {\n\t\t\t\t\tdomElement = domDocument.createElementNS( viewNode.getAttribute( 'xmlns' ), viewNode.name );\n\t\t\t\t} else {\n\t\t\t\t\tdomElement = domDocument.createElement( viewNode.name );\n\t\t\t\t}\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tfor ( const key of viewNode.getAttributeKeys() ) {\n\t\t\t\t\tdomElement.setAttribute( key, viewNode.getAttribute( key ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.viewChildrenToDom( viewNode, domDocument, options ) ) {\n\t\t\t\t\tdomElement.appendChild( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn domElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the view element to DOM using the\n\t * {@link module:engine/view/domconverter~DomConverter#viewToDom} method.\n\t * Additionally, this method adds block {@link module:engine/view/filler filler} to the list of children, if needed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElement Parent view element.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#viewToDom} options parameter.\n\t * @returns {Iterable.<Node>} DOM nodes.\n\t */\n\t* viewChildrenToDom( viewElement, domDocument, options = {} ) {\n\t\tconst fillerPositionOffset = viewElement.getFillerOffset && viewElement.getFillerOffset();\n\t\tlet offset = 0;\n\n\t\tfor ( const childView of viewElement.getChildren() ) {\n\t\t\tif ( fillerPositionOffset === offset ) {\n\t\t\t\tyield this._blockFiller( domDocument );\n\t\t\t}\n\n\t\t\tyield this.viewToDom( childView, domDocument, options );\n\n\t\t\toffset++;\n\t\t}\n\n\t\tif ( fillerPositionOffset === offset ) {\n\t\t\tyield this._blockFiller( domDocument );\n\t\t}\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/range~Range} to DOM range.\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t *\n\t * @param {module:engine/view/range~Range} viewRange View range.\n\t * @returns {Range} DOM range.\n\t */\n\tviewRangeToDom( viewRange ) {\n\t\tconst domStart = this.viewPositionToDom( viewRange.start );\n\t\tconst domEnd = this.viewPositionToDom( viewRange.end );\n\n\t\tconst domRange = document.createRange();\n\t\tdomRange.setStart( domStart.parent, domStart.offset );\n\t\tdomRange.setEnd( domEnd.parent, domEnd.offset );\n\n\t\treturn domRange;\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/position~Position} to DOM parent and offset.\n\t *\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t * If the converted position is directly before inline filler it is moved inside the filler.\n\t *\n\t * @param {module:engine/view/position~Position} viewPosition View position.\n\t * @returns {Object|null} position DOM position or `null` if view position could not be converted to DOM.\n\t * @returns {Node} position.parent DOM position parent.\n\t * @returns {Number} position.offset DOM position offset.\n\t */\n\tviewPositionToDom( viewPosition ) {\n\t\tconst viewParent = viewPosition.parent;\n\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\tconst domParent = this.findCorrespondingDomText( viewParent );\n\n\t\t\tif ( !domParent ) {\n\t\t\t\t// Position is in a view text node that has not been rendered to DOM yet.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet offset = viewPosition.offset;\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset += INLINE_FILLER_LENGTH;\n\t\t\t}\n\n\t\t\treturn { parent: domParent, offset };\n\t\t} else {\n\t\t\t// viewParent is instance of ViewElement.\n\t\t\tlet domParent, domBefore, domAfter;\n\n\t\t\tif ( viewPosition.offset === 0 ) {\n\t\t\t\tdomParent = this.mapViewToDom( viewParent );\n\n\t\t\t\tif ( !domParent ) {\n\t\t\t\t\t// Position is in a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomAfter = domParent.childNodes[ 0 ];\n\t\t\t} else {\n\t\t\t\tconst nodeBefore = viewPosition.nodeBefore;\n\n\t\t\t\tdomBefore = nodeBefore.is( 'text' ) ?\n\t\t\t\t\tthis.findCorrespondingDomText( nodeBefore ) :\n\t\t\t\t\tthis.mapViewToDom( viewPosition.nodeBefore );\n\n\t\t\t\tif ( !domBefore ) {\n\t\t\t\t\t// Position is after a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomParent = domBefore.parentNode;\n\t\t\t\tdomAfter = domBefore.nextSibling;\n\t\t\t}\n\n\t\t\t// If there is an inline filler at position return position inside the filler. We should never return\n\t\t\t// the position before the inline filler.\n\t\t\tif ( isText( domAfter ) && startsWithFiller( domAfter ) ) {\n\t\t\t\treturn { parent: domAfter, offset: INLINE_FILLER_LENGTH };\n\t\t\t}\n\n\t\t\tconst offset = domBefore ? indexOf( domBefore ) + 1 : 0;\n\n\t\t\treturn { parent: domParent, offset };\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM to view. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items. For\n\t * {@link module:engine/view/filler fillers} `null` will be returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {Node|DocumentFragment} domNode DOM node or document fragment to transform.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @param {Boolean} [options.keepOriginalCase=false] If `false`, node's tag name will be converter to lower case.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} Converted node or document fragment\n\t * or `null` if DOM node is a {@link module:engine/view/filler filler} or the given node is an empty text node.\n\t */\n\tdomToView( domNode, options = {} ) {\n\t\tif ( this.isBlockFiller( domNode, this.blockFillerMode ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// When node is inside UIElement return that UIElement as it's view representation.\n\t\tconst uiElement = this.getParentUIElement( domNode, this._domToViewMapping );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tif ( isText( domNode ) ) {\n\t\t\tif ( isInlineFiller( domNode ) ) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tconst textData = this._processDataFromDomText( domNode );\n\n\t\t\t\treturn textData === '' ? null : new ViewText( textData );\n\t\t\t}\n\t\t} else if ( this.isComment( domNode ) ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tif ( this.mapDomToView( domNode ) ) {\n\t\t\t\treturn this.mapDomToView( domNode );\n\t\t\t}\n\n\t\t\tlet viewElement;\n\n\t\t\tif ( this.isDocumentFragment( domNode ) ) {\n\t\t\t\t// Create view document fragment.\n\t\t\t\tviewElement = new ViewDocumentFragment();\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domNode, viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Create view element.\n\t\t\t\tconst viewName = options.keepOriginalCase ? domNode.tagName : domNode.tagName.toLowerCase();\n\t\t\t\tviewElement = new ViewElement( viewName );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domNode, viewElement );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tconst attrs = domNode.attributes;\n\n\t\t\t\tfor ( let i = attrs.length - 1; i >= 0; i-- ) {\n\t\t\t\t\tviewElement._setAttribute( attrs[ i ].name, attrs[ i ].value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.domChildrenToView( domNode, options ) ) {\n\t\t\t\t\tviewElement._appendChild( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn viewElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the DOM element to view nodes using\n\t * the {@link module:engine/view/domconverter~DomConverter#domToView} method.\n\t * Additionally this method omits block {@link module:engine/view/filler filler}, if it exists in the DOM parent.\n\t *\n\t * @param {HTMLElement} domElement Parent DOM element.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n\t * @returns {Iterable.<module:engine/view/node~Node>} View nodes.\n\t */\n\t* domChildrenToView( domElement, options = {} ) {\n\t\tfor ( let i = 0; i < domElement.childNodes.length; i++ ) {\n\t\t\tconst domChild = domElement.childNodes[ i ];\n\t\t\tconst viewChild = this.domToView( domChild, options );\n\n\t\t\tif ( viewChild !== null ) {\n\t\t\t\tyield viewChild;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM selection to view {@link module:engine/view/selection~Selection}.\n\t * Ranges which cannot be converted will be omitted.\n\t *\n\t * @param {Selection} domSelection DOM selection.\n\t * @returns {module:engine/view/selection~Selection} View selection.\n\t */\n\tdomSelectionToView( domSelection ) {\n\t\t// DOM selection might be placed in fake selection container.\n\t\t// If container contains fake selection - return corresponding view selection.\n\t\tif ( domSelection.rangeCount === 1 ) {\n\t\t\tlet container = domSelection.getRangeAt( 0 ).startContainer;\n\n\t\t\t// The DOM selection might be moved to the text node inside the fake selection container.\n\t\t\tif ( isText( container ) ) {\n\t\t\t\tcontainer = container.parentNode;\n\t\t\t}\n\n\t\t\tconst viewSelection = this.fakeSelectionToView( container );\n\n\t\t\tif ( viewSelection ) {\n\t\t\t\treturn viewSelection;\n\t\t\t}\n\t\t}\n\n\t\tconst isBackward = this.isDomSelectionBackward( domSelection );\n\n\t\tconst viewRanges = [];\n\n\t\tfor ( let i = 0; i < domSelection.rangeCount; i++ ) {\n\t\t\t// DOM Range have correct start and end, no matter what is the DOM Selection direction. So we don't have to fix anything.\n\t\t\tconst domRange = domSelection.getRangeAt( i );\n\t\t\tconst viewRange = this.domRangeToView( domRange );\n\n\t\t\tif ( viewRange ) {\n\t\t\t\tviewRanges.push( viewRange );\n\t\t\t}\n\t\t}\n\n\t\treturn new ViewSelection( viewRanges, { backward: isBackward } );\n\t}\n\n\t/**\n\t * Converts DOM Range to view {@link module:engine/view/range~Range}.\n\t * If the start or end position can not be converted `null` is returned.\n\t *\n\t * @param {Range} domRange DOM range.\n\t * @returns {module:engine/view/range~Range|null} View range.\n\t */\n\tdomRangeToView( domRange ) {\n\t\tconst viewStart = this.domPositionToView( domRange.startContainer, domRange.startOffset );\n\t\tconst viewEnd = this.domPositionToView( domRange.endContainer, domRange.endOffset );\n\n\t\tif ( viewStart && viewEnd ) {\n\t\t\treturn new ViewRange( viewStart, viewEnd );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Converts DOM parent and offset to view {@link module:engine/view/position~Position}.\n\t *\n\t * If the position is inside a {@link module:engine/view/filler filler} which has no corresponding view node,\n\t * position of the filler will be converted and returned.\n\t *\n\t * If the position is inside DOM element rendered by {@link module:engine/view/uielement~UIElement}\n\t * that position will be converted to view position before that UIElement.\n\t *\n\t * If structures are too different and it is not possible to find corresponding position then `null` will be returned.\n\t *\n\t * @param {Node} domParent DOM position parent.\n\t * @param {Number} domOffset DOM position offset.\n\t * @returns {module:engine/view/position~Position} viewPosition View position.\n\t */\n\tdomPositionToView( domParent, domOffset ) {\n\t\tif ( this.isBlockFiller( domParent, this.blockFillerMode ) ) {\n\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t}\n\n\t\t// If position is somewhere inside UIElement - return position before that element.\n\t\tconst viewElement = this.mapDomToView( domParent );\n\n\t\tif ( viewElement && viewElement.is( 'uiElement' ) ) {\n\t\t\treturn ViewPosition._createBefore( viewElement );\n\t\t}\n\n\t\tif ( isText( domParent ) ) {\n\t\t\tif ( isInlineFiller( domParent ) ) {\n\t\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t\t}\n\n\t\t\tconst viewParent = this.findCorrespondingViewText( domParent );\n\t\t\tlet offset = domOffset;\n\n\t\t\tif ( !viewParent ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset -= INLINE_FILLER_LENGTH;\n\t\t\t\toffset = offset < 0 ? 0 : offset;\n\t\t\t}\n\n\t\t\treturn new ViewPosition( viewParent, offset );\n\t\t}\n\t\t// domParent instanceof HTMLElement.\n\t\telse {\n\t\t\tif ( domOffset === 0 ) {\n\t\t\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t\t\tif ( viewParent ) {\n\t\t\t\t\treturn new ViewPosition( viewParent, 0 );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst domBefore = domParent.childNodes[ domOffset - 1 ];\n\t\t\t\tconst viewBefore = isText( domBefore ) ?\n\t\t\t\t\tthis.findCorrespondingViewText( domBefore ) :\n\t\t\t\t\tthis.mapDomToView( domBefore );\n\n\t\t\t\t// TODO #663\n\t\t\t\tif ( viewBefore && viewBefore.parent ) {\n\t\t\t\t\treturn new ViewPosition( viewBefore.parent, viewBefore.index + 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Returns corresponding view {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment} for provided DOM element or\n\t * document fragment. If there is no view item {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * to the given DOM - `undefined` is returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {DocumentFragment|Element} domElementOrDocumentFragment DOM element or document fragment.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|undefined}\n\t * Corresponding view element, document fragment or `undefined` if no element was bound.\n\t */\n\tmapDomToView( domElementOrDocumentFragment ) {\n\t\treturn this.getParentUIElement( domElementOrDocumentFragment ) || this._domToViewMapping.get( domElementOrDocumentFragment );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * For all text nodes rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * Note that for the block or inline {@link module:engine/view/filler filler} this method returns `null`.\n\t *\n\t * @param {Text} domText DOM text node.\n\t * @returns {module:engine/view/text~Text|null} Corresponding view text node or `null`, if it was not possible to find a\n\t * corresponding node.\n\t */\n\tfindCorrespondingViewText( domText ) {\n\t\tif ( isInlineFiller( domText ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If DOM text was rendered by UIElement - return that element.\n\t\tconst uiElement = this.getParentUIElement( domText );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tconst previousSibling = domText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling ) {\n\t\t\tif ( !( this.isElement( previousSibling ) ) ) {\n\t\t\t\t// The previous is text or comment.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewElement = this.mapDomToView( previousSibling );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst nextSibling = viewElement.nextSibling;\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( nextSibling instanceof ViewText ) {\n\t\t\t\t\treturn viewElement.nextSibling;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Try to use parent to find the corresponding text node.\n\t\telse {\n\t\t\tconst viewElement = this.mapDomToView( domText.parentNode );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst firstChild = viewElement.getChild( 0 );\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( firstChild instanceof ViewText ) {\n\t\t\t\t\treturn firstChild;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns corresponding DOM item for provided {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment}.\n\t * To find a corresponding text for {@link module:engine/view/text~Text view Text instance}\n\t * use {@link #findCorrespondingDomText}.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View element or document fragment.\n\t * @returns {Node|DocumentFragment|undefined} Corresponding DOM node or document fragment.\n\t */\n\tmapViewToDom( documentFragmentOrElement ) {\n\t\treturn this._viewToDomMapping.get( documentFragmentOrElement );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} viewText View text node.\n\t * @returns {Text|null} Corresponding DOM text node or `null`, if it was not possible to find a corresponding node.\n\t */\n\tfindCorrespondingDomText( viewText ) {\n\t\tconst previousSibling = viewText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling && this.mapViewToDom( previousSibling ) ) {\n\t\t\treturn this.mapViewToDom( previousSibling ).nextSibling;\n\t\t}\n\n\t\t// If this is a first node, try to use parent to find the corresponding text node.\n\t\tif ( !previousSibling && viewText.parent && this.mapViewToDom( viewText.parent ) ) {\n\t\t\treturn this.mapViewToDom( viewText.parent ).childNodes[ 0 ];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Focuses DOM editable that is corresponding to provided {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t * @param {module:engine/view/editableelement~EditableElement} viewEditable\n\t */\n\tfocus( viewEditable ) {\n\t\tconst domEditable = this.mapViewToDom( viewEditable );\n\n\t\tif ( domEditable && domEditable.ownerDocument.activeElement !== domEditable ) {\n\t\t\t// Save the scrollX and scrollY positions before the focus.\n\t\t\tconst { scrollX, scrollY } = global.window;\n\t\t\tconst scrollPositions = [];\n\n\t\t\t// Save all scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst { scrollLeft, scrollTop } = node;\n\n\t\t\t\tscrollPositions.push( [ scrollLeft, scrollTop ] );\n\t\t\t} );\n\n\t\t\tdomEditable.focus();\n\n\t\t\t// Restore scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/957\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst [ scrollLeft, scrollTop ] = scrollPositions.shift();\n\n\t\t\t\tnode.scrollLeft = scrollLeft;\n\t\t\t\tnode.scrollTop = scrollTop;\n\t\t\t} );\n\n\t\t\t// Restore the scrollX and scrollY positions after the focus.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\tglobal.window.scrollTo( scrollX, scrollY );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.ELEMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisElement( node ) {\n\t\treturn node && node.nodeType == Node.ELEMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.DOCUMENT_FRAGMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisDocumentFragment( node ) {\n\t\treturn node && node.nodeType == Node.DOCUMENT_FRAGMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.COMMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisComment( node ) {\n\t\treturn node && node.nodeType == Node.COMMENT_NODE;\n\t}\n\n\t/**\n\t * Checks if the node is an instance of the block filler for this DOM converter.\n\t *\n\t *\t\tconst converter = new DomConverter( { blockFillerMode: 'br' } );\n\t *\n\t *\t\tconverter.isBlockFiller( BR_FILLER( document ) ); // true\n\t *\t\tconverter.isBlockFiller( NBSP_FILLER( document ) ); // false\n\t *\n\t * **Note:**: For the `'nbsp'` mode the method also checks context of a node so it cannot be a detached node.\n\t *\n\t * **Note:** A special case in the `'nbsp'` mode exists where the `<br>` in `<p><br></p>` is treated as a block filler.\n\t *\n\t * @param {Node} domNode DOM node to check.\n\t * @returns {Boolean} True if a node is considered a block filler for given mode.\n\t */\n\tisBlockFiller( domNode ) {\n\t\tif ( this.blockFillerMode == 'br' ) {\n\t\t\treturn domNode.isEqualNode( BR_FILLER_REF );\n\t\t}\n\n\t\t// Special case for <p><br></p> in which case the <br> should be treated as filler even\n\t\t// when we're in the 'nbsp' mode. See ckeditor5#5564.\n\t\tif ( domNode.tagName === 'BR' && hasBlockParent( domNode, this.blockElements ) && domNode.parentNode.childNodes.length === 1 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn isNbspBlockFiller( domNode, this.blockElements );\n\t}\n\n\t/**\n\t * Returns `true` if given selection is a backward selection, that is, if it's `focus` is before `anchor`.\n\t *\n\t * @param {Selection} DOM Selection instance to check.\n\t * @returns {Boolean}\n\t */\n\tisDomSelectionBackward( selection ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Since it takes multiple lines of code to check whether a \"DOM Position\" is before/after another \"DOM Position\",\n\t\t// we will use the fact that range will collapse if it's end is before it's start.\n\t\tconst range = document.createRange();\n\n\t\trange.setStart( selection.anchorNode, selection.anchorOffset );\n\t\trange.setEnd( selection.focusNode, selection.focusOffset );\n\n\t\tconst backward = range.collapsed;\n\n\t\trange.detach();\n\n\t\treturn backward;\n\t}\n\n\t/**\n\t * Returns parent {@link module:engine/view/uielement~UIElement} for provided DOM node. Returns `null` if there is no\n\t * parent UIElement.\n\t *\n\t * @param {Node} domNode\n\t * @returns {module:engine/view/uielement~UIElement|null}\n\t */\n\tgetParentUIElement( domNode ) {\n\t\tconst ancestors = getAncestors( domNode );\n\n\t\t// Remove domNode from the list.\n\t\tancestors.pop();\n\n\t\twhile ( ancestors.length ) {\n\t\t\tconst domNode = ancestors.pop();\n\t\t\tconst viewNode = this._domToViewMapping.get( domNode );\n\n\t\t\tif ( viewNode && viewNode.is( 'uiElement' ) ) {\n\t\t\t\treturn viewNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks if given selection's boundaries are at correct places.\n\t *\n\t * The following places are considered as incorrect for selection boundaries:\n\t * * before or in the middle of the inline filler sequence,\n\t * * inside the DOM element which represents {@link module:engine/view/uielement~UIElement a view ui element}.\n\t *\n\t * @param {Selection} domSelection DOM Selection object to be checked.\n\t * @returns {Boolean} `true` if the given selection is at a correct place, `false` otherwise.\n\t */\n\tisDomSelectionCorrect( domSelection ) {\n\t\treturn this._isDomSelectionPositionCorrect( domSelection.anchorNode, domSelection.anchorOffset ) &&\n\t\t\tthis._isDomSelectionPositionCorrect( domSelection.focusNode, domSelection.focusOffset );\n\t}\n\n\t/**\n\t * Checks if the given DOM position is a correct place for selection boundary. See {@link #isDomSelectionCorrect}.\n\t *\n\t * @private\n\t * @param {Element} domParent Position parent.\n\t * @param {Number} offset Position offset.\n\t * @returns {Boolean} `true` if given position is at a correct place for selection boundary, `false` otherwise.\n\t */\n\t_isDomSelectionPositionCorrect( domParent, offset ) {\n\t\t// If selection is before or in the middle of inline filler string, it is incorrect.\n\t\tif ( isText( domParent ) && startsWithFiller( domParent ) && offset < INLINE_FILLER_LENGTH ) {\n\t\t\t// Selection in a text node, at wrong position (before or in the middle of filler).\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.isElement( domParent ) && startsWithFiller( domParent.childNodes[ offset ] ) ) {\n\t\t\t// Selection in an element node, before filler text node.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t// If selection is in `view.UIElement`, it is incorrect. Note that `mapDomToView()` returns `view.UIElement`\n\t\t// also for any dom element that is inside the view ui element (so we don't need to perform any additional checks).\n\t\tif ( viewParent && viewParent.is( 'uiElement' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Takes text data from a given {@link module:engine/view/text~Text#data} and processes it so\n\t * it is correctly displayed in the DOM.\n\t *\n\t * Following changes are done:\n\t *\n\t * * a space at the beginning is changed to `&nbsp;` if this is the first text node in its container\n\t * element or if a previous text node ends with a space character,\n\t * * space at the end of the text node is changed to `&nbsp;` if there are two spaces at the end of a node or if next node\n\t * starts with a space or if it is the last text node in its container,\n\t * * remaining spaces are replaced to a chain of spaces and `&nbsp;` (e.g. `'x   x'` becomes `'x &nbsp; x'`).\n\t *\n\t * Content of {@link #preElements} is not processed.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node View text node to process.\n\t * @returns {String} Processed text data.\n\t */\n\t_processDataFromViewText( node ) {\n\t\tlet data = node.data;\n\n\t\t// If any of node ancestors has a name which is in `preElements` array, then currently processed\n\t\t// view text node is (will be) in preformatted element. We should not change whitespaces then.\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn data;\n\t\t}\n\n\t\t// 1. Replace the first space with a nbsp if the previous node ends with a space or there is no previous node\n\t\t// (container element boundary).\n\t\tif ( data.charAt( 0 ) == ' ' ) {\n\t\t\tconst prevNode = this._getTouchingViewTextNode( node, false );\n\t\t\tconst prevEndsWithSpace = prevNode && this._nodeEndsWithSpace( prevNode );\n\n\t\t\tif ( prevEndsWithSpace || !prevNode ) {\n\t\t\t\tdata = '\\u00A0' + data.substr( 1 );\n\t\t\t}\n\t\t}\n\n\t\t// 2. Replace the last space with nbsp if there are two spaces at the end or if the next node starts with space or there is no\n\t\t// next node (container element boundary).\n\t\t//\n\t\t// Keep in mind that Firefox prefers $nbsp; before tag, not inside it:\n\t\t//\n\t\t// Foo <span>&nbsp;bar</span>  <-- bad.\n\t\t// Foo&nbsp;<span> bar</span>  <-- good.\n\t\t//\n\t\t// More here: https://github.com/ckeditor/ckeditor5-engine/issues/1747.\n\t\tif ( data.charAt( data.length - 1 ) == ' ' ) {\n\t\t\tconst nextNode = this._getTouchingViewTextNode( node, true );\n\n\t\t\tif ( data.charAt( data.length - 2 ) == ' ' || !nextNode || nextNode.data.charAt( 0 ) == ' ' ) {\n\t\t\t\tdata = data.substr( 0, data.length - 1 ) + '\\u00A0';\n\t\t\t}\n\t\t}\n\n\t\t// 3. Create space+nbsp pairs.\n\t\treturn data.replace( / {2}/g, ' \\u00A0' );\n\t}\n\n\t/**\n\t * Checks whether given node ends with a space character after changing appropriate space characters to `&nbsp;`s.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node Node to check.\n\t * @returns {Boolean} `true` if given `node` ends with space, `false` otherwise.\n\t */\n\t_nodeEndsWithSpace( node ) {\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst data = this._processDataFromViewText( node );\n\n\t\treturn data.charAt( data.length - 1 ) == ' ';\n\t}\n\n\t/**\n\t * Takes text data from native `Text` node and processes it to a correct {@link module:engine/view/text~Text view text node} data.\n\t *\n\t * Following changes are done:\n\t *\n\t * * multiple whitespaces are replaced to a single space,\n\t * * space at the beginning of a text node is removed if it is the first text node in its container\n\t * element or if the previous text node ends with a space character,\n\t * * space at the end of the text node is removed if there are two spaces at the end of a node or if next node\n\t * starts with a space or if it is the last text node in its container\n\t * * nbsps are converted to spaces.\n\t *\n\t * @param {Node} node DOM text node to process.\n\t * @returns {String} Processed data.\n\t * @private\n\t */\n\t_processDataFromDomText( node ) {\n\t\tlet data = node.data;\n\n\t\tif ( _hasDomParentOfType( node, this.preElements ) ) {\n\t\t\treturn getDataWithoutFiller( node );\n\t\t}\n\n\t\t// Change all consecutive whitespace characters (from the [ \\n\\t\\r] set –\n\t\t// see https://github.com/ckeditor/ckeditor5-engine/issues/822#issuecomment-311670249) to a single space character.\n\t\t// That's how multiple whitespaces are treated when rendered, so we normalize those whitespaces.\n\t\t// We're replacing 1+ (and not 2+) to also normalize singular \\n\\t\\r characters (#822).\n\t\tdata = data.replace( /[ \\n\\t\\r]{1,}/g, ' ' );\n\n\t\tconst prevNode = this._getTouchingInlineDomNode( node, false );\n\t\tconst nextNode = this._getTouchingInlineDomNode( node, true );\n\n\t\tconst shouldLeftTrim = this._checkShouldLeftTrimDomText( prevNode );\n\t\tconst shouldRightTrim = this._checkShouldRightTrimDomText( node, nextNode );\n\n\t\t// If the previous dom text node does not exist or it ends by whitespace character, remove space character from the beginning\n\t\t// of this text node. Such space character is treated as a whitespace.\n\t\tif ( shouldLeftTrim ) {\n\t\t\tdata = data.replace( /^ /, '' );\n\t\t}\n\n\t\t// If the next text node does not exist remove space character from the end of this text node.\n\t\tif ( shouldRightTrim ) {\n\t\t\tdata = data.replace( / $/, '' );\n\t\t}\n\n\t\t// At the beginning and end of a block element, Firefox inserts normal space + <br> instead of non-breaking space.\n\t\t// This means that the text node starts/end with normal space instead of non-breaking space.\n\t\t// This causes a problem because the normal space would be removed in `.replace` calls above. To prevent that,\n\t\t// the inline filler is removed only after the data is initially processed (by the `.replace` above). See ckeditor5#692.\n\t\tdata = getDataWithoutFiller( new Text( data ) );\n\n\t\t// At this point we should have removed all whitespaces from DOM text data.\n\t\t//\n\t\t// Now, We will reverse the process that happens in `_processDataFromViewText`.\n\t\t//\n\t\t// We have to change &nbsp; chars, that were in DOM text data because of rendering reasons, to spaces.\n\t\t// First, change all ` \\u00A0` pairs (space + &nbsp;) to two spaces. DOM converter changes two spaces from model/view to\n\t\t// ` \\u00A0` to ensure proper rendering. Since here we convert back, we recognize those pairs and change them back to `  `.\n\t\tdata = data.replace( / \\u00A0/g, '  ' );\n\n\t\t// Then, let's change the last nbsp to a space.\n\t\tif ( /( |\\u00A0)\\u00A0$/.test( data ) || !nextNode || ( nextNode.data && nextNode.data.charAt( 0 ) == ' ' ) ) {\n\t\t\tdata = data.replace( /\\u00A0$/, ' ' );\n\t\t}\n\n\t\t// Then, change &nbsp; character that is at the beginning of the text node to space character.\n\t\t// We do that replacement only if this is the first node or the previous node ends on whitespace character.\n\t\tif ( shouldLeftTrim ) {\n\t\t\tdata = data.replace( /^\\u00A0/, ' ' );\n\t\t}\n\n\t\t// At this point, all whitespaces should be removed and all &nbsp; created for rendering reasons should be\n\t\t// changed to normal space. All left &nbsp; are &nbsp; inserted intentionally.\n\t\treturn data;\n\t}\n\n\t/**\n\t * Helper function which checks if a DOM text node, preceded by the given `prevNode` should\n\t * be trimmed from the left side.\n\t *\n\t * @param {Node} prevNode\n\t */\n\t_checkShouldLeftTrimDomText( prevNode ) {\n\t\tif ( !prevNode ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( isElement( prevNode ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn /[^\\S\\u00A0]/.test( prevNode.data.charAt( prevNode.data.length - 1 ) );\n\t}\n\n\t/**\n\t * Helper function which checks if a DOM text node, succeeded by the given `nextNode` should\n\t * be trimmed from the right side.\n\t *\n\t * @param {Node} node\n\t * @param {Node} nextNode\n\t */\n\t_checkShouldRightTrimDomText( node, nextNode ) {\n\t\tif ( nextNode ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !startsWithFiller( node );\n\t}\n\n\t/**\n\t * Helper function. For given {@link module:engine/view/text~Text view text node}, it finds previous or next sibling\n\t * that is contained in the same container element. If there is no such sibling, `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} node Reference node.\n\t * @param {Boolean} getNext\n\t * @returns {module:engine/view/text~Text|null} Touching text node or `null` if there is no next or previous touching text node.\n\t */\n\t_getTouchingViewTextNode( node, getNext ) {\n\t\tconst treeWalker = new ViewTreeWalker( {\n\t\t\tstartPosition: getNext ? ViewPosition._createAfter( node ) : ViewPosition._createBefore( node ),\n\t\t\tdirection: getNext ? 'forward' : 'backward'\n\t\t} );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\t// ViewContainerElement is found on a way to next ViewText node, so given `node` was first/last\n\t\t\t// text node in its container element.\n\t\t\tif ( value.item.is( 'containerElement' ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// <br> found – it works like a block boundary, so do not scan further.\n\t\t\telse if ( value.item.is( 'br' ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// Found a text node in the same container element.\n\t\t\telse if ( value.item.is( 'textProxy' ) ) {\n\t\t\t\treturn value.item;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Helper function. For the given text node, it finds the closest touching node which is either\n\t * a text node or a `<br>`. The search is terminated at block element boundaries and if a matching node\n\t * wasn't found so far, `null` is returned.\n\t *\n\t * In the following DOM structure:\n\t *\n\t *\t\t<p>foo<b>bar</b><br>bom</p>\n\t *\n\t * * `foo` doesn't have its previous touching inline node (`null` is returned),\n\t * * `foo`'s next touching inline node is `bar`\n\t * * `bar`'s next touching inline node is `<br>`\n\t *\n\t * This method returns text nodes and `<br>` elements because these types of nodes affect how\n\t * spaces in the given text node need to be converted.\n\t *\n\t * @private\n\t * @param {Text} node\n\t * @param {Boolean} getNext\n\t * @returns {Text|Element|null}\n\t */\n\t_getTouchingInlineDomNode( node, getNext ) {\n\t\tif ( !node.parentNode ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst direction = getNext ? 'nextNode' : 'previousNode';\n\t\tconst document = node.ownerDocument;\n\t\tconst topmostParent = getAncestors( node )[ 0 ];\n\n\t\tconst treeWalker = document.createTreeWalker( topmostParent, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, {\n\t\t\tacceptNode( node ) {\n\t\t\t\tif ( isText( node ) ) {\n\t\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\n\t\t\t\t}\n\n\t\t\t\tif ( node.tagName == 'BR' ) {\n\t\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\n\t\t\t\t}\n\n\t\t\t\treturn NodeFilter.FILTER_SKIP;\n\t\t\t}\n\t\t} );\n\n\t\ttreeWalker.currentNode = node;\n\n\t\tconst touchingNode = treeWalker[ direction ]();\n\n\t\tif ( touchingNode !== null ) {\n\t\t\tconst lca = getCommonAncestor( node, touchingNode );\n\n\t\t\t// If there is common ancestor between the text node and next/prev text node,\n\t\t\t// and there are no block elements on a way from the text node to that ancestor,\n\t\t\t// and there are no block elements on a way from next/prev text node to that ancestor...\n\t\t\tif (\n\t\t\t\tlca &&\n\t\t\t\t!_hasDomParentOfType( node, this.blockElements, lca ) &&\n\t\t\t\t!_hasDomParentOfType( touchingNode, this.blockElements, lca )\n\t\t\t) {\n\t\t\t\t// Then they are in the same container element.\n\t\t\t\treturn touchingNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n// Helper function.\n// Used to check if given native `Element` or `Text` node has parent with tag name from `types` array.\n//\n// @param {Node} node\n// @param {Array.<String>} types\n// @param {Boolean} [boundaryParent] Can be given if parents should be checked up to a given element (excluding that element).\n// @returns {Boolean} `true` if such parent exists or `false` if it does not.\nfunction _hasDomParentOfType( node, types, boundaryParent ) {\n\tlet parents = getAncestors( node );\n\n\tif ( boundaryParent ) {\n\t\tparents = parents.slice( parents.indexOf( boundaryParent ) + 1 );\n\t}\n\n\treturn parents.some( parent => parent.tagName && types.includes( parent.tagName.toLowerCase() ) );\n}\n\n// A helper that executes given callback for each DOM node's ancestor, starting from the given node\n// and ending in document#documentElement.\n//\n// @param {Node} node\n// @param {Function} callback A callback to be executed for each ancestor.\nfunction forEachDomNodeAncestor( node, callback ) {\n\twhile ( node && node != global.document ) {\n\t\tcallback( node );\n\t\tnode = node.parentNode;\n\t}\n}\n\n// Checks if given node is a nbsp block filler.\n//\n// A &nbsp; is a block filler only if it is a single child of a block element.\n//\n// @param {Node} domNode DOM node.\n// @returns {Boolean}\nfunction isNbspBlockFiller( domNode, blockElements ) {\n\tconst isNBSP = isText( domNode ) && domNode.data == '\\u00A0';\n\n\treturn isNBSP && hasBlockParent( domNode, blockElements ) && domNode.parentNode.childNodes.length === 1;\n}\n\n// Checks if domNode has block parent.\n//\n// @param {Node} domNode DOM node.\n// @returns {Boolean}\nfunction hasBlockParent( domNode, blockElements ) {\n\tconst parent = domNode.parentNode;\n\n\treturn parent && parent.tagName && blockElements.includes( parent.tagName.toLowerCase() );\n}\n\n/**\n * Enum representing type of the block filler.\n *\n * Possible values:\n *\n * * `br` - for `<br>` block filler used in editing view,\n * * `nbsp` - for `&nbsp;` block fillers used in the data.\n *\n * @typedef {String} module:engine/view/filler~BlockFillerMode\n */\n"]}]}