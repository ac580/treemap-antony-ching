{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/conversion/modelconsumable.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/conversion/modelconsumable.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/conversion/modelconsumable.js"],"names":["TextProxy","ModelConsumable","constructor","_consumable","Map","_textProxyRegistry","add","item","type","_normalizeConsumableType","_getSymbolForTextProxy","has","set","get","consume","test","itemConsumables","undefined","value","revert","textProxy","symbol","startMap","startOffset","endMap","endOffset","parent","_addSymbolForTextProxy","start","end","Symbol","parts","split","length"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/modelconsumable\n */\n\nimport TextProxy from '../model/textproxy';\n\n/**\n * Manages a list of consumable values for {@link module:engine/model/item~Item model items}.\n *\n * Consumables are various aspects of the model. A model item can be broken down into singular properties that might be\n * taken into consideration when converting that item.\n *\n * `ModelConsumable` is used by {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} while analyzing changed\n * parts of {@link module:engine/model/document~Document the document}. The added / changed / removed model items are broken down\n * into singular properties (the item itself and it's attributes). All those parts are saved in `ModelConsumable`. Then,\n * during conversion, when given part of model item is converted (i.e. the view element has been inserted into the view,\n * but without attributes), consumable value is removed from `ModelConsumable`.\n *\n * For model items, `ModelConsumable` stores consumable values of one of following types: `insert`, `addattribute:<attributeKey>`,\n * `changeattributes:<attributeKey>`, `removeattributes:<attributeKey>`.\n *\n * In most cases, it is enough to let {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * gather consumable values, so there is no need to use\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#add add method} directly.\n * However, it is important to understand how consumable values can be\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n * See {@link module:engine/conversion/downcasthelpers default downcast converters} for more information.\n *\n * Keep in mind, that one conversion event may have multiple callbacks (converters) attached to it. Each of those is\n * able to convert one or more parts of the model. However, when one of those callbacks actually converts\n * something, other should not, because they would duplicate the results. Using `ModelConsumable` helps avoiding\n * this situation, because callbacks should only convert those values, which were not yet consumed from `ModelConsumable`.\n *\n * Consuming multiple values in a single callback:\n *\n *\t\t// Converter for custom `image` element that might have a `caption` element inside which changes\n *\t\t// how the image is displayed in the view:\n *\t\t//\n *\t\t// Model:\n *\t\t//\n *\t\t// [image]\n *\t\t//   └─ [caption]\n *\t\t//       └─ foo\n *\t\t//\n *\t\t// View:\n *\t\t//\n *\t\t// <figure>\n *\t\t//   ├─ <img />\n *\t\t//   └─ <caption>\n *\t\t//       └─ foo\n *\t\tmodelConversionDispatcher.on( 'insert:image', ( evt, data, conversionApi ) => {\n *\t\t\t// First, consume the `image` element.\n *\t\t\tconversionApi.consumable.consume( data.item, 'insert' );\n *\n *\t\t\t// Just create normal image element for the view.\n *\t\t\t// Maybe it will be \"decorated\" later.\n *\t\t\tconst viewImage = new ViewElement( 'img' );\n *\t\t\tconst insertPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\t\t\tconst viewWriter = conversionApi.writer;\n *\n *\t\t\t// Check if the `image` element has children.\n *\t\t\tif ( data.item.childCount > 0 ) {\n *\t\t\t\tconst modelCaption = data.item.getChild( 0 );\n *\n *\t\t\t\t// `modelCaption` insertion change is consumed from consumable values.\n *\t\t\t\t// It will not be converted by other converters, but it's children (probably some text) will be.\n *\t\t\t\t// Through mapping, converters for text will know where to insert contents of `modelCaption`.\n *\t\t\t\tif ( conversionApi.consumable.consume( modelCaption, 'insert' ) ) {\n *\t\t\t\t\tconst viewCaption = new ViewElement( 'figcaption' );\n *\n *\t\t\t\t\tconst viewImageHolder = new ViewElement( 'figure', null, [ viewImage, viewCaption ] );\n *\n *\t\t\t\t\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\n *\t\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImageHolder );\n *\t\t\t\t\tviewWriter.insert( insertPosition, viewImageHolder );\n *\t\t\t\t}\n *\t\t\t} else {\n *\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImage );\n *\t\t\t\tviewWriter.insert( insertPosition, viewImage );\n *\t\t\t}\n *\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class ModelConsumable {\n\t/**\n\t * Creates an empty consumables list.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Contains list of consumable values.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_consumable\n\t\t */\n\t\tthis._consumable = new Map();\n\n\t\t/**\n\t\t * For each {@link module:engine/model/textproxy~TextProxy} added to `ModelConsumable`, this registry holds parent\n\t\t * of that `TextProxy` and start and end indices of that `TextProxy`. This allows identification of `TextProxy`\n\t\t * instances that points to the same part of the model but are different instances. Each distinct `TextProxy`\n\t\t * is given unique `Symbol` which is then registered as consumable. This process is transparent for `ModelConsumable`\n\t\t * API user because whenever `TextProxy` is added, tested, consumed or reverted, internal mechanisms of\n\t\t * `ModelConsumable` translates `TextProxy` to that unique `Symbol`.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_textProxyRegistry\n\t\t */\n\t\tthis._textProxyRegistry = new Map();\n\t}\n\n\t/**\n\t * Adds a consumable value to the consumables list and links it with given model item.\n\t *\n\t *\t\tmodelConsumable.add( modelElement, 'insert' ); // Add `modelElement` insertion change to consumable values.\n\t *\t\tmodelConsumable.add( modelElement, 'addAttribute:bold' ); // Add `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.add( modelElement, 'removeAttribute:bold' ); // Add `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.add( modelSelection, 'selection' ); // Add `modelSelection` to consumable values.\n\t *\t\tmodelConsumable.add( modelRange, 'range' ); // Add `modelRange` to consumable values.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection that has the consumable.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t */\n\tadd( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tif ( !this._consumable.has( item ) ) {\n\t\t\tthis._consumable.set( item, new Map() );\n\t\t}\n\n\t\tthis._consumable.get( item ).set( type, true );\n\t}\n\n\t/**\n\t * Removes given consumable value from given model item.\n\t *\n\t *\t\tmodelConsumable.consume( modelElement, 'insert' ); // Remove `modelElement` insertion change from consumable values.\n\t *\t\tmodelConsumable.consume( modelElement, 'addAttribute:bold' ); // Remove `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.consume( modelElement, 'removeAttribute:bold' ); // Remove `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.consume( modelSelection, 'selection' ); // Remove `modelSelection` from consumable values.\n\t *\t\tmodelConsumable.consume( modelRange, 'range' ); // Remove 'modelRange' from consumable values.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection from which consumable will be consumed.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t * @returns {Boolean} `true` if consumable value was available and was consumed, `false` otherwise.\n\t */\n\tconsume( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tif ( this.test( item, type ) ) {\n\t\t\tthis._consumable.get( item ).set( type, false );\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Tests whether there is a consumable value of given type connected with given model item.\n\t *\n\t *\t\tmodelConsumable.test( modelElement, 'insert' ); // Check for `modelElement` insertion change.\n\t *\t\tmodelConsumable.test( modelElement, 'addAttribute:bold' ); // Check for `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.test( modelElement, 'removeAttribute:bold' ); // Check for `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.test( modelSelection, 'selection' ); // Check if `modelSelection` is consumable.\n\t *\t\tmodelConsumable.test( modelRange, 'range' ); // Check if `modelRange` is consumable.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection to be tested.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t * @returns {null|Boolean} `null` if such consumable was never added, `false` if the consumable values was\n\t * already consumed or `true` if it was added and not consumed yet.\n\t */\n\ttest( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tconst itemConsumables = this._consumable.get( item );\n\n\t\tif ( itemConsumables === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst value = itemConsumables.get( type );\n\n\t\tif ( value === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Reverts consuming of consumable value.\n\t *\n\t *\t\tmodelConsumable.revert( modelElement, 'insert' ); // Revert consuming `modelElement` insertion change.\n\t *\t\tmodelConsumable.revert( modelElement, 'addAttribute:bold' ); // Revert consuming `bold` attribute insert from `modelElement`.\n\t *\t\tmodelConsumable.revert( modelElement, 'removeAttribute:bold' ); // Revert consuming `bold` attribute remove from `modelElement`.\n\t *\t\tmodelConsumable.revert( modelSelection, 'selection' ); // Revert consuming `modelSelection`.\n\t *\t\tmodelConsumable.revert( modelRange, 'range' ); // Revert consuming `modelRange`.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection to be reverted.\n\t * @param {String} type Consumable type.\n\t * @returns {null|Boolean} `true` if consumable has been reversed, `false` otherwise. `null` if the consumable has\n\t * never been added.\n\t */\n\trevert( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tconst test = this.test( item, type );\n\n\t\tif ( test === false ) {\n\t\t\tthis._consumable.get( item ).set( type, true );\n\n\t\t\treturn true;\n\t\t} else if ( test === true ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets a unique symbol for passed {@link module:engine/model/textproxy~TextProxy} instance. All `TextProxy` instances that\n\t * have same parent, same start index and same end index will get the same symbol.\n\t *\n\t * Used internally to correctly consume `TextProxy` instances.\n\t *\n\t * @private\n\t * @param {module:engine/model/textproxy~TextProxy} textProxy `TextProxy` instance to get a symbol for.\n\t * @returns {Symbol} Symbol representing all equal instances of `TextProxy`.\n\t */\n\t_getSymbolForTextProxy( textProxy ) {\n\t\tlet symbol = null;\n\n\t\tconst startMap = this._textProxyRegistry.get( textProxy.startOffset );\n\n\t\tif ( startMap ) {\n\t\t\tconst endMap = startMap.get( textProxy.endOffset );\n\n\t\t\tif ( endMap ) {\n\t\t\t\tsymbol = endMap.get( textProxy.parent );\n\t\t\t}\n\t\t}\n\n\t\tif ( !symbol ) {\n\t\t\tsymbol = this._addSymbolForTextProxy( textProxy.startOffset, textProxy.endOffset, textProxy.parent );\n\t\t}\n\n\t\treturn symbol;\n\t}\n\n\t/**\n\t * Adds a symbol for given properties that characterizes a {@link module:engine/model/textproxy~TextProxy} instance.\n\t *\n\t * Used internally to correctly consume `TextProxy` instances.\n\t *\n\t * @private\n\t * @param {Number} startIndex Text proxy start index in it's parent.\n\t * @param {Number} endIndex Text proxy end index in it's parent.\n\t * @param {module:engine/model/element~Element} parent Text proxy parent.\n\t * @returns {Symbol} Symbol generated for given properties.\n\t */\n\t_addSymbolForTextProxy( start, end, parent ) {\n\t\tconst symbol = Symbol( 'textProxySymbol' );\n\t\tlet startMap, endMap;\n\n\t\tstartMap = this._textProxyRegistry.get( start );\n\n\t\tif ( !startMap ) {\n\t\t\tstartMap = new Map();\n\t\t\tthis._textProxyRegistry.set( start, startMap );\n\t\t}\n\n\t\tendMap = startMap.get( end );\n\n\t\tif ( !endMap ) {\n\t\t\tendMap = new Map();\n\t\t\tstartMap.set( end, endMap );\n\t\t}\n\n\t\tendMap.set( parent, symbol );\n\n\t\treturn symbol;\n\t}\n}\n\n// Returns a normalized consumable type name from given string. A normalized consumable type name is a string that has\n// at most one colon, for example: `insert` or `addMarker:highlight`. If string to normalize has more \"parts\" (more colons),\n// the other parts are dropped, for example: `addattribute:bold:$text` -> `addattributes:bold`.\n//\n// @param {String} type Consumable type.\n// @returns {String} Normalized consumable type.\nfunction _normalizeConsumableType( type ) {\n\tconst parts = type.split( ':' );\n\n\treturn parts.length > 1 ? parts[ 0 ] + ':' + parts[ 1 ] : parts[ 0 ];\n}\n"]}]}