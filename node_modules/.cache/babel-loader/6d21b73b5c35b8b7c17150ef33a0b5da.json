{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-autoformat/src/autoformat.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-autoformat/src/autoformat.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-autoformat/src/autoformat.js"],"names":["BlockAutoformatEditing","InlineAutoformatEditing","Plugin","Autoformat","pluginName","afterInit","_addListAutoformats","_addBasicStylesAutoformats","_addHeadingAutoformats","_addBlockQuoteAutoformats","_addCodeBlockAutoformats","commands","editor","get","boldCallback","getCallbackFunctionForInlineAutoformat","italicCallback","codeCallback","command","modelElements","filter","name","match","forEach","commandValue","level","pattern","RegExp","isEnabled","execute","value","attributeKey","writer","rangesToFormat","validRanges","model","schema","getValidRanges","range","setAttribute","removeSelectionAttribute"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/autoformat\n */\n\nimport BlockAutoformatEditing from './blockautoformatediting';\nimport InlineAutoformatEditing from './inlineautoformatediting';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * Enables a set of predefined autoformatting actions.\n *\n * For a detailed overview, check the {@glink features/autoformat Autoformatting feature documentation}\n * and the {@glink api/autoformat package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Autoformat extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Autoformat';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tthis._addListAutoformats();\n\t\tthis._addBasicStylesAutoformats();\n\t\tthis._addHeadingAutoformats();\n\t\tthis._addBlockQuoteAutoformats();\n\t\tthis._addCodeBlockAutoformats();\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:list/list~List}.\n\t *\n\t * When typed:\n\t * - `* ` or `- ` &ndash; A paragraph will be changed to a bulleted list.\n\t * - `1. ` or `1) ` &ndash; A paragraph will be changed to a numbered list (\"1\" can be any digit or a list of digits).\n\t *\n\t * @private\n\t */\n\t_addListAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bulletedList' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^[*-]\\s$/, 'bulletedList' );\n\t\t}\n\n\t\tif ( commands.get( 'numberedList' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^1[.|)]\\s$/, 'numberedList' );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:basic-styles/bold~Bold},\n\t * {@link module:basic-styles/italic~Italic} and {@link module:basic-styles/code~Code}.\n\t *\n\t * When typed:\n\t * - `**foobar**` &ndash; `**` characters are removed and `foobar` is set to bold,\n\t * - `__foobar__` &ndash; `__` characters are removed and `foobar` is set to bold,\n\t * - `*foobar*` &ndash; `*` characters are removed and `foobar` is set to italic,\n\t * - `_foobar_` &ndash; `_` characters are removed and `foobar` is set to italic,\n\t * - ``` `foobar` &ndash; ``` ` ``` characters are removed and `foobar` is set to code.\n\t *\n\t * @private\n\t */\n\t_addBasicStylesAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bold' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tconst boldCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'bold' );\n\n\t\t\tnew InlineAutoformatEditing( this.editor, /(\\*\\*)([^*]+)(\\*\\*)$/g, boldCallback );\n\t\t\tnew InlineAutoformatEditing( this.editor, /(__)([^_]+)(__)$/g, boldCallback );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\n\t\tif ( commands.get( 'italic' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tconst italicCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'italic' );\n\n\t\t\t// The italic autoformatter cannot be triggered by the bold markers, so we need to check the\n\t\t\t// text before the pattern (e.g. `(?:^|[^\\*])`).\n\t\t\tnew InlineAutoformatEditing( this.editor, /(?:^|[^*])(\\*)([^*_]+)(\\*)$/g, italicCallback );\n\t\t\tnew InlineAutoformatEditing( this.editor, /(?:^|[^_])(_)([^_]+)(_)$/g, italicCallback );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\n\t\tif ( commands.get( 'code' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tconst codeCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'code' );\n\n\t\t\tnew InlineAutoformatEditing( this.editor, /(`)([^`]+)(`)$/g, codeCallback );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:heading/heading~Heading}.\n\t *\n\t * It is using a number at the end of the command name to associate it with the proper trigger:\n\t *\n\t * * `heading` with value `heading1` will be executed when typing `#`,\n\t * * `heading` with value `heading2` will be executed when typing `##`,\n\t * * ... up to `heading6` and `######`.\n\t *\n\t * @private\n\t */\n\t_addHeadingAutoformats() {\n\t\tconst command = this.editor.commands.get( 'heading' );\n\n\t\tif ( command ) {\n\t\t\tcommand.modelElements\n\t\t\t\t.filter( name => name.match( /^heading[1-6]$/ ) )\n\t\t\t\t.forEach( commandValue => {\n\t\t\t\t\tconst level = commandValue[ 7 ];\n\t\t\t\t\tconst pattern = new RegExp( `^(#{${ level }})\\\\s$` );\n\n\t\t\t\t\t// eslint-disable-next-line no-new\n\t\t\t\t\tnew BlockAutoformatEditing( this.editor, pattern, () => {\n\t\t\t\t\t\tif ( !command.isEnabled ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.editor.execute( 'heading', { value: commandValue } );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:block-quote/blockquote~BlockQuote}.\n\t *\n\t * When typed:\n\t * * `> ` &ndash; A paragraph will be changed to a block quote.\n\t *\n\t * @private\n\t */\n\t_addBlockQuoteAutoformats() {\n\t\tif ( this.editor.commands.get( 'blockQuote' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^>\\s$/, 'blockQuote' );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:code-block/codeblock~CodeBlock}.\n\t *\n\t * When typed:\n\t * - `` ``` `` &ndash; A paragraph will be changed to a code block.\n\t *\n\t * @private\n\t */\n\t_addCodeBlockAutoformats() {\n\t\tif ( this.editor.commands.get( 'codeBlock' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^```$/, 'codeBlock' );\n\t\t}\n\t}\n}\n\n// Helper function for getting `InlineAutoformatEditing` callbacks that checks if command is enabled.\n//\n// @param {module:core/editor/editor~Editor} editor\n// @param {String} attributeKey\n// @returns {Function}\nfunction getCallbackFunctionForInlineAutoformat( editor, attributeKey ) {\n\treturn ( writer, rangesToFormat ) => {\n\t\tconst command = editor.commands.get( attributeKey );\n\n\t\tif ( !command.isEnabled ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, attributeKey );\n\n\t\tfor ( const range of validRanges ) {\n\t\t\twriter.setAttribute( attributeKey, true, range );\n\t\t}\n\n\t\t// After applying attribute to the text, remove given attribute from the selection.\n\t\t// This way user is able to type a text without attribute used by auto formatter.\n\t\twriter.removeSelectionAttribute( attributeKey );\n\t};\n}\n"]}]}