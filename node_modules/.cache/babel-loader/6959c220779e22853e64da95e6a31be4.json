{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-paragraph/src/paragraph.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-paragraph/src/paragraph.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIHBhcmFncmFwaC9wYXJhZ3JhcGgKICovCmltcG9ydCBQYXJhZ3JhcGhDb21tYW5kIGZyb20gJy4vcGFyYWdyYXBoY29tbWFuZCc7CmltcG9ydCBQbHVnaW4gZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS1jb3JlL3NyYy9wbHVnaW4nOwovKioKICogVGhlIHBhcmFncmFwaCBmZWF0dXJlIGZvciB0aGUgZWRpdG9yLgogKgogKiBJdCBpbnRyb2R1Y2VzIHRoZSBgPHBhcmFncmFwaD5gIGVsZW1lbnQgaW4gdGhlIG1vZGVsIHdoaWNoIHJlbmRlcnMgYXMgYSBgPHA+YCBlbGVtZW50IGluIHRoZSBET00gYW5kIGRhdGEuCiAqCiAqIEBleHRlbmRzIG1vZHVsZTpjb3JlL3BsdWdpbn5QbHVnaW4KICovCgpleHBvcnQgZGVmYXVsdCBjbGFzcyBQYXJhZ3JhcGggZXh0ZW5kcyBQbHVnaW4gewogIC8qKgogICAqIEBpbmhlcml0RG9jCiAgICovCiAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkgewogICAgcmV0dXJuICdQYXJhZ3JhcGgnOwogIH0KICAvKioKICAgKiBAaW5oZXJpdERvYwogICAqLwoKCiAgaW5pdCgpIHsKICAgIGNvbnN0IGVkaXRvciA9IHRoaXMuZWRpdG9yOwogICAgY29uc3QgbW9kZWwgPSBlZGl0b3IubW9kZWw7CiAgICBjb25zdCBkYXRhID0gZWRpdG9yLmRhdGE7CiAgICBlZGl0b3IuY29tbWFuZHMuYWRkKCdwYXJhZ3JhcGgnLCBuZXcgUGFyYWdyYXBoQ29tbWFuZChlZGl0b3IpKTsgLy8gU2NoZW1hLgoKICAgIG1vZGVsLnNjaGVtYS5yZWdpc3RlcigncGFyYWdyYXBoJywgewogICAgICBpbmhlcml0QWxsRnJvbTogJyRibG9jaycKICAgIH0pOwogICAgZWRpdG9yLmNvbnZlcnNpb24uZWxlbWVudFRvRWxlbWVudCh7CiAgICAgIG1vZGVsOiAncGFyYWdyYXBoJywKICAgICAgdmlldzogJ3AnCiAgICB9KTsgLy8gQ29udGVudCBhdXRvcGFyYWdyYXBoaW5nLiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLy8gSGFuZGxlcyBlbGVtZW50IHdoaWNoIGhhcyBub3QgYmVlbiBjb252ZXJ0ZWQgYnkgYW55IHBsdWdpbiBhbmQgY2hlY2tzIGlmIGl0IHdvdWxkIGJlIGNvbnZlcnRlZCBpZgogICAgLy8gd2Ugd3JhcCBpdCBpbiBhIHBhcmFncmFwaCBvciBjaGFuZ2UgaXQgdG8gYSBwYXJhZ3JhcGguCgogICAgZWRpdG9yLmNvbnZlcnNpb24uZm9yKCd1cGNhc3QnKS5lbGVtZW50VG9FbGVtZW50KHsKICAgICAgbW9kZWw6ICh2aWV3RWxlbWVudCwgbW9kZWxXcml0ZXIpID0+IHsKICAgICAgICBpZiAoIVBhcmFncmFwaC5wYXJhZ3JhcGhMaWtlRWxlbWVudHMuaGFzKHZpZXdFbGVtZW50Lm5hbWUpKSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9IC8vIERvIG5vdCBhdXRvLXBhcmFncmFwaCBlbXB0eSBlbGVtZW50cy4KCgogICAgICAgIGlmICh2aWV3RWxlbWVudC5pc0VtcHR5KSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CgogICAgICAgIHJldHVybiBtb2RlbFdyaXRlci5jcmVhdGVFbGVtZW50KCdwYXJhZ3JhcGgnKTsKICAgICAgfSwKICAgICAgY29udmVydGVyUHJpb3JpdHk6ICdsb3cnCiAgICB9KTsKICAgIGRhdGEudXBjYXN0RGlzcGF0Y2hlci5vbignZWxlbWVudCcsIChldnQsIGRhdGEsIGNvbnZlcnNpb25BcGkpID0+IHsKICAgICAgLy8gRG8gbm90IHRyeSBhdXRvLXBhcmFncmFwaGluZyBpZiB0aGUgZWxlbWVudCB3YXMgYWxyZWFkeSBjb252ZXJ0ZWQuCiAgICAgIGlmICghY29udmVyc2lvbkFwaS5jb25zdW1hYmxlLnRlc3QoZGF0YS52aWV3SXRlbSwgewogICAgICAgIG5hbWU6IGRhdGEudmlld0l0ZW0ubmFtZQogICAgICB9KSkgewogICAgICAgIHJldHVybjsKICAgICAgfSAvLyBJZiB0aGUgZWxlbWVudCBpcyBub3QgcGFyYWdyYXBoLWxpa2UgdHJ5IHdyYXBwaW5nIGl0IGluIGEgcGFyYWdyYXBoLgoKCiAgICAgIGlmIChpc1BhcmFncmFwaGFibGUoZGF0YS52aWV3SXRlbSwgZGF0YS5tb2RlbEN1cnNvciwgY29udmVyc2lvbkFwaS5zY2hlbWEpKSB7CiAgICAgICAgT2JqZWN0LmFzc2lnbihkYXRhLCB3cmFwSW5QYXJhZ3JhcGgoZGF0YS52aWV3SXRlbSwgZGF0YS5tb2RlbEN1cnNvciwgY29udmVyc2lvbkFwaSkpOwogICAgICB9CiAgICB9LCB7CiAgICAgIHByaW9yaXR5OiAnbG93JwogICAgfSk7IC8vIEhhbmRsZXMgbm90IGNvbnZlcnRlZCB0ZXh0IG5vZGVzIGFuZCBjaGVja3MgaWYgd291bGQgYmUgY29udmVydGVkIGlmIHdlIHdyYXBzIHRoZW4gYnkgYSBwYXJhZ3JhcGguCgogICAgZGF0YS51cGNhc3REaXNwYXRjaGVyLm9uKCd0ZXh0JywgKGV2dCwgZGF0YSwgY29udmVyc2lvbkFwaSkgPT4gewogICAgICAvLyBXaGVuIG5vZGUgaXMgYWxyZWFkeSBjb252ZXJ0ZWQgdGhlbiBkbyBub3RoaW5nLgogICAgICBpZiAoZGF0YS5tb2RlbFJhbmdlKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoaXNQYXJhZ3JhcGhhYmxlKGRhdGEudmlld0l0ZW0sIGRhdGEubW9kZWxDdXJzb3IsIGNvbnZlcnNpb25BcGkuc2NoZW1hKSkgewogICAgICAgIE9iamVjdC5hc3NpZ24oZGF0YSwgd3JhcEluUGFyYWdyYXBoKGRhdGEudmlld0l0ZW0sIGRhdGEubW9kZWxDdXJzb3IsIGNvbnZlcnNpb25BcGkpKTsKICAgICAgfQogICAgfSwgewogICAgICBwcmlvcml0eTogJ2xvd2VzdCcKICAgIH0pOyAvLyBFbXB0eSByb290cyBhdXRvcGFyYWdyYXBoaW5nLiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLy8gUG9zdC1maXhlciB3aGljaCB0YWtlcyBjYXJlIG9mIGFkZGluZyBlbXB0eSBwYXJhZ3JhcGggZWxlbWVudHMgdG8gZW1wdHkgcm9vdHMuCiAgICAvLyBCZXNpZGVzIGZpeGluZyBjb250ZW50IG9uICNjaGFuZ2VzRG9uZSB3ZSBhbHNvIG5lZWQgdG8gaGFuZGxlIGVkaXRvci5kYXRhI3JlYWR5IGV2ZW50IGJlY2F1c2UKICAgIC8vIGlmIGluaXRpYWwgZGF0YSBpcyBlbXB0eSBvciBzZXREYXRhKCkgd2Fzbid0IGV2ZW4gY2FsbGVkIHRoZXJlIHdpbGwgYmUgbm8gI2NoYW5nZSBmaXJlZC4KCiAgICBtb2RlbC5kb2N1bWVudC5yZWdpc3RlclBvc3RGaXhlcih3cml0ZXIgPT4gdGhpcy5fYXV0b3BhcmFncmFwaEVtcHR5Um9vdHMod3JpdGVyKSk7CiAgICBlZGl0b3IuZGF0YS5vbigncmVhZHknLCAoKSA9PiB7CiAgICAgIG1vZGVsLmVucXVldWVDaGFuZ2UoJ3RyYW5zcGFyZW50Jywgd3JpdGVyID0+IHRoaXMuX2F1dG9wYXJhZ3JhcGhFbXB0eVJvb3RzKHdyaXRlcikpOwogICAgfSwgewogICAgICBwcmlvcml0eTogJ2xvd2VzdCcKICAgIH0pOwogIH0KICAvKioKICAgKiBGaXhlcyBhbGwgZW1wdHkgcm9vdHMuCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgYW55IGNoYW5nZSBoYXMgYmVlbiBhcHBsaWVkLCBgZmFsc2VgIG90aGVyd2lzZS4KICAgKi8KCgogIF9hdXRvcGFyYWdyYXBoRW1wdHlSb290cyh3cml0ZXIpIHsKICAgIGNvbnN0IG1vZGVsID0gdGhpcy5lZGl0b3IubW9kZWw7CgogICAgZm9yIChjb25zdCByb290TmFtZSBvZiBtb2RlbC5kb2N1bWVudC5nZXRSb290TmFtZXMoKSkgewogICAgICBjb25zdCByb290ID0gbW9kZWwuZG9jdW1lbnQuZ2V0Um9vdChyb290TmFtZSk7CgogICAgICBpZiAocm9vdC5pc0VtcHR5ICYmIHJvb3Qucm9vdE5hbWUgIT0gJyRncmF2ZXlhcmQnKSB7CiAgICAgICAgLy8gSWYgcGFyYWdyYXBoIGVsZW1lbnQgaXMgYWxsb3dlZCBpbiB0aGUgcm9vdCwgY3JlYXRlIHBhcmFncmFwaCBlbGVtZW50LgogICAgICAgIGlmIChtb2RlbC5zY2hlbWEuY2hlY2tDaGlsZChyb290LCAncGFyYWdyYXBoJykpIHsKICAgICAgICAgIHdyaXRlci5pbnNlcnRFbGVtZW50KCdwYXJhZ3JhcGgnLCByb290KTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCn0KLyoqCiAqIEEgbGlzdCBvZiBlbGVtZW50IG5hbWVzIHdoaWNoIHNob3VsZCBiZSB0cmVhdGVkIGJ5IHRoZSBhdXRvcGFyYWdyYXBoaW5nIGFsZ29yaXRobXMgYXMKICogcGFyYWdyYXBoLWxpa2UuIFRoaXMgbWVhbnMgdGhhdCBlLmcuIHRoZSBmb2xsb3dpbmcgY29udGVudDoKICoKICoJCTxoMT5Gb288L2gxPgogKgkJPHRhYmxlPgogKgkJCTx0cj4KICoJCQkJPHRkPlg8L3RkPgogKgkJCQk8dGQ+CiAqCQkJCQk8dWw+CiAqCQkJCQkJPGxpPlk8L2xpPgogKgkJCQkJCTxsaT5aPC9saT4KICoJCQkJCTwvdWw+CiAqCQkJCTwvdGQ+CiAqCQkJPC90cj4KICoJCTwvdGFibGU+CiAqCiAqIGNvbnRhaW5zIGZpdmUgcGFyYWdyYXBoLWxpa2UgZWxlbWVudHM6IGA8aDE+YCwgdHdvIGA8dGQ+YHMgYW5kIHR3byBgPGxpPmBzLgogKiBIZW5jZSwgaWYgbm9uZSBvZiB0aGUgZmVhdHVyZXMgaXMgZ29pbmcgdG8gY29udmVydCB0aG9zZSBlbGVtZW50cyB0aGUgYWJvdmUgY29udGVudCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgaGFuZGxlZAogKiBieSB0aGUgcGFyYWdyYXBoIGZlYXR1cmUgYW5kIGNvbnZlcnRlZCB0bzoKICoKICoJCTxwPkZvbzwvcD4KICoJCTxwPlg8L3A+CiAqCQk8cD5ZPC9wPgogKgkJPHA+WjwvcD4KICoKICogTm90ZTogVGhlIGA8dGQ+YCBjb250YWluaW5nIHR3byBgPGxpPmAgZWxlbWVudHMgd2FzIGlnbm9yZWQgYXMgdGhlIGlubmVybW9zdCBwYXJhZ3JhcGgtbGlrZSBlbGVtZW50cwogKiBoYXZlIGEgcHJpb3JpdHkgdXBvbiBjb252ZXJzaW9uLgogKgogKiBAbWVtYmVyIHtTZXQuPFN0cmluZz59IG1vZHVsZTpwYXJhZ3JhcGgvcGFyYWdyYXBoflBhcmFncmFwaC5wYXJhZ3JhcGhMaWtlRWxlbWVudHMKICovCgpQYXJhZ3JhcGgucGFyYWdyYXBoTGlrZUVsZW1lbnRzID0gbmV3IFNldChbJ2Jsb2NrcXVvdGUnLCAnZGQnLCAnZGl2JywgJ2R0JywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2xpJywgJ3AnLCAndGQnXSk7CgpmdW5jdGlvbiB3cmFwSW5QYXJhZ3JhcGgoaW5wdXQsIHBvc2l0aW9uLCBjb252ZXJzaW9uQXBpKSB7CiAgY29uc3QgcGFyYWdyYXBoID0gY29udmVyc2lvbkFwaS53cml0ZXIuY3JlYXRlRWxlbWVudCgncGFyYWdyYXBoJyk7CiAgY29udmVyc2lvbkFwaS53cml0ZXIuaW5zZXJ0KHBhcmFncmFwaCwgcG9zaXRpb24pOwogIHJldHVybiBjb252ZXJzaW9uQXBpLmNvbnZlcnRJdGVtKGlucHV0LCBjb252ZXJzaW9uQXBpLndyaXRlci5jcmVhdGVQb3NpdGlvbkF0KHBhcmFncmFwaCwgMCkpOwp9CgpmdW5jdGlvbiBpc1BhcmFncmFwaGFibGUobm9kZSwgcG9zaXRpb24sIHNjaGVtYSkgewogIGNvbnN0IGNvbnRleHQgPSBzY2hlbWEuY3JlYXRlQ29udGV4dChwb3NpdGlvbik7IC8vIFdoZW4gcGFyYWdyYXBoIGlzIGFsbG93ZWQgaW4gdGhpcyBjb250ZXh0Li4uCgogIGlmICghc2NoZW1hLmNoZWNrQ2hpbGQoY29udGV4dCwgJ3BhcmFncmFwaCcpKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfSAvLyBBbmQgYSBub2RlIHdvdWxkIGJlIGFsbG93ZWQgaW4gdGhpcyBwYXJhZ3JhcGguLi4KCgogIGlmICghc2NoZW1hLmNoZWNrQ2hpbGQoY29udGV4dC5wdXNoKCdwYXJhZ3JhcGgnKSwgbm9kZSkpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHJldHVybiB0cnVlOwp9"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-paragraph/src/paragraph.js"],"names":["ParagraphCommand","Plugin","Paragraph","pluginName","init","editor","model","data","commands","add","schema","register","inheritAllFrom","conversion","elementToElement","view","for","viewElement","modelWriter","paragraphLikeElements","has","name","isEmpty","createElement","converterPriority","upcastDispatcher","on","evt","conversionApi","consumable","test","viewItem","isParagraphable","modelCursor","Object","assign","wrapInParagraph","priority","modelRange","document","registerPostFixer","writer","_autoparagraphEmptyRoots","enqueueChange","rootName","getRootNames","root","getRoot","checkChild","insertElement","Set","input","position","paragraph","insert","convertItem","createPositionAt","node","context","createContext","push"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,gBAAP,MAA6B,oBAA7B;AAEA,OAAOC,MAAP,MAAmB,qCAAnB;AAEA;;;;;;;;AAOA,eAAe,MAAMC,SAAN,SAAwBD,MAAxB,CAA+B;AAC7C;;;AAGA,aAAWE,UAAX,GAAwB;AACvB,WAAO,WAAP;AACA;AAED;;;;;AAGAC,EAAAA,IAAI,GAAG;AACN,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,UAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB;AAEAF,IAAAA,MAAM,CAACG,QAAP,CAAgBC,GAAhB,CAAqB,WAArB,EAAkC,IAAIT,gBAAJ,CAAsBK,MAAtB,CAAlC,EALM,CAON;;AACAC,IAAAA,KAAK,CAACI,MAAN,CAAaC,QAAb,CAAuB,WAAvB,EAAoC;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAApC;AAEAP,IAAAA,MAAM,CAACQ,UAAP,CAAkBC,gBAAlB,CAAoC;AAAER,MAAAA,KAAK,EAAE,WAAT;AAAsBS,MAAAA,IAAI,EAAE;AAA5B,KAApC,EAVM,CAYN;AAEA;AACA;;AACAV,IAAAA,MAAM,CAACQ,UAAP,CAAkBG,GAAlB,CAAuB,QAAvB,EAAkCF,gBAAlC,CAAoD;AACnDR,MAAAA,KAAK,EAAE,CAAEW,WAAF,EAAeC,WAAf,KAAgC;AACtC,YAAK,CAAChB,SAAS,CAACiB,qBAAV,CAAgCC,GAAhC,CAAqCH,WAAW,CAACI,IAAjD,CAAN,EAAgE;AAC/D,iBAAO,IAAP;AACA,SAHqC,CAKtC;;;AACA,YAAKJ,WAAW,CAACK,OAAjB,EAA2B;AAC1B,iBAAO,IAAP;AACA;;AAED,eAAOJ,WAAW,CAACK,aAAZ,CAA2B,WAA3B,CAAP;AACA,OAZkD;AAanDC,MAAAA,iBAAiB,EAAE;AAbgC,KAApD;AAgBAjB,IAAAA,IAAI,CAACkB,gBAAL,CAAsBC,EAAtB,CAA0B,SAA1B,EAAqC,CAAEC,GAAF,EAAOpB,IAAP,EAAaqB,aAAb,KAAgC;AACpE;AACA,UAAK,CAACA,aAAa,CAACC,UAAd,CAAyBC,IAAzB,CAA+BvB,IAAI,CAACwB,QAApC,EAA8C;AAAEV,QAAAA,IAAI,EAAEd,IAAI,CAACwB,QAAL,CAAcV;AAAtB,OAA9C,CAAN,EAAqF;AACpF;AACA,OAJmE,CAMpE;;;AACA,UAAKW,eAAe,CAAEzB,IAAI,CAACwB,QAAP,EAAiBxB,IAAI,CAAC0B,WAAtB,EAAmCL,aAAa,CAAClB,MAAjD,CAApB,EAAgF;AAC/EwB,QAAAA,MAAM,CAACC,MAAP,CAAe5B,IAAf,EAAqB6B,eAAe,CAAE7B,IAAI,CAACwB,QAAP,EAAiBxB,IAAI,CAAC0B,WAAtB,EAAmCL,aAAnC,CAApC;AACA;AACD,KAVD,EAUG;AAAES,MAAAA,QAAQ,EAAE;AAAZ,KAVH,EAhCM,CA4CN;;AACA9B,IAAAA,IAAI,CAACkB,gBAAL,CAAsBC,EAAtB,CAA0B,MAA1B,EAAkC,CAAEC,GAAF,EAAOpB,IAAP,EAAaqB,aAAb,KAAgC;AACjE;AACA,UAAKrB,IAAI,CAAC+B,UAAV,EAAuB;AACtB;AACA;;AAED,UAAKN,eAAe,CAAEzB,IAAI,CAACwB,QAAP,EAAiBxB,IAAI,CAAC0B,WAAtB,EAAmCL,aAAa,CAAClB,MAAjD,CAApB,EAAgF;AAC/EwB,QAAAA,MAAM,CAACC,MAAP,CAAe5B,IAAf,EAAqB6B,eAAe,CAAE7B,IAAI,CAACwB,QAAP,EAAiBxB,IAAI,CAAC0B,WAAtB,EAAmCL,aAAnC,CAApC;AACA;AACD,KATD,EASG;AAAES,MAAAA,QAAQ,EAAE;AAAZ,KATH,EA7CM,CAwDN;AAEA;AACA;AACA;;AACA/B,IAAAA,KAAK,CAACiC,QAAN,CAAeC,iBAAf,CAAkCC,MAAM,IAAI,KAAKC,wBAAL,CAA+BD,MAA/B,CAA5C;AAEApC,IAAAA,MAAM,CAACE,IAAP,CAAYmB,EAAZ,CAAgB,OAAhB,EAAyB,MAAM;AAC9BpB,MAAAA,KAAK,CAACqC,aAAN,CAAqB,aAArB,EAAoCF,MAAM,IAAI,KAAKC,wBAAL,CAA+BD,MAA/B,CAA9C;AACA,KAFD,EAEG;AAAEJ,MAAAA,QAAQ,EAAE;AAAZ,KAFH;AAGA;AAED;;;;;;;;AAMAK,EAAAA,wBAAwB,CAAED,MAAF,EAAW;AAClC,UAAMnC,KAAK,GAAG,KAAKD,MAAL,CAAYC,KAA1B;;AAEA,SAAM,MAAMsC,QAAZ,IAAwBtC,KAAK,CAACiC,QAAN,CAAeM,YAAf,EAAxB,EAAwD;AACvD,YAAMC,IAAI,GAAGxC,KAAK,CAACiC,QAAN,CAAeQ,OAAf,CAAwBH,QAAxB,CAAb;;AAEA,UAAKE,IAAI,CAACxB,OAAL,IAAgBwB,IAAI,CAACF,QAAL,IAAiB,YAAtC,EAAqD;AACpD;AACA,YAAKtC,KAAK,CAACI,MAAN,CAAasC,UAAb,CAAyBF,IAAzB,EAA+B,WAA/B,CAAL,EAAoD;AACnDL,UAAAA,MAAM,CAACQ,aAAP,CAAsB,WAAtB,EAAmCH,IAAnC;AAEA,iBAAO,IAAP;AACA;AACD;AACD;AACD;;AApG4C;AAuG9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA5C,SAAS,CAACiB,qBAAV,GAAkC,IAAI+B,GAAJ,CAAS,CAC1C,YAD0C,EAE1C,IAF0C,EAG1C,KAH0C,EAI1C,IAJ0C,EAK1C,IAL0C,EAM1C,IAN0C,EAO1C,IAP0C,EAQ1C,IAR0C,EAS1C,IAT0C,EAU1C,IAV0C,EAW1C,IAX0C,EAY1C,GAZ0C,EAa1C,IAb0C,CAAT,CAAlC;;AAgBA,SAASd,eAAT,CAA0Be,KAA1B,EAAiCC,QAAjC,EAA2CxB,aAA3C,EAA2D;AAC1D,QAAMyB,SAAS,GAAGzB,aAAa,CAACa,MAAd,CAAqBlB,aAArB,CAAoC,WAApC,CAAlB;AAEAK,EAAAA,aAAa,CAACa,MAAd,CAAqBa,MAArB,CAA6BD,SAA7B,EAAwCD,QAAxC;AACA,SAAOxB,aAAa,CAAC2B,WAAd,CAA2BJ,KAA3B,EAAkCvB,aAAa,CAACa,MAAd,CAAqBe,gBAArB,CAAuCH,SAAvC,EAAkD,CAAlD,CAAlC,CAAP;AACA;;AAED,SAASrB,eAAT,CAA0ByB,IAA1B,EAAgCL,QAAhC,EAA0C1C,MAA1C,EAAmD;AAClD,QAAMgD,OAAO,GAAGhD,MAAM,CAACiD,aAAP,CAAsBP,QAAtB,CAAhB,CADkD,CAGlD;;AACA,MAAK,CAAC1C,MAAM,CAACsC,UAAP,CAAmBU,OAAnB,EAA4B,WAA5B,CAAN,EAAkD;AACjD,WAAO,KAAP;AACA,GANiD,CAQlD;;;AACA,MAAK,CAAChD,MAAM,CAACsC,UAAP,CAAmBU,OAAO,CAACE,IAAR,CAAc,WAAd,CAAnB,EAAgDH,IAAhD,CAAN,EAA+D;AAC9D,WAAO,KAAP;AACA;;AAED,SAAO,IAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraph\n */\n\nimport ParagraphCommand from './paragraphcommand';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The paragraph feature for the editor.\n *\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Paragraph extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Paragraph';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst data = editor.data;\n\n\t\teditor.commands.add( 'paragraph', new ParagraphCommand( editor ) );\n\n\t\t// Schema.\n\t\tmodel.schema.register( 'paragraph', { inheritAllFrom: '$block' } );\n\n\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\n\t\t// Content autoparagraphing. --------------------------------------------------\n\n\t\t// Handles element which has not been converted by any plugin and checks if it would be converted if\n\t\t// we wrap it in a paragraph or change it to a paragraph.\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tmodel: ( viewElement, modelWriter ) => {\n\t\t\t\tif ( !Paragraph.paragraphLikeElements.has( viewElement.name ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// Do not auto-paragraph empty elements.\n\t\t\t\tif ( viewElement.isEmpty ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn modelWriter.createElement( 'paragraph' );\n\t\t\t},\n\t\t\tconverterPriority: 'low'\n\t\t} );\n\n\t\tdata.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n\t\t\t// Do not try auto-paragraphing if the element was already converted.\n\t\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the element is not paragraph-like try wrapping it in a paragraph.\n\t\t\tif ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tObject.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Handles not converted text nodes and checks if would be converted if we wraps then by a paragraph.\n\t\tdata.upcastDispatcher.on( 'text', ( evt, data, conversionApi ) => {\n\t\t\t// When node is already converted then do nothing.\n\t\t\tif ( data.modelRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tObject.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Empty roots autoparagraphing. -----------------------------------------------\n\n\t\t// Post-fixer which takes care of adding empty paragraph elements to empty roots.\n\t\t// Besides fixing content on #changesDone we also need to handle editor.data#ready event because\n\t\t// if initial data is empty or setData() wasn't even called there will be no #change fired.\n\t\tmodel.document.registerPostFixer( writer => this._autoparagraphEmptyRoots( writer ) );\n\n\t\teditor.data.on( 'ready', () => {\n\t\t\tmodel.enqueueChange( 'transparent', writer => this._autoparagraphEmptyRoots( writer ) );\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Fixes all empty roots.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n\t */\n\t_autoparagraphEmptyRoots( writer ) {\n\t\tconst model = this.editor.model;\n\n\t\tfor ( const rootName of model.document.getRootNames() ) {\n\t\t\tconst root = model.document.getRoot( rootName );\n\n\t\t\tif ( root.isEmpty && root.rootName != '$graveyard' ) {\n\t\t\t\t// If paragraph element is allowed in the root, create paragraph element.\n\t\t\t\tif ( model.schema.checkChild( root, 'paragraph' ) ) {\n\t\t\t\t\twriter.insertElement( 'paragraph', root );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A list of element names which should be treated by the autoparagraphing algorithms as\n * paragraph-like. This means that e.g. the following content:\n *\n *\t\t<h1>Foo</h1>\n *\t\t<table>\n *\t\t\t<tr>\n *\t\t\t\t<td>X</td>\n *\t\t\t\t<td>\n *\t\t\t\t\t<ul>\n *\t\t\t\t\t\t<li>Y</li>\n *\t\t\t\t\t\t<li>Z</li>\n *\t\t\t\t\t</ul>\n *\t\t\t\t</td>\n *\t\t\t</tr>\n *\t\t</table>\n *\n * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\n * Hence, if none of the features is going to convert those elements the above content will be automatically handled\n * by the paragraph feature and converted to:\n *\n *\t\t<p>Foo</p>\n *\t\t<p>X</p>\n *\t\t<p>Y</p>\n *\t\t<p>Z</p>\n *\n * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\n * have a priority upon conversion.\n *\n * @member {Set.<String>} module:paragraph/paragraph~Paragraph.paragraphLikeElements\n */\nParagraph.paragraphLikeElements = new Set( [\n\t'blockquote',\n\t'dd',\n\t'div',\n\t'dt',\n\t'h1',\n\t'h2',\n\t'h3',\n\t'h4',\n\t'h5',\n\t'h6',\n\t'li',\n\t'p',\n\t'td'\n] );\n\nfunction wrapInParagraph( input, position, conversionApi ) {\n\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n\n\tconversionApi.writer.insert( paragraph, position );\n\treturn conversionApi.convertItem( input, conversionApi.writer.createPositionAt( paragraph, 0 ) );\n}\n\nfunction isParagraphable( node, position, schema ) {\n\tconst context = schema.createContext( position );\n\n\t// When paragraph is allowed in this context...\n\tif ( !schema.checkChild( context, 'paragraph' ) ) {\n\t\treturn false;\n\t}\n\n\t// And a node would be allowed in this paragraph...\n\tif ( !schema.checkChild( context.push( 'paragraph' ), node ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n"]}]}