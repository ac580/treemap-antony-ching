{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-upload/src/filerepository.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-upload/src/filerepository.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-upload/src/filerepository.js"],"names":["Plugin","PendingActions","CKEditorError","attachLinkToDocumentation","ObservableMixin","Collection","mix","FileReader","uid","FileRepository","pluginName","requires","init","loaders","on","_updatePendingAction","_loadersMap","Map","_pendingAction","set","bind","to","uploaded","total","getLoader","fileOrPromise","get","createLoader","createUploadAdapter","console","warn","loader","FileLoader","Promise","resolve","add","file","then","catch","aggregatedUploaded","aggregatedTotal","uploadTotal","destroyLoader","fileOrPromiseOrLoader","_destroy","remove","forEach","value","key","delete","pendingActions","editor","plugins","length","t","getMessage","parseInt","uploadedPercent","constructor","filePromise","uploadAdapterCreator","id","_filePromiseWrapper","_createFilePromiseWrapper","_adapter","_reader","promise","data","read","status","err","error","upload","uploadResponse","abort","isFulfilled","rejecter","undefined","wrapper","reject"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/filerepository\n */\n\n/* globals console */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport PendingActions from '@ckeditor/ckeditor5-core/src/pendingactions';\nimport CKEditorError, { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\nimport FileReader from './filereader.js';\n\nimport uid from '@ckeditor/ckeditor5-utils/src/uid.js';\n\n/**\n * File repository plugin. A central point for managing file upload.\n *\n * To use it, first you need an upload adapter. Upload adapter's job is to handle communication with the server\n * (sending the file and handling server's response). You can use one of the existing plugins introducing upload adapters\n * (e.g. {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter} or\n * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}) or write your own one – see\n * the {@glink framework/guides/deep-dive/upload-adapter \"Custom image upload adapter\" deep dive guide}.\n *\n * Then, you can use {@link module:upload/filerepository~FileRepository#createLoader `createLoader()`} and the returned\n * {@link module:upload/filerepository~FileLoader} instance to load and upload files.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FileRepository extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'FileRepository';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ PendingActions ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t/**\n\t\t * Collection of loaders associated with this repository.\n\t\t *\n\t\t * @member {module:utils/collection~Collection} #loaders\n\t\t */\n\t\tthis.loaders = new Collection();\n\n\t\t// Keeps upload in a sync with pending actions.\n\t\tthis.loaders.on( 'add', () => this._updatePendingAction() );\n\t\tthis.loaders.on( 'remove', () => this._updatePendingAction() );\n\n\t\t/**\n\t\t * Loaders mappings used to retrieve loaders references.\n\t\t *\n\t\t * @private\n\t\t * @member {Map<File|Promise, FileLoader>} #_loadersMap\n\t\t */\n\t\tthis._loadersMap = new Map();\n\n\t\t/**\n\t\t * Reference to a pending action registered in a {@link module:core/pendingactions~PendingActions} plugin\n\t\t * while upload is in progress. When there is no upload then value is `null`.\n\t\t *\n\t\t * @private\n\t\t * @member {Object} #_pendingAction\n\t\t */\n\t\tthis._pendingAction = null;\n\n\t\t/**\n\t\t * A factory function which should be defined before using `FileRepository`.\n\t\t *\n\t\t * It should return a new instance of {@link module:upload/filerepository~UploadAdapter} that will be used to upload files.\n\t\t * {@link module:upload/filerepository~FileLoader} instance associated with the adapter\n\t\t * will be passed to that function.\n\t\t *\n\t\t * For more information and example see {@link module:upload/filerepository~UploadAdapter}.\n\t\t *\n\t\t * @member {Function} #createUploadAdapter\n\t\t */\n\n\t\t/**\n\t\t * Number of bytes uploaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploaded\n\t\t */\n\t\tthis.set( 'uploaded', 0 );\n\n\t\t/**\n\t\t * Number of total bytes to upload.\n\t\t *\n\t\t * It might be different than the file size because of headers and additional data.\n\t\t * It contains `null` if value is not available yet, so it's better to use {@link #uploadedPercent} to monitor\n\t\t * the progress.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #uploadTotal\n\t\t */\n\t\tthis.set( 'uploadTotal', null );\n\n\t\t/**\n\t\t * Upload progress in percents.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploadedPercent\n\t\t */\n\t\tthis.bind( 'uploadedPercent' ).to( this, 'uploaded', this, 'uploadTotal', ( uploaded, total ) => {\n\t\t\treturn total ? ( uploaded / total * 100 ) : 0;\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the loader associated with specified file or promise.\n\t *\n\t * To get loader by id use `fileRepository.loaders.get( id )`.\n\t *\n\t * @param {File|Promise.<File>} fileOrPromise Native file or promise handle.\n\t * @returns {module:upload/filerepository~FileLoader|null}\n\t */\n\tgetLoader( fileOrPromise ) {\n\t\treturn this._loadersMap.get( fileOrPromise ) || null;\n\t}\n\n\t/**\n\t * Creates a loader instance for the given file.\n\t *\n\t * Requires {@link #createUploadAdapter} factory to be defined.\n\t *\n\t * @param {File|Promise.<File>} fileOrPromise Native File object or native Promise object which resolves to a File.\n\t * @returns {module:upload/filerepository~FileLoader|null}\n\t */\n\tcreateLoader( fileOrPromise ) {\n\t\tif ( !this.createUploadAdapter ) {\n\t\t\t/**\n\t\t\t * You need to enable an upload adapter in order to be able to upload files.\n\t\t\t *\n\t\t\t * This warning shows up when {@link module:upload/filerepository~FileRepository} is being used\n\t\t\t * without {@link #createUploadAdapter definining an upload adapter}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**\n\t\t\t * it means that you did not configure any of the upload adapters available by default in those builds.\n\t\t\t *\n\t\t\t * See the {@glink features/image-upload/image-upload comprehensive \"Image upload overview\"} to learn which upload\n\t\t\t * adapters are available in the builds and how to configure them.\n\t\t\t *\n\t\t\t * **If you see this warning when using a custom build** there is a chance that you enabled\n\t\t\t * a feature like {@link module:image/imageupload~ImageUpload},\n\t\t\t * or {@link module:image/imageupload/imageuploadui~ImageUploadUI} but you did not enable any upload adapter.\n\t\t\t * You can choose one of the existing upload adapters listed in the\n\t\t\t * {@glink features/image-upload/image-upload \"Image upload overview\"}.\n\t\t\t *\n\t\t\t * You can also implement your {@glink framework/guides/deep-dive/upload-adapter own image upload adapter}.\n\t\t\t *\n\t\t\t * @error filerepository-no-upload-adapter\n\t\t\t */\n\t\t\tconsole.warn( attachLinkToDocumentation(\n\t\t\t\t'filerepository-no-upload-adapter: Upload adapter is not defined.'\n\t\t\t) );\n\n\t\t\treturn null;\n\t\t}\n\n\t\tconst loader = new FileLoader( Promise.resolve( fileOrPromise ), this.createUploadAdapter );\n\n\t\tthis.loaders.add( loader );\n\t\tthis._loadersMap.set( fileOrPromise, loader );\n\n\t\t// Store also file => loader mapping so loader can be retrieved by file instance returned upon Promise resolution.\n\t\tif ( fileOrPromise instanceof Promise ) {\n\t\t\tloader.file\n\t\t\t\t.then( file => {\n\t\t\t\t\tthis._loadersMap.set( file, loader );\n\t\t\t\t} )\n\t\t\t\t// Every then() must have a catch().\n\t\t\t\t// File loader state (and rejections) are handled in read() and upload().\n\t\t\t\t// Also, see the \"does not swallow the file promise rejection\" test.\n\t\t\t\t.catch( () => {} );\n\t\t}\n\n\t\tloader.on( 'change:uploaded', () => {\n\t\t\tlet aggregatedUploaded = 0;\n\n\t\t\tfor ( const loader of this.loaders ) {\n\t\t\t\taggregatedUploaded += loader.uploaded;\n\t\t\t}\n\n\t\t\tthis.uploaded = aggregatedUploaded;\n\t\t} );\n\n\t\tloader.on( 'change:uploadTotal', () => {\n\t\t\tlet aggregatedTotal = 0;\n\n\t\t\tfor ( const loader of this.loaders ) {\n\t\t\t\tif ( loader.uploadTotal ) {\n\t\t\t\t\taggregatedTotal += loader.uploadTotal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.uploadTotal = aggregatedTotal;\n\t\t} );\n\n\t\treturn loader;\n\t}\n\n\t/**\n\t * Destroys the given loader.\n\t *\n\t * @param {File|Promise|module:upload/filerepository~FileLoader} fileOrPromiseOrLoader File or Promise associated\n\t * with that loader or loader itself.\n\t */\n\tdestroyLoader( fileOrPromiseOrLoader ) {\n\t\tconst loader = fileOrPromiseOrLoader instanceof FileLoader ? fileOrPromiseOrLoader : this.getLoader( fileOrPromiseOrLoader );\n\n\t\tloader._destroy();\n\n\t\tthis.loaders.remove( loader );\n\n\t\tthis._loadersMap.forEach( ( value, key ) => {\n\t\t\tif ( value === loader ) {\n\t\t\t\tthis._loadersMap.delete( key );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Registers or deregisters pending action bound with upload progress.\n\t *\n\t * @private\n\t */\n\t_updatePendingAction() {\n\t\tconst pendingActions = this.editor.plugins.get( PendingActions );\n\n\t\tif ( this.loaders.length ) {\n\t\t\tif ( !this._pendingAction ) {\n\t\t\t\tconst t = this.editor.t;\n\t\t\t\tconst getMessage = value => `${ t( 'Upload in progress' ) } ${ parseInt( value ) }%.`;\n\n\t\t\t\tthis._pendingAction = pendingActions.add( getMessage( this.uploadedPercent ) );\n\t\t\t\tthis._pendingAction.bind( 'message' ).to( this, 'uploadedPercent', getMessage );\n\t\t\t}\n\t\t} else {\n\t\t\tpendingActions.remove( this._pendingAction );\n\t\t\tthis._pendingAction = null;\n\t\t}\n\t}\n}\n\nmix( FileRepository, ObservableMixin );\n\n/**\n * File loader class.\n *\n * It is used to control the process of reading the file and uploading it using the specified upload adapter.\n */\nclass FileLoader {\n\t/**\n\t * Creates a new instance of `FileLoader`.\n\t *\n\t * @param {Promise.<File>} filePromise A promise which resolves to a file instance.\n\t * @param {Function} uploadAdapterCreator The function which returns {@link module:upload/filerepository~UploadAdapter} instance.\n\t */\n\tconstructor( filePromise, uploadAdapterCreator ) {\n\t\t/**\n\t\t * Unique id of FileLoader instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.id = uid();\n\n\t\t/**\n\t\t * Additional wrapper over the initial file promise passed to this loader.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:upload/filerepository~FilePromiseWrapper}\n\t\t */\n\t\tthis._filePromiseWrapper = this._createFilePromiseWrapper( filePromise );\n\n\t\t/**\n\t\t * Adapter instance associated with this file loader.\n\t\t *\n\t\t * @private\n\t\t * @member {module:upload/filerepository~UploadAdapter}\n\t\t */\n\t\tthis._adapter = uploadAdapterCreator( this );\n\n\t\t/**\n\t\t * FileReader used by FileLoader.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:upload/filereader~FileReader}\n\t\t */\n\t\tthis._reader = new FileReader();\n\n\t\t/**\n\t\t * Current status of FileLoader. It can be one of the following:\n\t\t *\n\t\t * * 'idle',\n\t\t * * 'reading',\n\t\t * * 'uploading',\n\t\t * * 'aborted',\n\t\t * * 'error'.\n\t\t *\n\t\t * When reading status can change in a following way:\n\t\t *\n\t\t * `idle` -> `reading` -> `idle`\n\t\t * `idle` -> `reading -> `aborted`\n\t\t * `idle` -> `reading -> `error`\n\t\t *\n\t\t * When uploading status can change in a following way:\n\t\t *\n\t\t * `idle` -> `uploading` -> `idle`\n\t\t * `idle` -> `uploading` -> `aborted`\n\t\t * `idle` -> `uploading` -> `error`\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {String} #status\n\t\t */\n\t\tthis.set( 'status', 'idle' );\n\n\t\t/**\n\t\t * Number of bytes uploaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploaded\n\t\t */\n\t\tthis.set( 'uploaded', 0 );\n\n\t\t/**\n\t\t * Number of total bytes to upload.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number|null} #uploadTotal\n\t\t */\n\t\tthis.set( 'uploadTotal', null );\n\n\t\t/**\n\t\t * Upload progress in percents.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #uploadedPercent\n\t\t */\n\t\tthis.bind( 'uploadedPercent' ).to( this, 'uploaded', this, 'uploadTotal', ( uploaded, total ) => {\n\t\t\treturn total ? ( uploaded / total * 100 ) : 0;\n\t\t} );\n\n\t\t/**\n\t\t * Response of the upload.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Object|null} #uploadResponse\n\t\t */\n\t\tthis.set( 'uploadResponse', null );\n\t}\n\n\t/**\n\t * A `Promise` which resolves to a `File` instance associated with this file loader.\n\t *\n\t * @type {Promise.<File|null>}\n\t */\n\tget file() {\n\t\tif ( !this._filePromiseWrapper ) {\n\t\t\t// Loader was destroyed, return promise which resolves to null.\n\t\t\treturn Promise.resolve( null );\n\t\t} else {\n\t\t\t// The `this._filePromiseWrapper.promise` is chained and not simply returned to handle a case when:\n\t\t\t//\n\t\t\t//\t\t* The `loader.file.then( ... )` is called by external code (returned promise is pending).\n\t\t\t//\t\t* Then `loader._destroy()` is called (call is synchronous) which destroys the `loader`.\n\t\t\t//\t\t* Promise returned by the first `loader.file.then( ... )` call is resolved.\n\t\t\t//\n\t\t\t// Returning `this._filePromiseWrapper.promise` will still resolve to a `File` instance so there\n\t\t\t// is an additional check needed in the chain to see if `loader` was destroyed in the meantime.\n\t\t\treturn this._filePromiseWrapper.promise.then( file => this._filePromiseWrapper ? file : null );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the file data. To read its data, you need for first load the file\n\t * by using the {@link module:upload/filerepository~FileLoader#read `read()`} method.\n\t *\n\t * @type {File|undefined}\n\t */\n\tget data() {\n\t\treturn this._reader.data;\n\t}\n\n\t/**\n\t * Reads file using {@link module:upload/filereader~FileReader}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-read-wrong-status` when status\n\t * is different than `idle`.\n\t *\n\t * Example usage:\n\t *\n\t *\tfileLoader.read()\n\t *\t\t.then( data => { ... } )\n\t *\t\t.catch( err => {\n\t *\t\t\tif ( err === 'aborted' ) {\n\t *\t\t\t\tconsole.log( 'Reading aborted.' );\n\t *\t\t\t} else {\n\t *\t\t\t\tconsole.log( 'Reading error.', err );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @returns {Promise.<String>} Returns promise that will be resolved with read data. Promise will be rejected if error\n\t * occurs or if read process is aborted.\n\t */\n\tread() {\n\t\tif ( this.status != 'idle' ) {\n\t\t\tthrow new CKEditorError( 'filerepository-read-wrong-status: You cannot call read if the status is different than idle.', this );\n\t\t}\n\n\t\tthis.status = 'reading';\n\n\t\treturn this.file\n\t\t\t.then( file => this._reader.read( file ) )\n\t\t\t.then( data => {\n\t\t\t\t// Edge case: reader was aborted after file was read - double check for proper status.\n\t\t\t\tif ( this.status !== 'reading' ) {\n\t\t\t\t\tthrow this.status;\n\t\t\t\t}\n\n\t\t\t\tthis.status = 'idle';\n\n\t\t\t\treturn data;\n\t\t\t} )\n\t\t\t.catch( err => {\n\t\t\t\tif ( err === 'aborted' ) {\n\t\t\t\t\tthis.status = 'aborted';\n\t\t\t\t\tthrow 'aborted';\n\t\t\t\t}\n\n\t\t\t\tthis.status = 'error';\n\t\t\t\tthrow this._reader.error ? this._reader.error : err;\n\t\t\t} );\n\t}\n\n\t/**\n\t * Reads file using the provided {@link module:upload/filerepository~UploadAdapter}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-upload-wrong-status` when status\n\t * is different than `idle`.\n\t * Example usage:\n\t *\n\t *\tfileLoader.upload()\n\t *\t\t.then( data => { ... } )\n\t *\t\t.catch( e => {\n\t *\t\t\tif ( e === 'aborted' ) {\n\t *\t\t\t\tconsole.log( 'Uploading aborted.' );\n\t *\t\t\t} else {\n\t *\t\t\t\tconsole.log( 'Uploading error.', e );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @returns {Promise.<Object>} Returns promise that will be resolved with response data. Promise will be rejected if error\n\t * occurs or if read process is aborted.\n\t */\n\tupload() {\n\t\tif ( this.status != 'idle' ) {\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'filerepository-upload-wrong-status: You cannot call upload if the status is different than idle.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\tthis.status = 'uploading';\n\n\t\treturn this.file\n\t\t\t.then( () => this._adapter.upload() )\n\t\t\t.then( data => {\n\t\t\t\tthis.uploadResponse = data;\n\t\t\t\tthis.status = 'idle';\n\n\t\t\t\treturn data;\n\t\t\t} )\n\t\t\t.catch( err => {\n\t\t\t\tif ( this.status === 'aborted' ) {\n\t\t\t\t\tthrow 'aborted';\n\t\t\t\t}\n\n\t\t\t\tthis.status = 'error';\n\t\t\t\tthrow err;\n\t\t\t} );\n\t}\n\n\t/**\n\t * Aborts loading process.\n\t */\n\tabort() {\n\t\tconst status = this.status;\n\t\tthis.status = 'aborted';\n\n\t\tif ( !this._filePromiseWrapper.isFulfilled ) {\n\t\t\t// Edge case: file loader is aborted before read() is called\n\t\t\t// so it might happen that no one handled the rejection of this promise.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-upload/pull/100\n\t\t\tthis._filePromiseWrapper.promise.catch( () => {} );\n\n\t\t\tthis._filePromiseWrapper.rejecter( 'aborted' );\n\t\t} else if ( status == 'reading' ) {\n\t\t\tthis._reader.abort();\n\t\t} else if ( status == 'uploading' && this._adapter.abort ) {\n\t\t\tthis._adapter.abort();\n\t\t}\n\n\t\tthis._destroy();\n\t}\n\n\t/**\n\t * Performs cleanup.\n\t *\n\t * @private\n\t */\n\t_destroy() {\n\t\tthis._filePromiseWrapper = undefined;\n\t\tthis._reader = undefined;\n\t\tthis._adapter = undefined;\n\t\tthis.uploadResponse = undefined;\n\t}\n\n\t/**\n\t * Wraps a given file promise into another promise giving additional\n\t * control (resolving, rejecting, checking if fulfilled) over it.\n\t *\n\t * @private\n\t * @param filePromise The initial file promise to be wrapped.\n\t * @returns {module:upload/filerepository~FilePromiseWrapper}\n\t */\n\t_createFilePromiseWrapper( filePromise ) {\n\t\tconst wrapper = {};\n\n\t\twrapper.promise = new Promise( ( resolve, reject ) => {\n\t\t\twrapper.rejecter = reject;\n\t\t\twrapper.isFulfilled = false;\n\n\t\t\tfilePromise\n\t\t\t\t.then( file => {\n\t\t\t\t\twrapper.isFulfilled = true;\n\t\t\t\t\tresolve( file );\n\t\t\t\t} )\n\t\t\t\t.catch( err => {\n\t\t\t\t\twrapper.isFulfilled = true;\n\t\t\t\t\treject( err );\n\t\t\t\t} );\n\t\t} );\n\n\t\treturn wrapper;\n\t}\n}\n\nmix( FileLoader, ObservableMixin );\n\n/**\n * Upload adapter interface used by the {@link module:upload/filerepository~FileRepository file repository}\n * to handle file upload. An upload adapter is a bridge between the editor and server that handles file uploads.\n * It should contain a logic necessary to initiate an upload process and monitor its progress.\n *\n * Learn how to develop your own upload adapter for CKEditor 5 in the\n * {@glink framework/guides/deep-dive/upload-adapter \"Custom upload adapter\" guide}.\n *\n * @interface UploadAdapter\n */\n\n/**\n * Executes the upload process.\n * This method should return a promise that will resolve when data will be uploaded to server. Promise should be\n * resolved with an object containing information about uploaded file:\n *\n *\t\t{\n *\t\t\tdefault: 'http://server/default-size.image.png'\n *\t\t}\n *\n * Additionally, other image sizes can be provided:\n *\n *\t\t{\n *\t\t\tdefault: 'http://server/default-size.image.png',\n *\t\t\t'160': 'http://server/size-160.image.png',\n *\t\t\t'500': 'http://server/size-500.image.png',\n *\t\t\t'1000': 'http://server/size-1000.image.png',\n *\t\t\t'1052': 'http://server/default-size.image.png'\n *\t\t}\n *\n * NOTE: When returning multiple images, the widest returned one should equal the default one. It is essential to\n * correctly set `width` attribute of the image. See this discussion:\n * https://github.com/ckeditor/ckeditor5-easy-image/issues/4 for more information.\n *\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\n *\n * @method module:upload/filerepository~UploadAdapter#upload\n * @returns {Promise.<Object>} Promise that should be resolved when data is uploaded.\n */\n\n/**\n * Aborts the upload process.\n * After aborting it should reject promise returned from {@link #upload upload()}.\n *\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\n *\n * @method module:upload/filerepository~UploadAdapter#abort\n */\n\n/**\n * Object returned by {@link module:upload/filerepository~FileLoader#_createFilePromiseWrapper} method\n * to add more control over the initial file promise passed to {@link module:upload/filerepository~FileLoader}.\n *\n * @protected\n * @typedef {Object} module:upload/filerepository~FilePromiseWrapper\n * @property {Promise.<File>} promise Wrapper promise which can be chained for further processing.\n * @property {Function} rejecter Rejects the promise when called.\n * @property {Boolean} isFulfilled Whether original promise is already fulfilled.\n */\n"]}]}