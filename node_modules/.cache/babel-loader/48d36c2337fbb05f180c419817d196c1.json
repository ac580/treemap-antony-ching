{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/document.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/document.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGVuZ2luZS92aWV3L2RvY3VtZW50CiAqLwppbXBvcnQgRG9jdW1lbnRTZWxlY3Rpb24gZnJvbSAnLi9kb2N1bWVudHNlbGVjdGlvbic7CmltcG9ydCBDb2xsZWN0aW9uIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL2NvbGxlY3Rpb24nOwppbXBvcnQgbWl4IGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtdXRpbHMvc3JjL21peCc7CmltcG9ydCBPYnNlcnZhYmxlTWl4aW4gZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvb2JzZXJ2YWJsZW1peGluJzsgLy8gQGlmIENLX0RFQlVHX0VOR0lORSAvLyBjb25zdCB7IGxvZ0RvY3VtZW50IH0gPSByZXF1aXJlKCAnLi4vZGV2LXV0aWxzL3V0aWxzJyApOwoKLyoqCiAqIERvY3VtZW50IGNsYXNzIGNyZWF0ZXMgYW4gYWJzdHJhY3QgbGF5ZXIgb3ZlciB0aGUgY29udGVudCBlZGl0YWJsZSBhcmVhLCBjb250YWlucyBhIHRyZWUgb2YgdmlldyBlbGVtZW50cyBhbmQKICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9kb2N1bWVudHNlbGVjdGlvbn5Eb2N1bWVudFNlbGVjdGlvbiB2aWV3IHNlbGVjdGlvbn0gYXNzb2NpYXRlZCB3aXRoIHRoaXMgZG9jdW1lbnQuCiAqCiAqIEBtaXhlcyBtb2R1bGU6dXRpbHMvb2JzZXJ2YWJsZW1peGlufk9ic2VydmFibGVNaXhpbgogKi8KCmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvY3VtZW50IHsKICAvKioKICAgKiBDcmVhdGVzIGEgRG9jdW1lbnQgaW5zdGFuY2UuCiAgICovCiAgY29uc3RydWN0b3IoKSB7CiAgICAvKioKICAgICAqIFNlbGVjdGlvbiBkb25lIG9uIHRoaXMgZG9jdW1lbnQuCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAbWVtYmVyIHttb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnRzZWxlY3Rpb25+RG9jdW1lbnRTZWxlY3Rpb259IG1vZHVsZTplbmdpbmUvdmlldy9kb2N1bWVudH5Eb2N1bWVudCNzZWxlY3Rpb24KICAgICAqLwogICAgdGhpcy5zZWxlY3Rpb24gPSBuZXcgRG9jdW1lbnRTZWxlY3Rpb24oKTsKICAgIC8qKgogICAgICogUm9vdHMgb2YgdGhlIHZpZXcgdHJlZS4gQ29sbGVjdGlvbiBvZiB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9lbGVtZW50fkVsZW1lbnQgdmlldyBlbGVtZW50c30uCiAgICAgKgogICAgICogVmlldyByb290cyBhcmUgY3JlYXRlZCBhcyBhIHJlc3VsdCBvZiBiaW5kaW5nIGJldHdlZW4ge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9kb2N1bWVudH5Eb2N1bWVudCNyb290c30gYW5kCiAgICAgKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kb2N1bWVudH5Eb2N1bWVudCNyb290c30gYW5kIHRoaXMgaXMgaGFuZGxlZCBieQogICAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvY29udHJvbGxlci9lZGl0aW5nY29udHJvbGxlcn5FZGl0aW5nQ29udHJvbGxlcn0sIHNvIHRvIGNyZWF0ZSB2aWV3IHJvb3Qgd2UgbmVlZCB0byBjcmVhdGUKICAgICAqIG1vZGVsIHJvb3QgdXNpbmcge0BsaW5rIG1vZHVsZTplbmdpbmUvbW9kZWwvZG9jdW1lbnR+RG9jdW1lbnQjY3JlYXRlUm9vdH0uCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAbWVtYmVyIHttb2R1bGU6dXRpbHMvY29sbGVjdGlvbn5Db2xsZWN0aW9ufSBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnR+RG9jdW1lbnQjcm9vdHMKICAgICAqLwoKICAgIHRoaXMucm9vdHMgPSBuZXcgQ29sbGVjdGlvbih7CiAgICAgIGlkUHJvcGVydHk6ICdyb290TmFtZScKICAgIH0pOwogICAgLyoqCiAgICAgKiBEZWZpbmVzIHdoZXRoZXIgZG9jdW1lbnQgaXMgaW4gcmVhZC1vbmx5IG1vZGUuCiAgICAgKgogICAgICogV2hlbiBkb2N1bWVudCBpcyByZWFkLW9ueSB0aGVuIGFsbCByb290cyBhcmUgcmVhZC1vbmx5IGFzIHdlbGwgYW5kIGNhcmV0IHBsYWNlZCBpbnNpZGUgdGhpcyByb290IGlzIGhpZGRlbi4KICAgICAqCiAgICAgKiBAb2JzZXJ2YWJsZQogICAgICogQG1lbWJlciB7Qm9vbGVhbn0gI2lzUmVhZE9ubHkKICAgICAqLwoKICAgIHRoaXMuc2V0KCdpc1JlYWRPbmx5JywgZmFsc2UpOwogICAgLyoqCiAgICAgKiBUcnVlIGlmIGRvY3VtZW50IGlzIGZvY3VzZWQuCiAgICAgKgogICAgICogVGhpcyBwcm9wZXJ0eSBpcyB1cGRhdGVkIGJ5IHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L29ic2VydmVyL2ZvY3Vzb2JzZXJ2ZXJ+Rm9jdXNPYnNlcnZlcn0uCiAgICAgKiBJZiB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9vYnNlcnZlci9mb2N1c29ic2VydmVyfkZvY3VzT2JzZXJ2ZXJ9IGlzIGRpc2FibGVkIHRoaXMgcHJvcGVydHkgd2lsbCBub3QgY2hhbmdlLgogICAgICoKICAgICAqIEByZWFkb25seQogICAgICogQG9ic2VydmFibGUKICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IG1vZHVsZTplbmdpbmUvdmlldy9kb2N1bWVudH5Eb2N1bWVudCNpc0ZvY3VzZWQKICAgICAqLwoKICAgIHRoaXMuc2V0KCdpc0ZvY3VzZWQnLCBmYWxzZSk7CiAgICAvKioKICAgICAqIFRydWUgaWYgY29tcG9zaXRpb24gaXMgaW4gcHJvZ3Jlc3MgaW5zaWRlIHRoZSBkb2N1bWVudC4KICAgICAqCiAgICAgKiBUaGlzIHByb3BlcnR5IGlzIHVwZGF0ZWQgYnkgdGhlIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvb2JzZXJ2ZXIvY29tcG9zaXRpb25vYnNlcnZlcn5Db21wb3NpdGlvbk9ic2VydmVyfS4KICAgICAqIElmIHRoZSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L29ic2VydmVyL2NvbXBvc2l0aW9ub2JzZXJ2ZXJ+Q29tcG9zaXRpb25PYnNlcnZlcn0gaXMgZGlzYWJsZWQgdGhpcyBwcm9wZXJ0eSB3aWxsIG5vdCBjaGFuZ2UuCiAgICAgKgogICAgICogQHJlYWRvbmx5CiAgICAgKiBAb2JzZXJ2YWJsZQogICAgICogQG1lbWJlciB7Qm9vbGVhbn0gbW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50fkRvY3VtZW50I2lzQ29tcG9zaW5nCiAgICAgKi8KCiAgICB0aGlzLnNldCgnaXNDb21wb3NpbmcnLCBmYWxzZSk7CiAgICAvKioKICAgICAqIFBvc3QtZml4ZXIgY2FsbGJhY2tzIHJlZ2lzdGVyZWQgdG8gdGhlIHZpZXcgZG9jdW1lbnQuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBtZW1iZXIge1NldH0KICAgICAqLwoKICAgIHRoaXMuX3Bvc3RGaXhlcnMgPSBuZXcgU2V0KCk7CiAgfQogIC8qKgogICAqIEdldHMgYSB7QGxpbmsgbW9kdWxlOmVuZ2luZS92aWV3L2RvY3VtZW50fkRvY3VtZW50I3Jvb3RzIHZpZXcgcm9vdCBlbGVtZW50fSB3aXRoIHRoZSBzcGVjaWZpZWQgbmFtZS4gSWYgdGhlIG5hbWUgaXMgbm90CiAgICogc3BlY2lmaWMgIm1haW4iIHJvb3QgaXMgcmV0dXJuZWQuCiAgICoKICAgKiBAcGFyYW0ge1N0cmluZ30gW25hbWU9J21haW4nXSBOYW1lIG9mIHRoZSByb290LgogICAqIEByZXR1cm5zIHttb2R1bGU6ZW5naW5lL3ZpZXcvcm9vdGVkaXRhYmxlZWxlbWVudH5Sb290RWRpdGFibGVFbGVtZW50fG51bGx9IFRoZSB2aWV3IHJvb3QgZWxlbWVudCB3aXRoIHRoZSBzcGVjaWZpZWQgbmFtZQogICAqIG9yIG51bGwgd2hlbiB0aGVyZSBpcyBubyByb290IG9mIGdpdmVuIG5hbWUuCiAgICovCgoKICBnZXRSb290KG5hbWUgPSAnbWFpbicpIHsKICAgIHJldHVybiB0aGlzLnJvb3RzLmdldChuYW1lKTsKICB9CiAgLyoqCiAgICogQWxsb3dzIHJlZ2lzdGVyaW5nIHBvc3QtZml4ZXIgY2FsbGJhY2tzLiBBIHBvc3QtZml4ZXJzIG1lY2hhbmlzbSBhbGxvd3MgdG8gdXBkYXRlIHRoZSB2aWV3IHRyZWUganVzdCBiZWZvcmUgaXQgaXMgcmVuZGVyZWQKICAgKiB0byB0aGUgRE9NLgogICAqCiAgICogUG9zdC1maXhlcnMgYXJlIGV4ZWN1dGVkIHJpZ2h0IGFmdGVyIGFsbCBjaGFuZ2VzIGZyb20gdGhlIG91dGVybW9zdCBjaGFuZ2UgYmxvY2sgd2VyZSBhcHBsaWVkIGJ1dAogICAqIGJlZm9yZSB0aGUge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy92aWV3flZpZXcjZXZlbnQ6cmVuZGVyIHJlbmRlciBldmVudH0gaXMgZmlyZWQuIElmIGEgcG9zdC1maXhlciBjYWxsYmFjayBtYWRlCiAgICogYSBjaGFuZ2UsIGl0IHNob3VsZCByZXR1cm4gYHRydWVgLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHBvc3QtZml4ZXJzIGFyZSBmaXJlZCBhZ2FpbiB0byBjaGVjayBpZiBzb21ldGhpbmcgZWxzZSBzaG91bGQKICAgKiBub3QgYmUgZml4ZWQgaW4gdGhlIG5ldyBkb2N1bWVudCB0cmVlIHN0YXRlLgogICAqCiAgICogVmlldyBwb3N0LWZpeGVycyBhcmUgdXNlZnVsIHdoZW4geW91IHdhbnQgdG8gYXBwbHkgc29tZSBmaXhlcyB3aGVuZXZlciB0aGUgdmlldyBzdHJ1Y3R1cmUgY2hhbmdlcy4gS2VlcCBpbiBtaW5kIHRoYXQKICAgKiBjaGFuZ2VzIGV4ZWN1dGVkIGluIGEgdmlldyBwb3N0LWZpeGVyIHNob3VsZCBub3QgYnJlYWsgbW9kZWwtdmlldyBtYXBwaW5nLgogICAqCiAgICogVGhlIHR5cGVzIG9mIGNoYW5nZXMgd2hpY2ggc2hvdWxkIGJlIHNhZmU6CiAgICoKICAgKiAqIGFkZGluZyBvciByZW1vdmluZyBhdHRyaWJ1dGUgZnJvbSBlbGVtZW50cywKICAgKiAqIGNoYW5nZXMgaW5zaWRlIG9mIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvdWllbGVtZW50flVJRWxlbWVudCBVSSBlbGVtZW50c30sCiAgICogKiB7QGxpbmsgbW9kdWxlOmVuZ2luZS9tb2RlbC9kaWZmZXJ+RGlmZmVyI3JlZnJlc2hJdGVtIG1hcmtpbmcgc29tZSBvZiB0aGUgbW9kZWwgZWxlbWVudHMgdG8gYmUgcmUtY29udmVydGVkfS4KICAgKgogICAqIFRyeSB0byBhdm9pZCBjaGFuZ2VzIHdoaWNoIHRvdWNoIHZpZXcgc3RydWN0dXJlOgogICAqCiAgICogKiB5b3Ugc2hvdWxkIG5vdCBhZGQgb3IgcmVtb3ZlIG5vciB3cmFwIG9yIHVud3JhcCBhbnkgdmlldyBlbGVtZW50cywKICAgKiAqIHlvdSBzaG91bGQgbm90IGNoYW5nZSB0aGUgZWRpdG9yIGRhdGEgbW9kZWwgaW4gYSB2aWV3IHBvc3QtZml4ZXIuCiAgICoKICAgKiBBcyBhIHBhcmFtZXRlciwgYSBwb3N0LWZpeGVyIGNhbGxiYWNrIHJlY2VpdmVzIGEge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy9kb3duY2FzdHdyaXRlcn5Eb3duY2FzdFdyaXRlciBkb3duY2FzdCB3cml0ZXJ9LgogICAqCiAgICogVHlwaWNhbGx5LCBhIHBvc3QtZml4ZXIgd2lsbCBsb29rIGxpa2UgdGhpczoKICAgKgogICAqCQllZGl0b3IuZWRpdGluZy52aWV3LmRvY3VtZW50LnJlZ2lzdGVyUG9zdEZpeGVyKCB3cml0ZXIgPT4gewogICAqCQkJaWYgKCBjaGVja1NvbWVDb25kaXRpb24oKSApIHsKICAgKgkJCQl3cml0ZXIuZG9Tb21ldGhpbmcoKTsKICAgKgogICAqCQkJCS8vIExldCBvdGhlciBwb3N0LWZpeGVycyBrbm93IHRoYXQgc29tZXRoaW5nIGNoYW5nZWQuCiAgICoJCQkJcmV0dXJuIHRydWU7CiAgICoJCQl9CiAgICoJCX0gKTsKICAgKgogICAqIE5vdGUgdGhhdCBub3RoaW5nIGhhcHBlbnMgcmlnaHQgYWZ0ZXIgeW91IHJlZ2lzdGVyIGEgcG9zdC1maXhlciAoZS5nLiBleGVjdXRlIHN1Y2ggYSBjb2RlIGluIHRoZSBjb25zb2xlKS4KICAgKiBUaGF0IGlzIGJlY2F1c2UgYWRkaW5nIGEgcG9zdC1maXhlciBkb2VzIG5vdCBleGVjdXRlIGl0LgogICAqIFRoZSBwb3N0LWZpeGVyIHdpbGwgYmUgZXhlY3V0ZWQgYXMgc29vbiBhcyBhbnkgY2hhbmdlIGluIHRoZSBkb2N1bWVudCBuZWVkcyB0byBjYXVzZSBpdHMgcmVuZGVyaW5nLgogICAqIElmIHlvdSB3YW50IHRvIHJlLXJlbmRlciB0aGUgZWRpdG9yJ3MgdmlldyBhZnRlciByZWdpc3RlcmluZyB0aGUgcG9zdC1maXhlciB0aGVuIHlvdSBzaG91bGQgZG8gaXQgbWFudWFsbHkgYnkgY2FsbGluZwogICAqIHtAbGluayBtb2R1bGU6ZW5naW5lL3ZpZXcvdmlld35WaWV3I2ZvcmNlUmVuZGVyIGB2aWV3LmZvcmNlUmVuZGVyKClgfS4KICAgKgogICAqIElmIHlvdSBuZWVkIHRvIHJlZ2lzdGVyIGEgY2FsbGJhY2sgd2hpY2ggaXMgZXhlY3V0ZWQgd2hlbiBET00gZWxlbWVudHMgYXJlIGFscmVhZHkgdXBkYXRlZCwKICAgKiB1c2Uge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy92aWV3flZpZXcjZXZlbnQ6cmVuZGVyIHJlbmRlciBldmVudH0uCiAgICoKICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwb3N0Rml4ZXIKICAgKi8KCgogIHJlZ2lzdGVyUG9zdEZpeGVyKHBvc3RGaXhlcikgewogICAgdGhpcy5fcG9zdEZpeGVycy5hZGQocG9zdEZpeGVyKTsKICB9CiAgLyoqCiAgICogRGVzdHJveXMgdGhpcyBpbnN0YW5jZS4gTWFrZXMgc3VyZSB0aGF0IGFsbCBvYnNlcnZlcnMgYXJlIGRlc3Ryb3llZCBhbmQgbGlzdGVuZXJzIHJlbW92ZWQuCiAgICovCgoKICBkZXN0cm95KCkgewogICAgdGhpcy5yb290cy5tYXAocm9vdCA9PiByb290LmRlc3Ryb3koKSk7CiAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTsKICB9CiAgLyoqCiAgICogUGVyZm9ybXMgcG9zdC1maXhlciBsb29wcy4gRXhlY3V0ZXMgcG9zdC1maXhlciBjYWxsYmFja3MgYXMgbG9uZyBhcyBub25lIG9mIHRoZW0gaGFzIGRvbmUgYW55IGNoYW5nZXMgdG8gdGhlIG1vZGVsLgogICAqCiAgICogQHByb3RlY3RlZAogICAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L2Rvd25jYXN0d3JpdGVyfkRvd25jYXN0V3JpdGVyfSB3cml0ZXIKICAgKi8KCgogIF9jYWxsUG9zdEZpeGVycyh3cml0ZXIpIHsKICAgIGxldCB3YXNGaXhlZCA9IGZhbHNlOwoKICAgIGRvIHsKICAgICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiB0aGlzLl9wb3N0Rml4ZXJzKSB7CiAgICAgICAgd2FzRml4ZWQgPSBjYWxsYmFjayh3cml0ZXIpOwoKICAgICAgICBpZiAod2FzRml4ZWQpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgfSB3aGlsZSAod2FzRml4ZWQpOwogIH0KICAvKioKICAgKiBFdmVudCBmaXJlZCB3aGVuZXZlciBkb2N1bWVudCBjb250ZW50IGxheW91dCBjaGFuZ2VzLiBJdCBpcyBmaXJlZCB3aGVuZXZlciBjb250ZW50IGlzCiAgICoge0BsaW5rIG1vZHVsZTplbmdpbmUvdmlldy92aWV3flZpZXcjZXZlbnQ6cmVuZGVyIHJlbmRlcmVkfSwgYnV0IHNob3VsZCBiZSBhbHNvIGZpcmVkIGJ5IG9ic2VydmVycyBpbiBjYXNlIG9mCiAgICogb3RoZXIgYWN0aW9ucyB3aGljaCBtYXkgY2hhbmdlIGxheW91dCwgZm9yIGluc3RhbmNlIHdoZW4gaW1hZ2UgbG9hZHMuCiAgICoKICAgKiBAZXZlbnQgbGF5b3V0Q2hhbmdlZAogICAqLwogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8gbG9nKCB2ZXJzaW9uICkgewogIC8vIEBpZiBDS19ERUJVR19FTkdJTkUgLy8JbG9nRG9jdW1lbnQoIHRoaXMsIHZlcnNpb24gKTsKICAvLyBAaWYgQ0tfREVCVUdfRU5HSU5FIC8vIH0KCgp9Cm1peChEb2N1bWVudCwgT2JzZXJ2YWJsZU1peGluKTsKLyoqCiAqIEVudW0gcmVwcmVzZW50aW5nIHR5cGUgb2YgdGhlIGNoYW5nZS4KICoKICogUG9zc2libGUgdmFsdWVzOgogKgogKiAqIGBjaGlsZHJlbmAgLSBmb3IgY2hpbGQgbGlzdCBjaGFuZ2VzLAogKiAqIGBhdHRyaWJ1dGVzYCAtIGZvciBlbGVtZW50IGF0dHJpYnV0ZXMgY2hhbmdlcywKICogKiBgdGV4dGAgLSBmb3IgdGV4dCBub2RlcyBjaGFuZ2VzLgogKgogKiBAdHlwZWRlZiB7U3RyaW5nfSBtb2R1bGU6ZW5naW5lL3ZpZXcvZG9jdW1lbnR+Q2hhbmdlVHlwZQogKi8="},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/view/document.js"],"names":["DocumentSelection","Collection","mix","ObservableMixin","Document","constructor","selection","roots","idProperty","set","_postFixers","Set","getRoot","name","get","registerPostFixer","postFixer","add","destroy","map","root","stopListening","_callPostFixers","writer","wasFixed","callback"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AACA,OAAOC,eAAP,MAA4B,+CAA5B,C,CAEA;;AAEA;;;;;;;AAMA,eAAe,MAAMC,QAAN,CAAe;AAC7B;;;AAGAC,EAAAA,WAAW,GAAG;AACb;;;;;;AAMA,SAAKC,SAAL,GAAiB,IAAIN,iBAAJ,EAAjB;AAEA;;;;;;;;;;;;AAWA,SAAKO,KAAL,GAAa,IAAIN,UAAJ,CAAgB;AAAEO,MAAAA,UAAU,EAAE;AAAd,KAAhB,CAAb;AAEA;;;;;;;;;AAQA,SAAKC,GAAL,CAAU,YAAV,EAAwB,KAAxB;AAEA;;;;;;;;;;;AAUA,SAAKA,GAAL,CAAU,WAAV,EAAuB,KAAvB;AAEA;;;;;;;;;;;AAUA,SAAKA,GAAL,CAAU,aAAV,EAAyB,KAAzB;AAEA;;;;;;;AAMA,SAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACA;AAED;;;;;;;;;;AAQAC,EAAAA,OAAO,CAAEC,IAAI,GAAG,MAAT,EAAkB;AACxB,WAAO,KAAKN,KAAL,CAAWO,GAAX,CAAgBD,IAAhB,CAAP;AACA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CAE,EAAAA,iBAAiB,CAAEC,SAAF,EAAc;AAC9B,SAAKN,WAAL,CAAiBO,GAAjB,CAAsBD,SAAtB;AACA;AAED;;;;;AAGAE,EAAAA,OAAO,GAAG;AACT,SAAKX,KAAL,CAAWY,GAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACF,OAAL,EAAxB;AACA,SAAKG,aAAL;AACA;AAED;;;;;;;;AAMAC,EAAAA,eAAe,CAAEC,MAAF,EAAW;AACzB,QAAIC,QAAQ,GAAG,KAAf;;AAEA,OAAG;AACF,WAAM,MAAMC,QAAZ,IAAwB,KAAKf,WAA7B,EAA2C;AAC1Cc,QAAAA,QAAQ,GAAGC,QAAQ,CAAEF,MAAF,CAAnB;;AAEA,YAAKC,QAAL,EAAgB;AACf;AACA;AACD;AACD,KARD,QAQUA,QARV;AASA;AAED;;;;;;;AAQA;AACA;AACA;;;AA1K6B;AA6K9BtB,GAAG,CAAEE,QAAF,EAAYD,eAAZ,CAAH;AAEA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/document\n */\n\nimport DocumentSelection from './documentselection';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\n// @if CK_DEBUG_ENGINE // const { logDocument } = require( '../dev-utils/utils' );\n\n/**\n * Document class creates an abstract layer over the content editable area, contains a tree of view elements and\n * {@link module:engine/view/documentselection~DocumentSelection view selection} associated with this document.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Document {\n\t/**\n\t * Creates a Document instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Selection done on this document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection} module:engine/view/document~Document#selection\n\t\t */\n\t\tthis.selection = new DocumentSelection();\n\n\t\t/**\n\t\t * Roots of the view tree. Collection of the {@link module:engine/view/element~Element view elements}.\n\t\t *\n\t\t * View roots are created as a result of binding between {@link module:engine/view/document~Document#roots} and\n\t\t * {@link module:engine/model/document~Document#roots} and this is handled by\n\t\t * {@link module:engine/controller/editingcontroller~EditingController}, so to create view root we need to create\n\t\t * model root using {@link module:engine/model/document~Document#createRoot}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection} module:engine/view/document~Document#roots\n\t\t */\n\t\tthis.roots = new Collection( { idProperty: 'rootName' } );\n\n\t\t/**\n\t\t * Defines whether document is in read-only mode.\n\t\t *\n\t\t * When document is read-ony then all roots are read-only as well and caret placed inside this root is hidden.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * True if document is focused.\n\t\t *\n\t\t * This property is updated by the {@link module:engine/view/observer/focusobserver~FocusObserver}.\n\t\t * If the {@link module:engine/view/observer/focusobserver~FocusObserver} is disabled this property will not change.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/document~Document#isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * True if composition is in progress inside the document.\n\t\t *\n\t\t * This property is updated by the {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n\t\t * If the {@link module:engine/view/observer/compositionobserver~CompositionObserver} is disabled this property will not change.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/document~Document#isComposing\n\t\t */\n\t\tthis.set( 'isComposing', false );\n\n\t\t/**\n\t\t * Post-fixer callbacks registered to the view document.\n\t\t *\n\t\t * @private\n\t\t * @member {Set}\n\t\t */\n\t\tthis._postFixers = new Set();\n\t}\n\n\t/**\n\t * Gets a {@link module:engine/view/document~Document#roots view root element} with the specified name. If the name is not\n\t * specific \"main\" root is returned.\n\t *\n\t * @param {String} [name='main'] Name of the root.\n\t * @returns {module:engine/view/rooteditableelement~RootEditableElement|null} The view root element with the specified name\n\t * or null when there is no root of given name.\n\t */\n\tgetRoot( name = 'main' ) {\n\t\treturn this.roots.get( name );\n\t}\n\n\t/**\n\t * Allows registering post-fixer callbacks. A post-fixers mechanism allows to update the view tree just before it is rendered\n\t * to the DOM.\n\t *\n\t * Post-fixers are executed right after all changes from the outermost change block were applied but\n\t * before the {@link module:engine/view/view~View#event:render render event} is fired. If a post-fixer callback made\n\t * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n\t * not be fixed in the new document tree state.\n\t *\n\t * View post-fixers are useful when you want to apply some fixes whenever the view structure changes. Keep in mind that\n\t * changes executed in a view post-fixer should not break model-view mapping.\n\t *\n\t * The types of changes which should be safe:\n\t *\n\t * * adding or removing attribute from elements,\n\t * * changes inside of {@link module:engine/view/uielement~UIElement UI elements},\n\t * * {@link module:engine/model/differ~Differ#refreshItem marking some of the model elements to be re-converted}.\n\t *\n\t * Try to avoid changes which touch view structure:\n\t *\n\t * * you should not add or remove nor wrap or unwrap any view elements,\n\t * * you should not change the editor data model in a view post-fixer.\n\t *\n\t * As a parameter, a post-fixer callback receives a {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.\n\t *\n\t * Typically, a post-fixer will look like this:\n\t *\n\t *\t\teditor.editing.view.document.registerPostFixer( writer => {\n\t *\t\t\tif ( checkSomeCondition() ) {\n\t *\t\t\t\twriter.doSomething();\n\t *\n\t *\t\t\t\t// Let other post-fixers know that something changed.\n\t *\t\t\t\treturn true;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Note that nothing happens right after you register a post-fixer (e.g. execute such a code in the console).\n\t * That is because adding a post-fixer does not execute it.\n\t * The post-fixer will be executed as soon as any change in the document needs to cause its rendering.\n\t * If you want to re-render the editor's view after registering the post-fixer then you should do it manually by calling\n\t * {@link module:engine/view/view~View#forceRender `view.forceRender()`}.\n\t *\n\t * If you need to register a callback which is executed when DOM elements are already updated,\n\t * use {@link module:engine/view/view~View#event:render render event}.\n\t *\n\t * @param {Function} postFixer\n\t */\n\tregisterPostFixer( postFixer ) {\n\t\tthis._postFixers.add( postFixer );\n\t}\n\n\t/**\n\t * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n\t */\n\tdestroy() {\n\t\tthis.roots.map( root => root.destroy() );\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n\t *\n\t * @protected\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\t_callPostFixers( writer ) {\n\t\tlet wasFixed = false;\n\n\t\tdo {\n\t\t\tfor ( const callback of this._postFixers ) {\n\t\t\t\twasFixed = callback( writer );\n\n\t\t\t\tif ( wasFixed ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while ( wasFixed );\n\t}\n\n\t/**\n\t * Event fired whenever document content layout changes. It is fired whenever content is\n\t * {@link module:engine/view/view~View#event:render rendered}, but should be also fired by observers in case of\n\t * other actions which may change layout, for instance when image loads.\n\t *\n\t * @event layoutChanged\n\t */\n\n\t// @if CK_DEBUG_ENGINE // log( version ) {\n\t// @if CK_DEBUG_ENGINE //\tlogDocument( this, version );\n\t// @if CK_DEBUG_ENGINE // }\n}\n\nmix( Document, ObservableMixin );\n\n/**\n * Enum representing type of the change.\n *\n * Possible values:\n *\n * * `children` - for child list changes,\n * * `attributes` - for element attributes changes,\n * * `text` - for text nodes changes.\n *\n * @typedef {String} module:engine/view/document~ChangeType\n */\n"]}]}