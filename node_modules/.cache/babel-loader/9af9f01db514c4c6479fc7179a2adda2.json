{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-core/src/editor/editor.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-core/src/editor/editor.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-core/src/editor/editor.js"],"names":["Config","EditingController","PluginCollection","CommandCollection","Locale","DataController","Conversion","Model","EditingKeystrokeHandler","ObservableMixin","mix","CKEditorError","Editor","constructor","config","availablePlugins","builtinPlugins","defaultConfig","define","plugins","commands","languageConfig","get","locale","uiLanguage","ui","contentLanguage","t","set","once","state","priority","model","data","editing","view","document","bind","to","conversion","downcastDispatcher","upcastDispatcher","addAlias","keystrokes","listenTo","initPlugins","removePlugins","extraPlugins","init","concat","destroy","readyPromise","Promise","resolve","then","fire","stopListening","execute","args","err","rethrowUnexpectedError"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/editor\n */\n\nimport Config from '@ckeditor/ckeditor5-utils/src/config';\nimport EditingController from '@ckeditor/ckeditor5-engine/src/controller/editingcontroller';\nimport PluginCollection from '../plugincollection';\nimport CommandCollection from '../commandcollection';\nimport Locale from '@ckeditor/ckeditor5-utils/src/locale';\nimport DataController from '@ckeditor/ckeditor5-engine/src/controller/datacontroller';\nimport Conversion from '@ckeditor/ckeditor5-engine/src/conversion/conversion';\nimport Model from '@ckeditor/ckeditor5-engine/src/model/model';\nimport EditingKeystrokeHandler from '../editingkeystrokehandler';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Class representing a basic, generic editor.\n *\n * Check out the list of its subclasses to learn about specific editor implementations.\n *\n * All editor implementations (like {@link module:editor-classic/classiceditor~ClassicEditor} or\n * {@link module:editor-inline/inlineeditor~InlineEditor}) should extend this class. They can add their\n * own methods and properties.\n *\n * When you are implementing a plugin, then this editor represents the API\n * which your plugin can expect to get when using its {@link module:core/plugin~Plugin#editor} property.\n *\n * This API should be sufficient in order to implement the \"editing\" part of your feature\n * (schema definition, conversion, commands, keystrokes, etc.).\n * It does not define the editor UI, which is available only if the\n * the specific editor implements also the {@link module:core/editor/editorwithui~EditorWithUI} interface\n * (as most editor implementations do).\n *\n * @abstract\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Editor {\n\t/**\n\t * Creates a new instance of the Editor class.\n\t *\n\t * Usually, not to be used directly. See the static {@link module:core/editor/editor~Editor.create `create()`} method.\n\t *\n\t * @param {Object} [config] The editor config.\n\t */\n\tconstructor( config ) {\n\t\tconst availablePlugins = this.constructor.builtinPlugins;\n\n\t\t/**\n\t\t * Holds all configurations specific to this editor instance.\n\t\t *\n\t\t *\t\teditor.config.get( 'image.toolbar' );\n\t\t *\t\t// -> [ 'imageStyle:full', 'imageStyle:side', '|', 'imageTextAlternative' ]\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/config~Config}\n\t\t */\n\t\tthis.config = new Config( config, this.constructor.defaultConfig );\n\n\t\tthis.config.define( 'plugins', availablePlugins );\n\n\t\t/**\n\t\t * The plugins loaded and in use by this editor instance.\n\t\t *\n\t\t *\t\teditor.plugins.get( 'Clipboard' ); // -> instance of the Clipboard plugin.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/plugincollection~PluginCollection}\n\t\t */\n\t\tthis.plugins = new PluginCollection( this, availablePlugins );\n\n\t\t/**\n\t\t * Commands registered to the editor.\n\t\t *\n\t\t * Use the shorthand {@link #execute `editor.execute()`} method to execute commands:\n\t\t *\n\t\t *\t\t// Execute the bold command:\n\t\t *\t\teditor.execute( 'bold' );\n\t\t *\n\t\t *\t\t// Check the state of the bold command:\n\t\t *\t\teditor.commands.get( 'bold' ).value;\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/commandcollection~CommandCollection}\n\t\t */\n\t\tthis.commands = new CommandCollection();\n\n\t\tconst languageConfig = this.config.get( 'language' ) || {};\n\n\t\t/**\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = new Locale( {\n\t\t\tuiLanguage: typeof languageConfig === 'string' ? languageConfig : languageConfig.ui,\n\t\t\tcontentLanguage: this.config.get( 'language.content' )\n\t\t} );\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method #t\n\t\t */\n\t\tthis.t = this.locale.t;\n\n\t\t/**\n\t\t * Indicates the editor life-cycle state.\n\t\t *\n\t\t * The editor is in one of the following states:\n\t\t *\n\t\t * * `initializing` - during the editor initialization (before {@link module:core/editor/editor~Editor.create `Editor.create()`})\n\t\t * finished its job,\n\t\t * * `ready` - after the promise returned by the {@link module:core/editor/editor~Editor.create `Editor.create()`}\n\t\t * method is resolved,\n\t\t * * `destroyed` - once the {@link #destroy `editor.destroy()`} method was called.\n\t\t *\n\t\t * @observable\n\t\t * @member {'initializing'|'ready'|'destroyed'} #state\n\t\t */\n\t\tthis.set( 'state', 'initializing' );\n\t\tthis.once( 'ready', () => ( this.state = 'ready' ), { priority: 'high' } );\n\t\tthis.once( 'destroy', () => ( this.state = 'destroyed' ), { priority: 'high' } );\n\n\t\t/**\n\t\t * Defines whether this editor is in read-only mode.\n\t\t *\n\t\t * In read-only mode the editor {@link #commands commands} are disabled so it is not possible\n\t\t * to modify the document by using them. Also, the editable element(s) become non-editable.\n\t\t *\n\t\t * In order to make the editor read-only, you can set this value directly:\n\t\t *\n\t\t *\t\teditor.isReadOnly = true;\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * The editor's model.\n\t\t *\n\t\t * The central point of the editor's abstract data model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = new Model();\n\n\t\t/**\n\t\t * The {@link module:engine/controller/datacontroller~DataController data controller}.\n\t\t * Used e.g. for setting and retrieving editor data.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/datacontroller~DataController}\n\t\t */\n\t\tthis.data = new DataController( this.model );\n\n\t\t/**\n\t\t * The {@link module:engine/controller/editingcontroller~EditingController editing controller}.\n\t\t * Controls user input and rendering the content for editing.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/editingcontroller~EditingController}\n\t\t */\n\t\tthis.editing = new EditingController( this.model );\n\t\tthis.editing.view.document.bind( 'isReadOnly' ).to( this );\n\n\t\t/**\n\t\t * Conversion manager through which you can register model to view and view to model converters.\n\t\t *\n\t\t * See {@link module:engine/conversion/conversion~Conversion}'s documentation to learn how to add converters.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/conversion~Conversion}\n\t\t */\n\t\tthis.conversion = new Conversion( [ this.editing.downcastDispatcher, this.data.downcastDispatcher ], this.data.upcastDispatcher );\n\t\tthis.conversion.addAlias( 'dataDowncast', this.data.downcastDispatcher );\n\t\tthis.conversion.addAlias( 'editingDowncast', this.editing.downcastDispatcher );\n\n\t\t/**\n\t\t * Instance of the {@link module:core/editingkeystrokehandler~EditingKeystrokeHandler}.\n\t\t *\n\t\t * It allows setting simple keystrokes:\n\t\t *\n\t\t *\t\t// Execute the bold command on Ctrl+E:\n\t\t *\t\teditor.keystrokes.set( 'Ctrl+E', 'bold' );\n\t\t *\n\t\t *\t\t// Execute your own callback:\n\t\t *\t\teditor.keystrokes.set( 'Ctrl+E', ( data, cancel ) => {\n\t\t *\t\t\tconsole.log( data.keyCode );\n\t\t *\n\t\t *\t\t\t// Prevent default (native) action and stop the underlying keydown event\n\t\t *\t\t\t// so no other editor feature will interfere.\n\t\t *\t\t\tcancel();\n\t\t *\t\t} );\n\t\t *\n\t\t * Note: Certain, typing oriented keystrokes (like <kbd>Backspace</kbd> or <kbd>Enter</kbd>) are handled\n\t\t * by low level mechanism and trying to listen to them via the keystroke handler will not work reliably.\n\t\t * To handle those specific keystrokes see the events fired by the\n\t\t * {@link module:engine/view/document~Document editing view document} (`editor.editing.view.document`).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editingkeystrokehandler~EditingKeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new EditingKeystrokeHandler( this );\n\t\tthis.keystrokes.listenTo( this.editing.view.document );\n\t}\n\n\t/**\n\t * Loads and initializes plugins specified in the config.\n\t *\n\t * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which resolves\n\t * once the initialization is completed providing an array of loaded plugins.\n\t */\n\tinitPlugins() {\n\t\tconst config = this.config;\n\t\tconst plugins = config.get( 'plugins' ) || [];\n\t\tconst removePlugins = config.get( 'removePlugins' ) || [];\n\t\tconst extraPlugins = config.get( 'extraPlugins' ) || [];\n\n\t\treturn this.plugins.init( plugins.concat( extraPlugins ), removePlugins );\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * **Note** The editor cannot be destroyed during the initialization phase so if it is called\n\t * while the editor {@link #state is being initialized}, it will wait for the editor initialization before destroying it.\n\t *\n\t * @fires destroy\n\t * @returns {Promise} A promise that resolves once the editor instance is fully destroyed.\n\t */\n\tdestroy() {\n\t\tlet readyPromise = Promise.resolve();\n\n\t\tif ( this.state == 'initializing' ) {\n\t\t\treadyPromise = new Promise( resolve => this.once( 'ready', resolve ) );\n\t\t}\n\n\t\treturn readyPromise\n\t\t\t.then( () => {\n\t\t\t\tthis.fire( 'destroy' );\n\t\t\t\tthis.stopListening();\n\t\t\t\tthis.commands.destroy();\n\t\t\t} )\n\t\t\t.then( () => this.plugins.destroy() )\n\t\t\t.then( () => {\n\t\t\t\tthis.model.destroy();\n\t\t\t\tthis.data.destroy();\n\t\t\t\tthis.editing.destroy();\n\t\t\t\tthis.keystrokes.destroy();\n\t\t\t} );\n\t}\n\n\t/**\n\t * Executes specified command with given parameters.\n\t *\n\t * Shorthand for:\n\t *\n\t *\t\teditor.commands.get( commandName ).execute( ... );\n\t *\n\t * @param {String} commandName Name of command to execute.\n\t * @param {*} [...commandParams] Command parameters.\n\t */\n\texecute( ...args ) {\n\t\ttry {\n\t\t\tthis.commands.execute( ...args );\n\t\t} catch ( err ) {\n\t\t\t// @if CK_DEBUG // throw err;\n\t\t\t/* istanbul ignore next */\n\t\t\tCKEditorError.rethrowUnexpectedError( err, this );\n\t\t}\n\t}\n\n\t/**\n\t * Creates and initializes a new editor instance.\n\t *\n\t * This is an abstract method. Every editor type needs to implement its own initialization logic.\n\t *\n\t * See the `create()` methods of the existing editor types to learn how to use them:\n\t *\n\t * * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}\n\t * * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}\n\t * * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}\n\t * * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`}\n\t *\n\t * @abstract\n\t * @method module:core/editor/editor~Editor.create\n\t */\n}\n\nmix( Editor, ObservableMixin );\n\n/**\n * Fired when {@link module:engine/controller/datacontroller~DataController#event:ready data} and all additional\n * editor components are ready.\n *\n * Note: This event is most useful for plugin developers. When integrating the editor with your website or\n * application you do not have to listen to `editor#ready` because when the promise returned by the static\n * {@link module:core/editor/editor~Editor.create `Editor.create()`} event is resolved, the editor is already ready.\n * In fact, since the first moment when the editor instance is available to you is inside `then()`'s callback,\n * you cannot even add a listener to the `editor#ready` event.\n *\n * See also the {@link #state `editor.state`} property.\n *\n * @event ready\n */\n\n/**\n * Fired when this editor instance is destroyed. The editor at this point is not usable and this event should be used to\n * perform the clean-up in any plugin.\n *\n *\n * See also the {@link #state `editor.state`} property.\n *\n * @event destroy\n */\n\n/**\n * This error is thrown when a user tries to use a `<textarea>` element to create a non-classic editor in it.\n *\n * Textarea element represents a plain-text and cannot be used as a editable root element with included CKEditor5.\n * Content of an editor should be nicely present to the user and show him how it's going to looks like. Textarea element\n * doesn't support such behavior.\n *\n * Typically you can use a `div` for storing editor content instead:\n *\n *\t\t<div id=\"editor\">\n *\t\t\t<p>Initial content.</p>\n *\t\t</div>\n *\n * Only {@glink builds/guides/overview#classic-editor Classic Editor} has implemented a special system, which\n * **replace** DOM element and load data from it\n * ({@link module:editor-classic/classiceditor~ClassicEditor.create more information}). All other editors\n * use an existing element, load data from it and make this element editable. Details about behaviour of each editor\n * might be found in an associated description of a `create` method of each editor.\n *\n * @error editor-wrong-element\n */\n\n/**\n * An array of plugins built into this editor class.\n * It is used in CKEditor 5 builds to provide a list of plugins which are later automatically initialized\n * during the editor initialization.\n *\n * They will be automatically initialized by the editor, unless listed in `config.removePlugins` and\n * unless `config.plugins` is passed.\n *\n *\t\t// Build some plugins into the editor class first.\n *\t\tClassicEditor.builtinPlugins = [ FooPlugin, BarPlugin ];\n *\n *\t\t// Normally, you need to define config.plugins, but since ClassicEditor.builtinPlugins was\n *\t\t// defined, now you can call create() without any configuration.\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> instance of the Foo plugin\n *\t\t\t\teditor.plugins.get( BarPlugin ); // -> instance of the Bar plugin\n *\t\t\t} );\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, {\n *\t\t\t\t// Don't initialize this plugins (note: it's defined by a string):\n *\t\t\t\tremovePlugins: [ 'Foo' ]\n *\t\t\t} )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> undefined\n *\t\t\t\teditor.config.get( BarPlugin ); // -> instance of the Bar plugin\n *\t\t\t} );\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, {\n *\t\t\t\t// Load only this plugin. Can also be define by a string if\n *\t\t\t\t// this plugin was built into the editor class.\n *\t\t\t\tplugins: [ FooPlugin ]\n *\t\t\t} )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> instance of the Foo plugin\n *\t\t\t\teditor.config.get( BarPlugin ); // -> undefined\n *\t\t\t} );\n *\n * See also {@link module:core/editor/editor~Editor.defaultConfig}.\n *\n * @static\n * @member {Array.<Function>} module:core/editor/editor~Editor.builtinPlugins\n */\n\n/**\n * The default config which is built into the editor class.\n * It is used in CKEditor 5 builds to provide the default config options which are later used during editor initialization.\n *\n *\t\tClassicEditor.defaultConfig = {\n *\t\t\tfoo: 1,\n *\t\t\tbar: 2\n *\t\t};\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.config.get( 'foo' ); // -> 1\n *\t\t\t\teditor.config.get( 'bar' ); // -> 2\n *\t\t\t} );\n *\n *\t\t// The default options can be overridden by the config passed to create().\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, { bar: 3 } )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.config.get( 'foo' ); // -> 1\n *\t\t\t\teditor.config.get( 'bar' ); // -> 3\n *\t\t\t} );\n *\n * See also {@link module:core/editor/editor~Editor.builtinPlugins}.\n *\n * @static\n * @member {Object} module:core/editor/editor~Editor.defaultConfig\n */\n"]}]}