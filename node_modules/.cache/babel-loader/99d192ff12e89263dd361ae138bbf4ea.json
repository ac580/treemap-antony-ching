{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js"],"names":["Position","Element","Node","Range","EmitterMixin","CKEditorError","mix","isIterable","Selection","constructor","selectable","placeOrOffset","options","_lastRangeBackward","_ranges","_attrs","Map","setTo","anchor","length","range","end","start","focus","isCollapsed","rangeCount","isBackward","isEqual","otherSelection","thisRange","found","otherRange","getRanges","getFirstRange","first","isBefore","getLastRange","last","isAfter","getFirstPosition","clone","getLastPosition","lastRange","_setRanges","backward","_createIn","_createOn","undefined","_createAt","newRanges","isLastBackward","Array","from","anyNewRange","some","newRange","every","oldRange","_removeAllRanges","_pushRange","fire","directChange","setFocus","itemOrPosition","offset","newFocus","compareWith","_popRange","getAttribute","key","get","getAttributes","entries","getAttributeKeys","keys","hasAttribute","has","removeAttribute","delete","attributeKeys","setAttribute","value","set","getSelectedElement","nodeAfterStart","nodeAfter","nodeBeforeEnd","nodeBefore","is","type","getSelectedBlocks","visited","WeakSet","startBlock","getParentBlock","isTopBlockInRange","getWalker","block","item","isUnvisitedTopBlock","endBlock","isTouching","containsEntireContent","element","root","limitStartPosition","limitEndPosition","_checkRange","push","i","isIntersecting","addedRange","intersectingRange","pop","isUnvisitedBlock","add","document","model","schema","isBlock","parent","position","ancestors","getAncestors","parentFirst","includeSelf","hasParentLimit","find","isLimit","forEach","parentBlock","findAncestorBlock","isParentInRange","containsRange","node"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/selection\n */\n\nimport Position from './position';\nimport Element from './element';\nimport Node from './node';\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * Selection is a set of {@link module:engine/model/range~Range ranges}. It has a direction specified by its\n * {@link module:engine/model/selection~Selection#anchor anchor} and {@link module:engine/model/selection~Selection#focus focus}\n * (it can be {@link module:engine/model/selection~Selection#isBackward forward or backward}).\n * Additionally, selection may have its own attributes (think – whether text typed in in this selection\n * should have those attributes – e.g. whether you type a bolded text).\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Selection {\n\t/**\n\t * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}\n\t * or creates an empty selection if no arguments were passed.\n\t *\n\t *\t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\tconst selection = writer.createSelection( documentSelection );\n\t *\n\t *\t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates selection at the given offset in the given element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * Selection's constructor allow passing additional options (`'backward'`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tconstructor( selectable, placeOrOffset, options ) {\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Stores selection ranges.\n\t\t *\n\t\t * @protected\n\t\t * @type {Array.<module:engine/model/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * List of attributes set on current selection.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map.<String,*>}\n\t\t */\n\t\tthis._attrs = new Map();\n\n\t\tif ( selectable ) {\n\t\t\tthis.setTo( selectable, placeOrOffset, options );\n\t\t}\n\t}\n\n\t/**\n\t * Selection anchor. Anchor is the position from which the selection was started. If a user is making a selection\n\t * by dragging the mouse, the anchor is where the user pressed the mouse button (the beggining of the selection).\n\t *\n\t * Anchor and {@link #focus} define the direction of the selection, which is important\n\t * when expanding/shrinking selection. The focus moves, while the anchor should remain in the same place.\n\t *\n\t * Anchor is always set to the {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the last of selection's ranges. Whether it is\n\t * the `start` or `end` depends on the specified `options.backward`. See the {@link #setTo `setTo()`} method.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.end : range.start;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Selection focus. Focus is the position where the selection ends. If a user is making a selection\n\t * by dragging the mouse, the focus is where the mouse cursor is.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.start : range.end;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Whether the selection is collapsed. Selection is collapsed when there is exactly one range in it\n\t * and it is collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\tif ( length === 1 ) {\n\t\t\treturn this._ranges[ 0 ].isCollapsed;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the number of ranges in the selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the selection's {@link #focus} precedes the selection's {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * Checks whether this selection is equal to the given selection. Selections are equal if they have the same directions,\n\t * the same number of ranges and all ranges from one selection equal to ranges from the another selection.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns an iterable object that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield new Range( range.start, range.end );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? new Range( first.start, first.end ) : null;\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? new Range( last.start, last.end ) : null;\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst first = this.getFirstRange();\n\n\t\treturn first ? first.start.clone() : null;\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? lastRange.end.clone() : null;\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selectable selectable}.\n\t *\n\t *\t\t// Removes all selection's ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tselection.setTo( ranges );\n\t *\n\t *\t\t// Sets selection to other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t *\t\t// Sets selection to the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = new DocumentSelection( doc );\n\t *\t\tselection.setTo( documentSelection );\n\t *\n\t *\t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t *\t\t// Sets collapsed selection at the position of the given node and an offset.\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t *\t\tselection.setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tselection.setTo( paragraph, 'on' );\n\t *\n\t * `Selection#setTo()`' method allow passing additional options (`backward`) as the last argument.\n\t *\n\t *\t\t// Sets backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selectable} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tsetTo( selectable, placeOrOffset, options ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._setRanges( [] );\n\t\t} else if ( selectable instanceof Selection ) {\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable && typeof selectable.getRanges == 'function' ) {\n\t\t\t// We assume that the selectable is a DocumentSelection.\n\t\t\t// It can't be imported here, because it would lead to circular imports.\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], !!placeOrOffset && !!placeOrOffset.backward );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t} else if ( selectable instanceof Node ) {\n\t\t\tconst backward = !!options && !!options.backward;\n\t\t\tlet range;\n\n\t\t\tif ( placeOrOffset == 'in' ) {\n\t\t\t\trange = Range._createIn( selectable );\n\t\t\t} else if ( placeOrOffset == 'on' ) {\n\t\t\t\trange = Range._createOn( selectable );\n\t\t\t} else if ( placeOrOffset !== undefined ) {\n\t\t\t\trange = new Range( Position._createAt( selectable, placeOrOffset ) );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * selection.setTo requires the second parameter when the first parameter is a node.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-setTo-required-second-parameter\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-setTo-required-second-parameter: ' +\n\t\t\t\t\t'selection.setTo requires the second parameter when the first parameter is a node.',\n\t\t\t\t\t[ this, selectable ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis._setRanges( [ range ], backward );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\tthis._setRanges( selectable, placeOrOffset && !!placeOrOffset.backward );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set the selection to the given place.\n\t\t\t *\n\t\t\t * Invalid parameters were specified when setting the selection. Common issues:\n\t\t\t *\n\t\t\t * * A {@link module:engine/model/textproxy~TextProxy} instance was passed instead of\n\t\t\t * a real {@link module:engine/model/text~Text}.\n\t\t\t * * View nodes were passed instead of model nodes.\n\t\t\t * * `null`/`undefined` was passed.\n\t\t\t *\n\t\t\t * @error model-selection-setTo-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-selection-setTo-not-selectable: Cannot set the selection to the given place.',\n\t\t\t\t[ this, selectable ]\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link module:engine/model/selection~Selection#anchor} and\n\t * {@link module:engine/model/selection~Selection#focus}. Accepts a flag describing in which direction the selection is made.\n\t *\n\t * @protected\n\t * @fires change:range\n\t * @param {Iterable.<module:engine/model/range~Range>} newRanges Ranges to set.\n\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end (`false`)\n\t * or backward - from end to start (`true`).\n\t */\n\t_setRanges( newRanges, isLastBackward = false ) {\n\t\tnewRanges = Array.from( newRanges );\n\n\t\t// Check whether there is any range in new ranges set that is different than all already added ranges.\n\t\tconst anyNewRange = newRanges.some( newRange => {\n\t\t\tif ( !( newRange instanceof Range ) ) {\n\t\t\t\t/**\n\t\t\t\t * Selection range set to an object that is not an instance of {@link module:engine/model/range~Range}.\n\t\t\t\t *\n\t\t\t\t * Only {@link module:engine/model/range~Range} instances can be used to set a selection.\n\t\t\t\t * Common mistakes leading to this error are:\n\t\t\t\t *\n\t\t\t\t * * using DOM `Range` object,\n\t\t\t\t * * incorrect CKEditor 5 installation with multiple `ckeditor5-engine` packages having different versions.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-set-ranges-not-range\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-set-ranges-not-range: ' +\n\t\t\t\t\t'Selection range set to an object that is not an instance of model.Range.',\n\t\t\t\t\t[ this, newRanges ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this._ranges.every( oldRange => {\n\t\t\t\treturn !oldRange.isEqual( newRange );\n\t\t\t} );\n\t\t} );\n\n\t\t// Don't do anything if nothing changed.\n\t\tif ( newRanges.length === this._ranges.length && !anyNewRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._removeAllRanges();\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._pushRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/selection~Selection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n\t *\n\t * @fires change:range\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error model-selection-setFocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.',\n\t\t\t\t[ this, itemOrPosition ]\n\t\t\t);\n\t\t}\n\n\t\tconst newFocus = Position._createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tif ( this._ranges.length ) {\n\t\t\tthis._popRange();\n\t\t}\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._pushRange( new Range( newFocus, anchor ) );\n\t\t\tthis._lastRangeBackward = true;\n\t\t} else {\n\t\t\tthis._pushRange( new Range( anchor, newFocus ) );\n\t\t\tthis._lastRangeBackward = false;\n\t\t}\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._attrs.entries();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._attrs.keys();\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t *\n\t * If given attribute was set on the selection, fires the {@link #event:change:range} event with\n\t * removed attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to remove.\n\t */\n\tremoveAttribute( key ) {\n\t\tif ( this.hasAttribute( key ) ) {\n\t\t\tthis._attrs.delete( key );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * If the attribute value has changed, fires the {@link #event:change:range} event with\n\t * the attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\tsetAttribute( key, value ) {\n\t\tif ( this.getAttribute( key ) !== value ) {\n\t\t\tthis._attrs.set( key, value );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = this.getFirstRange();\n\t\tconst nodeAfterStart = range.start.nodeAfter;\n\t\tconst nodeBeforeEnd = range.end.nodeBefore;\n\n\t\treturn ( nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ) ? nodeAfterStart : null;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\tselection.is( 'selection' ); // -> true\n\t *\t\tselection.is( 'model:selection' ); // -> true\n\t *\n\t *\t\tselection.is( 'view:selection' ); // -> false\n\t *\t\tselection.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'selection' || type == 'model:selection';\n\t}\n\n\t/**\n\t * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n\t * but will not return blocks nested in other blocks.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<blockQuote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</blockQuote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n\t *\n\t *\t\t[<blockA></blockA>\n\t *\t\t<blockB>\n\t *\t\t\t<blockC></blockC>\n\t *\t\t\t<blockD></blockD>\n\t *\t\t</blockB>\n\t *\t\t<blockE></blockE>]\n\t *\n\t * If the selection is inside a block all the inner blocks (A & B) are returned:\n\t *\n\t * \t\t<block>\n\t *\t\t\t<blockA>[a</blockA>\n\t * \t\t\t<blockB>b]</blockB>\n\t * \t\t</block>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\t* getSelectedBlocks() {\n\t\tconst visited = new WeakSet();\n\n\t\tfor ( const range of this.getRanges() ) {\n\t\t\t// Get start block of range in case of a collapsed range.\n\t\t\tconst startBlock = getParentBlock( range.start, visited );\n\n\t\t\tif ( startBlock && isTopBlockInRange( startBlock, range ) ) {\n\t\t\t\tyield startBlock;\n\t\t\t}\n\n\t\t\tfor ( const value of range.getWalker() ) {\n\t\t\t\tconst block = value.item;\n\n\t\t\t\tif ( value.type == 'elementEnd' && isUnvisitedTopBlock( block, visited, range ) ) {\n\t\t\t\t\tyield block;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst endBlock = getParentBlock( range.end, visited );\n\n\t\t\t// #984. Don't return the end block if the range ends right at its beginning.\n\t\t\tif ( endBlock && !range.end.isTouching( Position._createAt( endBlock, 0 ) ) && isTopBlockInRange( endBlock, range ) ) {\n\t\t\t\tyield endBlock;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element = this.anchor.root ) {\n\t\tconst limitStartPosition = Position._createAt( element, 0 );\n\t\tconst limitEndPosition = Position._createAt( element, 'end' );\n\n\t\treturn limitStartPosition.isTouching( this.getFirstPosition() ) &&\n\t\t\tlimitEndPosition.isTouching( this.getLastPosition() );\n\t}\n\n\t/**\n\t * Adds given range to internal {@link #_ranges ranges array}. Throws an error\n\t * if given range is intersecting with any range that is already stored in this selection.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to add.\n\t */\n\t_pushRange( range ) {\n\t\tthis._checkRange( range );\n\t\tthis._ranges.push( new Range( range.start, range.end ) );\n\t}\n\n\t/**\n\t * Checks if given range intersects with ranges that are already in the selection. Throws an error if it does.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to check.\n\t */\n\t_checkRange( range ) {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tif ( range.isIntersecting( this._ranges[ i ] ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range in the selection.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-range-intersects\n\t\t\t\t * @param {module:engine/model/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/model/range~Range} intersectingRange Range in the selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-range-intersects: Trying to add a range that intersects with another range in the selection.',\n\t\t\t\t\t[ this, range ],\n\t\t\t\t\t{ addedRange: range, intersectingRange: this._ranges[ i ] }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deletes ranges from internal range array. Uses {@link #_popRange _popRange} to\n\t * ensure proper ranges removal.\n\t *\n\t * @protected\n\t */\n\t_removeAllRanges() {\n\t\twhile ( this._ranges.length > 0 ) {\n\t\t\tthis._popRange();\n\t\t}\n\t}\n\n\t/**\n\t * Removes most recently added range from the selection.\n\t *\n\t * @protected\n\t */\n\t_popRange() {\n\t\tthis._ranges.pop();\n\t}\n\n\t/**\n\t * Fired when selection range(s) changed.\n\t *\n\t * @event change:range\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n\t * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed because the structure of the model has been changed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t */\n\n\t/**\n\t * Fired when selection attribute changed.\n\t *\n\t * @event change:attribute\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n\t * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed in the model and its attributes were refreshed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n\t */\n}\n\nmix( Selection, EmitterMixin );\n\n// Checks whether the given element extends $block in the schema and has a parent (is not a root).\n// Marks it as already visited.\nfunction isUnvisitedBlock( element, visited ) {\n\tif ( visited.has( element ) ) {\n\t\treturn false;\n\t}\n\n\tvisited.add( element );\n\n\treturn element.document.model.schema.isBlock( element ) && element.parent;\n}\n\n// Checks if the given element is a $block was not previously visited and is a top block in a range.\nfunction isUnvisitedTopBlock( element, visited, range ) {\n\treturn isUnvisitedBlock( element, visited ) && isTopBlockInRange( element, range );\n}\n\n// Finds the lowest element in position's ancestors which is a block.\n// It will search until first ancestor that is a limit element.\n// Marks all ancestors as already visited to not include any of them later on.\nfunction getParentBlock( position, visited ) {\n\tconst schema = position.parent.document.model.schema;\n\n\tconst ancestors = position.parent.getAncestors( { parentFirst: true, includeSelf: true } );\n\n\tlet hasParentLimit = false;\n\n\tconst block = ancestors.find( element => {\n\t\t// Stop searching after first parent node that is limit element.\n\t\tif ( hasParentLimit ) {\n\t\t\treturn false;\n\t\t}\n\n\t\thasParentLimit = schema.isLimit( element );\n\n\t\treturn !hasParentLimit && isUnvisitedBlock( element, visited );\n\t} );\n\n\t// Mark all ancestors of this position's parent, because find() might've stopped early and\n\t// the found block may be a child of another block.\n\tancestors.forEach( element => visited.add( element ) );\n\n\treturn block;\n}\n\n// Checks if the blocks is not nested in other block inside a range.\n//\n// @param {module:engine/model/elmenent~Element} block Block to check.\n// @param {module:engine/model/range~Range} range Range to check.\nfunction isTopBlockInRange( block, range ) {\n\tconst parentBlock = findAncestorBlock( block );\n\n\tif ( !parentBlock ) {\n\t\treturn true;\n\t}\n\n\t// Add loose flag to check as parentRange can be equal to range.\n\tconst isParentInRange = range.containsRange( Range._createOn( parentBlock ), true );\n\n\treturn !isParentInRange;\n}\n\n// Returns first ancestor block of a node.\n//\n// @param {module:engine/model/node~Node} node\n// @returns {module:engine/model/node~Node|undefined}\nfunction findAncestorBlock( node ) {\n\tconst schema = node.document.model.schema;\n\n\tlet parent = node.parent;\n\n\twhile ( parent ) {\n\t\tif ( schema.isBlock( parent ) ) {\n\t\t\treturn parent;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n}\n\n/**\n * An entity that is used to set selection.\n *\n * See also {@link module:engine/model/selection~Selection#setTo}\n *\n * @typedef {\n *     module:engine/model/selection~Selection|\n *     module:engine/model/documentselection~DocumentSelection|\n *     module:engine/model/position~Position|\n *     module:engine/model/range~Range|\n *     module:engine/model/node~Node|\n *     Iterable.<module:engine/model/range~Range>|\n *     null\n * } module:engine/model/selection~Selectable\n */\n"]}]}