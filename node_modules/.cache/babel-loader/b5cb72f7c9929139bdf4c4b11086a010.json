{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/schema.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/schema.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/schema.js"],"names":["CKEditorError","ObservableMixin","mix","Range","Position","Element","Text","TreeWalker","Schema","constructor","_sourceDefinitions","_attributeProperties","decorate","on","evt","args","SchemaContext","priority","getDefinition","register","itemName","definition","Object","assign","_clearCache","extend","push","getDefinitions","_compiledDefinitions","_compile","item","is","name","isRegistered","isBlock","def","isLimit","isObject","isInline","checkChild","context","_checkContextMatch","checkAttribute","attributeName","last","allowAttributes","includes","checkMerge","positionOrBaseElement","elementToMerge","nodeBefore","nodeAfter","child","getChildren","addChildCheck","callback","ctx","childDef","retValue","stop","return","addAttributeCheck","setAttributeProperties","properties","getAttributeProperties","getLimitElement","selectionOrRangeOrPosition","element","parent","ranges","Array","from","getRanges","reduce","range","rangeCommonAncestor","getCommonAncestor","includeSelf","checkAttributeInSelection","selection","attribute","isCollapsed","firstPosition","getFirstPosition","getAncestors","getAttributes","value","getValidRanges","convertToMinimalFlatRanges","_getValidRangesForRange","getNearestSelectionRange","position","direction","backwardWalker","forwardWalker","startPosition","data","combineWalkers","type","walker","_createOn","nextPosition","findAllowedParent","node","removeDisallowedAttributes","nodes","writer","removeDisallowedAttributeFromNode","rangeInNode","_createIn","positionsInRange","getPositions","createContext","compiledDefinitions","sourceRules","itemNames","keys","compileBaseItemRule","compileAllowContentOf","compileAllowWhere","compileAllowAttributesOf","compileInheritPropertiesFrom","cleanUpAllowIn","cleanUpAllowAttributes","contextItemIndex","length","contextItem","getItem","allowIn","parentRule","start","end","getItems","shallow","isEqual","_createAfter","isArray","shift","_items","map","mapContextItem","Symbol","iterator","index","getNames","endsWith","query","join","sourceItemRules","itemRule","allowContentOf","allowWhere","allowAttributesOf","inheritTypesFrom","copyTypes","copyProperty","makeInheritAllWork","allowContentOfItemName","allowedChildren","getAllowedChildren","forEach","allowedItem","allowWhereItemName","inheritFrom","allowedIn","allowAttributeOfItem","inheritAttributes","inheritPropertiesOfItem","typeNames","filter","startsWith","existingItems","itemToCheck","Set","sourceItemRule","propertyName","inheritAllFrom","getValues","obj","key","ctxItem","getAttributeKeys","getAttribute","backward","forward","done","step","next","getMinimalFlatRanges","schema","removeAttribute"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/schema\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\nimport Range from './range';\nimport Position from './position';\nimport Element from './element';\nimport Text from './text';\nimport TreeWalker from './treewalker';\n\n/**\n * The model's schema. It defines allowed and disallowed structures of nodes as well as nodes' attributes.\n * The schema is usually defined by features and based on them the editing framework and features\n * make decisions how to change and process the model.\n *\n * The instance of schema is available in {@link module:engine/model/model~Model#schema `editor.model.schema`}.\n *\n * Read more about the schema in:\n *\n * * {@glink framework/guides/architecture/editing-engine#schema \"Schema\"} section of the\n * {@glink framework/guides/architecture/editing-engine Introduction to the \"Editing engine architecture\"}.\n * * {@glink framework/guides/deep-dive/schema \"Schema\" deep dive} guide.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Schema {\n\t/**\n\t * Creates schema instance.\n\t */\n\tconstructor() {\n\t\tthis._sourceDefinitions = {};\n\n\t\t/**\n\t\t * A dictionary containing attribute properties.\n\t\t *\n\t\t * @private\n\t\t * @member {Object.<String,String>}\n\t\t */\n\t\tthis._attributeProperties = {};\n\n\t\tthis.decorate( 'checkChild' );\n\t\tthis.decorate( 'checkAttribute' );\n\n\t\tthis.on( 'checkAttribute', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.on( 'checkChild', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t\targs[ 1 ] = this.getDefinition( args[ 1 ] );\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Registers schema item. Can only be called once for every item name.\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tinheritAllFrom: '$block'\n\t *\t\t} );\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\tregister( itemName, definition ) {\n\t\tif ( this._sourceDefinitions[ itemName ] ) {\n\t\t\t/**\n\t\t\t * A single item cannot be registered twice in the schema.\n\t\t\t *\n\t\t\t * This situation may happen when:\n\t\t\t *\n\t\t\t * * Two or more plugins called {@link #register `register()`} with the same name. This will usually mean that\n\t\t\t * there is a collision between plugins which try to use the same element in the model. Unfortunately,\n\t\t\t * the only way to solve this is by modifying one of these plugins to use a unique model element name.\n\t\t\t * * A single plugin was loaded twice. This happens when it is installed by npm/yarn in two versions\n\t\t\t * and usually means one or more of the following issues:\n\t\t\t *     * a version mismatch (two of your dependencies require two different versions of this plugin),\n\t\t\t *     * incorrect imports (this plugin is somehow imported twice in a way which confuses webpack),\n\t\t\t *     * mess in `node_modules/` (`rm -rf node_modules/` may help).\n\t\t\t *\n\t\t\t * **Note:** Check the logged `itemName` to better understand which plugin was duplicated/conflicting.\n\t\t\t *\n\t\t\t * @param itemName The name of the model element that is being registered twice.\n\t\t\t * @error schema-cannot-register-item-twice\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'schema-cannot-register-item-twice: A single item cannot be registered twice in the schema.',\n\t\t\t\tthis,\n\t\t\t\t{\n\t\t\t\t\titemName\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ] = [\n\t\t\tObject.assign( {}, definition )\n\t\t];\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Extends a {@link #register registered} item's definition.\n\t *\n\t * Extending properties such as `allowIn` will add more items to the existing properties,\n\t * while redefining properties such as `isBlock` will override the previously defined ones.\n\t *\n\t *\t\tschema.register( 'foo', {\n\t *\t\t\tallowIn: '$root',\n\t *\t\t\tisBlock: true;\n\t *\t\t} );\n\t *\t\tschema.extend( 'foo', {\n\t *\t\t\tallowIn: 'blockQuote',\n\t *\t\t\tisBlock: false\n\t *\t\t} );\n\t *\n\t *\t\tschema.getDefinition( 'foo' );\n\t *\t\t//\t{\n\t *\t\t//\t\tallowIn: [ '$root', 'blockQuote' ],\n\t *\t\t// \t\tisBlock: false\n\t *\t\t//\t}\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\textend( itemName, definition ) {\n\t\tif ( !this._sourceDefinitions[ itemName ] ) {\n\t\t\t/**\n\t\t\t * Cannot extend an item which was not registered yet.\n\t\t\t *\n\t\t\t * This error happens when a plugin tries to extend the schema definition of an item which was not\n\t\t\t * {@link #register registered} yet.\n\t\t\t *\n\t\t\t * @param itemName The name of the model element which is being extended.\n\t\t\t * @error schema-cannot-extend-missing-item\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'schema-cannot-extend-missing-item: Cannot extend an item which was not registered yet.', this, {\n\t\t\t\titemName\n\t\t\t} );\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ].push( Object.assign( {}, definition ) );\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Returns all registered items.\n\t *\n\t * @returns {Object.<String,module:engine/model/schema~SchemaCompiledItemDefinition>}\n\t */\n\tgetDefinitions() {\n\t\tif ( !this._compiledDefinitions ) {\n\t\t\tthis._compile();\n\t\t}\n\n\t\treturn this._compiledDefinitions;\n\t}\n\n\t/**\n\t * Returns a definition of the given item or `undefined` if item is not registered.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t * @returns {module:engine/model/schema~SchemaCompiledItemDefinition}\n\t */\n\tgetDefinition( item ) {\n\t\tlet itemName;\n\n\t\tif ( typeof item == 'string' ) {\n\t\t\titemName = item;\n\t\t} else if ( item.is && ( item.is( 'text' ) || item.is( 'textProxy' ) ) ) {\n\t\t\titemName = '$text';\n\t\t}\n\t\t// Element or module:engine/model/schema~SchemaContextItem.\n\t\telse {\n\t\t\titemName = item.name;\n\t\t}\n\n\t\treturn this.getDefinitions()[ itemName ];\n\t}\n\n\t/**\n\t * Returns `true` if the given item is registered in the schema.\n\t *\n\t *\t\tschema.isRegistered( 'paragraph' ); // -> true\n\t *\t\tschema.isRegistered( editor.model.document.getRoot() ); // -> true\n\t *\t\tschema.isRegistered( 'foo' ); // -> false\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisRegistered( item ) {\n\t\treturn !!this.getDefinition( item );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a block by {@link module:engine/model/schema~SchemaItemDefinition}'s `isBlock` property.\n\t *\n\t *\t\tschema.isBlock( 'paragraph' ); // -> true\n\t *\t\tschema.isBlock( '$root' ); // -> false\n\t *\n\t *\t\tconst paragraphElement = writer.createElement( 'paragraph' );\n\t *\t\tschema.isBlock( paragraphElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisBlock( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isBlock );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a limit element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isLimit` or `isObject` property\n\t * (all objects are also limits).\n\t *\n\t *\t\tschema.isLimit( 'paragraph' ); // -> false\n\t *\t\tschema.isLimit( '$root' ); // -> true\n\t *\t\tschema.isLimit( editor.model.document.getRoot() ); // -> true\n\t *\t\tschema.isLimit( 'image' ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisLimit( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!( def.isLimit || def.isObject );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * an object element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isObject` property.\n\t *\n\t *\t\tschema.isObject( 'paragraph' ); // -> false\n\t *\t\tschema.isObject( 'image' ); // -> true\n\t *\n\t *\t\tconst imageElement = writer.createElement( 'image' );\n\t *\t\tschema.isObject( imageElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisObject( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isObject );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * an inline element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isInline` property.\n\t *\n\t *\t\tschema.isInline( 'paragraph' ); // -> false\n\t *\t\tschema.isInline( 'softBreak' ); // -> true\n\t *\n\t *\t\tconst text = writer.createText('foo' );\n\t *\t\tschema.isInline( text ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisInline( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isInline );\n\t}\n\n\t/**\n\t * Checks whether the given node (`child`) can be a child of the given context.\n\t *\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> false\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tallowIn: '$root'\n\t *\t\t} );\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> true\n\t *\n\t * Note: When verifying whether the given node can be a child of the given context, the\n\t * schema also verifies the entire context &mdash; from its root to its last element. Therefore, it is possible\n\t * for `checkChild()` to return `false` even though the context's last element can contain the checked child.\n\t * It happens if one of the context's elements does not allow its child.\n\t *\n\t * @fires checkChild\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the child will be checked.\n\t * @param {module:engine/model/node~Node|String} def The child to check.\n\t */\n\tcheckChild( context, def ) {\n\t\t// Note: context and child are already normalized here to a SchemaContext and SchemaCompiledItemDefinition.\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._checkContextMatch( def, context );\n\t}\n\n\t/**\n\t * Checks whether the given attribute can be applied in the given context (on the last\n\t * item of the context).\n\t *\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> false\n\t *\n\t *\t\tschema.extend( '$text', {\n\t *\t\t\tallowAttributes: 'bold'\n\t *\t\t} );\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> true\n\t *\n\t * @fires checkAttribute\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the attribute will be checked.\n\t * @param {String} attributeName\n\t */\n\tcheckAttribute( context, attributeName ) {\n\t\tconst def = this.getDefinition( context.last );\n\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn def.allowAttributes.includes( attributeName );\n\t}\n\n\t/**\n\t * Checks whether the given element (`elementToMerge`) can be merged with the specified base element (`positionOrBaseElement`).\n\t *\n\t * In other words &mdash; whether `elementToMerge`'s children {@link #checkChild are allowed} in the `positionOrBaseElement`.\n\t *\n\t * This check ensures that elements merged with {@link module:engine/model/writer~Writer#merge `Writer#merge()`}\n\t * will be valid.\n\t *\n\t * Instead of elements, you can pass the instance of the {@link module:engine/model/position~Position} class as the\n\t * `positionOrBaseElement`. It means that the elements before and after the position will be checked whether they can be merged.\n\t *\n\t * @param {module:engine/model/position~Position|module:engine/model/element~Element} positionOrBaseElement The position or base\n\t * element to which the `elementToMerge` will be merged.\n\t * @param {module:engine/model/element~Element} elementToMerge The element to merge. Required if `positionOrBaseElement` is an element.\n\t * @returns {Boolean}\n\t */\n\tcheckMerge( positionOrBaseElement, elementToMerge = null ) {\n\t\tif ( positionOrBaseElement instanceof Position ) {\n\t\t\tconst nodeBefore = positionOrBaseElement.nodeBefore;\n\t\t\tconst nodeAfter = positionOrBaseElement.nodeAfter;\n\n\t\t\tif ( !( nodeBefore instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node before the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-before\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'schema-check-merge-no-element-before: The node before the merge position must be an element.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( !( nodeAfter instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node after the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-after\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'schema-check-merge-no-element-after: The node after the merge position must be an element.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this.checkMerge( nodeBefore, nodeAfter );\n\t\t}\n\n\t\tfor ( const child of elementToMerge.getChildren() ) {\n\t\t\tif ( !this.checkChild( positionOrBaseElement, child ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkChild} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow elements in specific contexts.\n\t *\n\t * This method is a shorthand for using the {@link #event:checkChild} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow heading1 directly inside a blockQuote.\n\t *\t\tschema.addChildCheck( ( context, childDefinition ) => {\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkChild', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst childDefinition = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkChild()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and\n\t * {@link module:engine/model/schema~SchemaCompiledItemDefinition} (child-to-check definition).\n\t * The callback may return `true/false` to override `checkChild()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkChild()`'s return value.\n\t */\n\taddChildCheck( callback ) {\n\t\tthis.on( 'checkChild', ( evt, [ ctx, childDef ] ) => {\n\t\t\t// checkChild() was called with a non-registered child.\n\t\t\t// In 99% cases such check should return false, so not to overcomplicate all callbacks\n\t\t\t// don't even execute them.\n\t\t\tif ( !childDef ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst retValue = callback( ctx, childDef );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkAttribute} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow attribute if node to which it is applied\n\t * is contained within some other element (e.g. you want to disallow `bold` on `$text` within `heading1`).\n\t *\n\t * This method is a shorthand for using the {@link #event:checkAttribute} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow bold on $text inside heading1.\n\t *\t\tschema.addAttributeCheck( ( context, attributeName ) => {\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst attributeName = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkAttribute()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and attribute name.\n\t * The callback may return `true/false` to override `checkAttribute()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkAttribute()`'s return value.\n\t */\n\taddAttributeCheck( callback ) {\n\t\tthis.on( 'checkAttribute', ( evt, [ ctx, attributeName ] ) => {\n\t\t\tconst retValue = callback( ctx, attributeName );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * This method allows assigning additional metadata to the model attributes. For example,\n\t * {@link module:engine/model/schema~AttributeProperties `AttributeProperties#isFormatting` property} is\n\t * used to mark formatting attributes (like `bold` or `italic`).\n\t *\n\t *\t\t// Mark bold as a formatting attribute.\n\t *\t\tschema.setAttributeProperties( 'bold', {\n\t *\t\t\tisFormatting: true\n\t *\t\t} );\n\t *\n\t *\t\t// Override code not to be considered a formatting markup.\n\t *\t\tschema.setAttributeProperties( 'code', {\n\t *\t\t\tisFormatting: false\n\t *\t\t} );\n\t *\n\t * Properties are not limited to members defined in the\n\t * {@link module:engine/model/schema~AttributeProperties `AttributeProperties` type} and you can also use custom properties:\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\tcustomProperty: 'value'\n\t *\t\t} );\n\t *\n\t * Subsequent calls with the same attribute will extend its custom properties:\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\tone: 1\n\t *\t\t} );\n\t *\n\t *\t\tschema.setAttributeProperties( 'blockQuote', {\n\t *\t\t\ttwo: 2\n\t *\t\t} );\n\t *\n\t *\t\tconsole.log( schema.getAttributeProperties( 'blockQuote' ) );\n\t *\t\t// Logs: { one: 1, two: 2 }\n\t *\n\t * @param {String} attributeName A name of the attribute to receive the properties.\n\t * @param {module:engine/model/schema~AttributeProperties} properties A dictionary of properties.\n\t */\n\tsetAttributeProperties( attributeName, properties ) {\n\t\tthis._attributeProperties[ attributeName ] = Object.assign( this.getAttributeProperties( attributeName ), properties );\n\t}\n\n\t/**\n\t * Returns properties associated with a given model attribute. See {@link #setAttributeProperties `setAttributeProperties()`}.\n\t *\n\t * @param {String} attributeName A name of the attribute.\n\t * @returns {module:engine/model/schema~AttributeProperties}\n\t */\n\tgetAttributeProperties( attributeName ) {\n\t\treturn this._attributeProperties[ attributeName ] || {};\n\t}\n\n\t/**\n\t * Returns the lowest {@link module:engine/model/schema~Schema#isLimit limit element} containing the entire\n\t * selection/range/position or the root otherwise.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/range~Range|module:engine/model/position~Position} selectionOrRangeOrPosition\n\t * The selection/range/position to check.\n\t * @returns {module:engine/model/element~Element} The lowest limit element containing\n\t * the entire `selectionOrRangeOrPosition`.\n\t */\n\tgetLimitElement( selectionOrRangeOrPosition ) {\n\t\tlet element;\n\n\t\tif ( selectionOrRangeOrPosition instanceof Position ) {\n\t\t\telement = selectionOrRangeOrPosition.parent;\n\t\t} else {\n\t\t\tconst ranges = selectionOrRangeOrPosition instanceof Range ?\n\t\t\t\t[ selectionOrRangeOrPosition ] :\n\t\t\t\tArray.from( selectionOrRangeOrPosition.getRanges() );\n\n\t\t\t// Find the common ancestor for all selection's ranges.\n\t\t\telement = ranges\n\t\t\t\t.reduce( ( element, range ) => {\n\t\t\t\t\tconst rangeCommonAncestor = range.getCommonAncestor();\n\n\t\t\t\t\tif ( !element ) {\n\t\t\t\t\t\treturn rangeCommonAncestor;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn element.getCommonAncestor( rangeCommonAncestor, { includeSelf: true } );\n\t\t\t\t}, null );\n\t\t}\n\n\t\twhile ( !this.isLimit( element ) ) {\n\t\t\tif ( element.parent ) {\n\t\t\t\telement = element.parent;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn element;\n\t}\n\n\t/**\n\t * Checks whether the attribute is allowed in selection:\n\t *\n\t * * if the selection is not collapsed, then checks if the attribute is allowed on any of nodes in that range,\n\t * * if the selection is collapsed, then checks if on the selection position there's a text with the\n\t * specified attribute allowed.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * Selection which will be checked.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Boolean}\n\t */\n\tcheckAttributeInSelection( selection, attribute ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\t\t\tconst context = [\n\t\t\t\t...firstPosition.getAncestors(),\n\t\t\t\tnew Text( '', selection.getAttributes() )\n\t\t\t];\n\n\t\t\t// Check whether schema allows for a text with the attribute in the selection.\n\t\t\treturn this.checkAttribute( context, attribute );\n\t\t} else {\n\t\t\tconst ranges = selection.getRanges();\n\n\t\t\t// For all ranges, check nodes in them until you find a node that is allowed to have the attribute.\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tif ( this.checkAttribute( value.item, attribute ) ) {\n\t\t\t\t\t\t// If we found a node that is allowed to have the attribute, return true.\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we haven't found such node, return false.\n\t\treturn false;\n\t}\n\n\t/**\n\t * Transforms the given set of ranges into a set of ranges where the given attribute is allowed (and can be applied).\n\t *\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be validated.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Iterable.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n\t */\n\t* getValidRanges( ranges, attribute ) {\n\t\tranges = convertToMinimalFlatRanges( ranges );\n\n\t\tfor ( const range of ranges ) {\n\t\t\tyield* this._getValidRangesForRange( range, attribute );\n\t\t}\n\t}\n\n\t/**\n\t * Basing on given `position`, finds and returns a {@link module:engine/model/range~Range range} which is\n\t * nearest to that `position` and is a correct range for selection.\n\t *\n\t * The correct selection range might be collapsed when it is located in a position where the text node can be placed.\n\t * Non-collapsed range is returned when selection can be placed around element marked as an \"object\" in\n\t * the {@link module:engine/model/schema~Schema schema}.\n\t *\n\t * Direction of searching for the nearest correct selection range can be specified as:\n\t *\n\t * * `both` - searching will be performed in both ways,\n\t * * `forward` - searching will be performed only forward,\n\t * * `backward` - searching will be performed only backward.\n\t *\n\t * When valid selection range cannot be found, `null` is returned.\n\t *\n\t * @param {module:engine/model/position~Position} position Reference position where new selection range should be looked for.\n\t * @param {'both'|'forward'|'backward'} [direction='both'] Search direction.\n\t * @returns {module:engine/model/range~Range|null} Nearest selection range or `null` if one cannot be found.\n\t */\n\tgetNearestSelectionRange( position, direction = 'both' ) {\n\t\t// Return collapsed range if provided position is valid.\n\t\tif ( this.checkChild( position, '$text' ) ) {\n\t\t\treturn new Range( position );\n\t\t}\n\n\t\tlet backwardWalker, forwardWalker;\n\n\t\tif ( direction == 'both' || direction == 'backward' ) {\n\t\t\tbackwardWalker = new TreeWalker( { startPosition: position, direction: 'backward' } );\n\t\t}\n\n\t\tif ( direction == 'both' || direction == 'forward' ) {\n\t\t\tforwardWalker = new TreeWalker( { startPosition: position } );\n\t\t}\n\n\t\tfor ( const data of combineWalkers( backwardWalker, forwardWalker ) ) {\n\t\t\tconst type = ( data.walker == backwardWalker ? 'elementEnd' : 'elementStart' );\n\t\t\tconst value = data.value;\n\n\t\t\tif ( value.type == type && this.isObject( value.item ) ) {\n\t\t\t\treturn Range._createOn( value.item );\n\t\t\t}\n\n\t\t\tif ( this.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\t\treturn new Range( value.nextPosition );\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Tries to find position ancestors that allows to insert given node.\n\t * It starts searching from the given position and goes node by node to the top of the model tree\n\t * as long as {@link module:engine/model/schema~Schema#isLimit limit element},\n\t * {@link module:engine/model/schema~Schema#isObject object element} or top-most ancestor won't be reached.\n\t *\n\t * @params {module:engine/model/position~Position} position Position from searching will start.\n\t * @params {module:engine/model/node~Node|String} node Node for which allowed parent should be found or its name.\n\t * @returns {module:engine/model/element~Element|null} element Allowed parent or null if nothing was found.\n\t */\n\tfindAllowedParent( position, node ) {\n\t\tlet parent = position.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( this.checkChild( parent, node ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\t// Do not split limit elements.\n\t\t\tif ( this.isLimit( parent ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes attributes disallowed by the schema.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes that will be filtered.\n\t * @param {module:engine/model/writer~Writer} writer\n\t */\n\tremoveDisallowedAttributes( nodes, writer ) {\n\t\tfor ( const node of nodes ) {\n\t\t\t// When node is a `Text` it has no children, so just filter it out.\n\t\t\tif ( node.is( 'text' ) ) {\n\t\t\t\tremoveDisallowedAttributeFromNode( this, node, writer );\n\t\t\t}\n\t\t\t// In a case of `Element` iterates through positions between nodes inside this element\n\t\t\t// and filter out node before the current position, or position parent when position\n\t\t\t// is at start of an element. Using positions prevent from omitting merged nodes\n\t\t\t// see https://github.com/ckeditor/ckeditor5-engine/issues/1789.\n\t\t\telse {\n\t\t\t\tconst rangeInNode = Range._createIn( node );\n\t\t\t\tconst positionsInRange = rangeInNode.getPositions();\n\n\t\t\t\tfor ( const position of positionsInRange ) {\n\t\t\t\t\tconst item = position.nodeBefore || position.parent;\n\n\t\t\t\t\tremoveDisallowedAttributeFromNode( this, item, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates an instance of the schema context.\n\t *\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context\n\t * @returns {module:engine/model/schema~SchemaContext}\n\t */\n\tcreateContext( context ) {\n\t\treturn new SchemaContext( context );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_clearCache() {\n\t\tthis._compiledDefinitions = null;\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_compile() {\n\t\tconst compiledDefinitions = {};\n\t\tconst sourceRules = this._sourceDefinitions;\n\t\tconst itemNames = Object.keys( sourceRules );\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompiledDefinitions[ itemName ] = compileBaseItemRule( sourceRules[ itemName ], itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowContentOf( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowWhere( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowAttributesOf( compiledDefinitions, itemName );\n\t\t\tcompileInheritPropertiesFrom( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcleanUpAllowIn( compiledDefinitions, itemName );\n\t\t\tcleanUpAllowAttributes( compiledDefinitions, itemName );\n\t\t}\n\n\t\tthis._compiledDefinitions = compiledDefinitions;\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/schema~SchemaCompiledItemDefinition} def\n\t * @param {module:engine/model/schema~SchemaContext} context\n\t * @param {Number} contextItemIndex\n\t */\n\t_checkContextMatch( def, context, contextItemIndex = context.length - 1 ) {\n\t\tconst contextItem = context.getItem( contextItemIndex );\n\n\t\tif ( def.allowIn.includes( contextItem.name ) ) {\n\t\t\tif ( contextItemIndex == 0 ) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconst parentRule = this.getDefinition( contextItem );\n\n\t\t\t\treturn this._checkContextMatch( parentRule, context, contextItemIndex - 1 );\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Takes a flat range and an attribute name. Traverses the range recursively and deeply to find and return all ranges\n\t * inside the given range on which the attribute can be applied.\n\t *\n\t * This is a helper function for {@link ~Schema#getValidRanges}.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Range to process.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Iterable.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n\t */\n\t* _getValidRangesForRange( range, attribute ) {\n\t\tlet start = range.start;\n\t\tlet end = range.start;\n\n\t\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'element' ) ) {\n\t\t\t\tyield* this._getValidRangesForRange( Range._createIn( item ), attribute );\n\t\t\t}\n\n\t\t\tif ( !this.checkAttribute( item, attribute ) ) {\n\t\t\t\tif ( !start.isEqual( end ) ) {\n\t\t\t\t\tyield new Range( start, end );\n\t\t\t\t}\n\n\t\t\t\tstart = Position._createAfter( item );\n\t\t\t}\n\n\t\t\tend = Position._createAfter( item );\n\t\t}\n\n\t\tif ( !start.isEqual( end ) ) {\n\t\t\tyield new Range( start, end );\n\t\t}\n\t}\n}\n\nmix( Schema, ObservableMixin );\n\n/**\n * Event fired when the {@link #checkChild} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addChildCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkChild} method fires an event because it is\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkChild()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkChild( context, child )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance and `child` to a\n * {@link module:engine/model/schema~SchemaCompiledItemDefinition} instance, so you don't have to worry about\n * the various ways how `context` and `child` may be passed to `checkChild()`.\n *\n * **Note:** `childDefinition` may be `undefined` if `checkChild()` was called with a non-registered element.\n *\n * So, in order to implement a rule \"disallow `heading1` in `blockQuote`\" you can add such a listener:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing elements in specific contexts will be a far less common use case, because it's normally handled by\n * `allowIn` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `listItem` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo' ) && childDefinition.name == 'listItem' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkChild\n * @param {Array} args The `checkChild()`'s arguments.\n */\n\n/**\n * Event fired when the {@link #checkAttribute} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addAttributeCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkAttribute} method fires an event because it's\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkAttribute()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst attributeName = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkAttribute( context, attributeName )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance, so you don't have to worry about\n * the various ways how `context` may be passed to `checkAttribute()`.\n *\n * So, in order to implement a rule \"disallow `bold` in a text which is in a `heading1` you can add such a listener:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing attributes in specific contexts will be a far less common use case, because it's normally handled by\n * `allowAttributes` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `bold` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkAttribute\n * @param {Array} args The `checkAttribute()`'s arguments.\n */\n\n/**\n * A definition of a {@link module:engine/model/schema~Schema schema} item.\n *\n * You can define the following rules:\n *\n * * `allowIn` &ndash; A string or an array of strings. Defines in which other items this item will be allowed.\n * * `allowAttributes` &ndash; A string or an array of strings. Defines allowed attributes of the given item.\n * * `allowContentOf` &ndash; A string or an array of strings. Inherits \"allowed children\" from other items.\n * * `allowWhere` &ndash; A string or an array of strings. Inherits \"allowed in\" from other items.\n * * `allowAttributesOf` &ndash; A string or an array of strings. Inherits attributes from other items.\n * * `inheritTypesFrom` &ndash; A string or an array of strings. Inherits `is*` properties of other items.\n * * `inheritAllFrom` &ndash; A string. A shorthand for `allowContentOf`, `allowWhere`, `allowAttributesOf`, `inheritTypesFrom`.\n * * Additionally, you can define the following `is*` properties: `isBlock`, `isLimit`, `isObject`, `isInline`. Read about them below.\n *\n * # The is* properties\n *\n * There are 3 commonly used `is*` properties. Their role is to assign additional semantics to schema items.\n * You can define more properties but you will also need to implement support for them in the existing editor features.\n *\n * * `isBlock` &ndash; Whether this item is paragraph-like. Generally speaking, content is usually made out of blocks\n * like paragraphs, list items, images, headings, etc. All these elements are marked as blocks. A block\n * should not allow another block inside. Note: There is also the `$block` generic item which has `isBlock` set to `true`.\n * Most block type items will inherit from `$block` (through `inheritAllFrom`).\n * * `isLimit` &ndash; It can be understood as whether this element should not be split by <kbd>Enter</kbd>.\n * Examples of limit elements: `$root`, table cell, image caption, etc. In other words, all actions that happen inside\n * a limit element are limited to its content. **Note:** All objects (`isObject`) are treated as limit elements, too.\n * * `isObject` &ndash; Whether an item is \"self-contained\" and should be treated as a whole. Examples of object elements:\n * `image`, `table`, `video`, etc. **Note:** An object is also a limit, so\n * {@link module:engine/model/schema~Schema#isLimit `isLimit()`} returns `true` for object elements automatically.\n * * `isInline` &ndash; Whether an item is \"text-like\" and should be treated as an inline node. Examples of inline elements:\n * `$text`, `softBreak` (`<br>`), etc.\n *\n * # Generic items\n *\n * There are three basic generic items: `$root`, `$block` and `$text`.\n * They are defined as follows:\n *\n *\t\tthis.schema.register( '$root', {\n *\t\t\tisLimit: true\n *\t\t} );\n *\t\tthis.schema.register( '$block', {\n *\t\t\tallowIn: '$root',\n *\t\t\tisBlock: true\n *\t\t} );\n *\t\tthis.schema.register( '$text', {\n *\t\t\tallowIn: '$block',\n *\t\t\tisInline: true\n *\t\t} );\n *\n * They reflect typical editor content that is contained within one root, consists of several blocks\n * (paragraphs, lists items, headings, images) which, in turn, may contain text inside.\n *\n * By inheriting from the generic items you can define new items which will get extended by other editor features.\n * Read more about generic types in the {@glink framework/guides/deep-dive/schema Defining schema} guide.\n *\n * # Example definitions\n *\n * Allow `paragraph` in roots and block quotes:\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowIn: [ '$root', 'blockQuote' ],\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Allow `paragraph` everywhere where `$block` is allowed (i.e. in `$root`):\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Make `image` a block object, which is allowed everywhere where `$block` is.\n * Also, allow `src` and `alt` attributes in it:\n *\n *\t\tschema.register( 'image', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowAttributes: [ 'src', 'alt' ],\n *\t\t\tisBlock: true,\n *\t\t\tisObject: true\n *\t\t} );\n *\n * Make `caption` allowed in `image` and make it allow all the content of `$block`s (usually, `$text`).\n * Also, mark it as a limit element so it cannot be split:\n *\n *\t\tschema.register( 'caption', {\n *\t\t\tallowIn: 'image',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tisLimit: true\n *\t\t} );\n *\n * Make `listItem` inherit all from `$block` but also allow additional attributes:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tinheritAllFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * Which translates to:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tallowAttributesOf: '$block',\n *\t\t\tinheritTypesFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * # Tips\n *\n * * Check schema definitions of existing features to see how they are defined.\n * * If you want to publish your feature so other developers can use it, try to use\n * generic items as much as possible.\n * * Keep your model clean. Limit it to the actual data and store information in a normalized way.\n * * Remember about definining the `is*` properties. They do not affect the allowed structures, but they can\n * affect how the editor features treat your elements.\n *\n * @typedef {Object} module:engine/model/schema~SchemaItemDefinition\n */\n\n/**\n * A simplified version of {@link module:engine/model/schema~SchemaItemDefinition} after\n * compilation by the {@link module:engine/model/schema~Schema schema}.\n * Rules fed to the schema by {@link module:engine/model/schema~Schema#register}\n * and {@link module:engine/model/schema~Schema#extend} methods are defined in the\n * {@link module:engine/model/schema~SchemaItemDefinition} format.\n * Later on, they are compiled to `SchemaCompiledItemDefition` so when you use e.g.\n * the {@link module:engine/model/schema~Schema#getDefinition} method you get the compiled version.\n *\n * The compiled version contains only the following properties:\n *\n * * The `name` property,\n * * The `is*` properties,\n * * The `allowIn` array,\n * * The `allowAttributes` array.\n *\n * @typedef {Object} module:engine/model/schema~SchemaCompiledItemDefinition\n */\n\n/**\n * A schema context &mdash; a list of ancestors of a given position in the document.\n *\n * Considering such position:\n *\n *\t\t<$root>\n *\t\t\t<blockQuote>\n *\t\t\t\t<paragraph>\n *\t\t\t\t\t^\n *\t\t\t\t</paragraph>\n *\t\t\t</blockQuote>\n *\t\t</$root>\n *\n * The context of this position is its {@link module:engine/model/position~Position#getAncestors lists of ancestors}:\n *\n *\t\t[ rootElement, blockQuoteElement, paragraphElement ]\n *\n * Contexts are used in the {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`} and\n * {@link module:engine/model/schema~Schema#event:checkAttribute `Schema#checkAttribute`} events as a definition\n * of a place in the document where the check occurs. The context instances are created based on the first arguments\n * of the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`} and\n * {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} methods so when\n * using these methods you need to use {@link module:engine/model/schema~SchemaContextDefinition}s.\n */\nexport class SchemaContext {\n\t/**\n\t * Creates an instance of the context.\n\t *\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context\n\t */\n\tconstructor( context ) {\n\t\tif ( context instanceof SchemaContext ) {\n\t\t\treturn context;\n\t\t}\n\n\t\tif ( typeof context == 'string' ) {\n\t\t\tcontext = [ context ];\n\t\t} else if ( !Array.isArray( context ) ) {\n\t\t\t// `context` is item or position.\n\t\t\t// Position#getAncestors() doesn't accept any parameters but it works just fine here.\n\t\t\tcontext = context.getAncestors( { includeSelf: true } );\n\t\t}\n\n\t\tif ( context[ 0 ] && typeof context[ 0 ] != 'string' && context[ 0 ].is( 'documentFragment' ) ) {\n\t\t\tcontext.shift();\n\t\t}\n\n\t\tthis._items = context.map( mapContextItem );\n\t}\n\n\t/**\n\t * The number of items.\n\t *\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * The last item (the lowest node).\n\t *\n\t * @type {module:engine/model/schema~SchemaContextItem}\n\t */\n\tget last() {\n\t\treturn this._items[ this._items.length - 1 ];\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all context items.\n\t *\n\t * @returns {Iterable.<module:engine/model/schema~SchemaContextItem>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns a new schema context instance with an additional item.\n\t *\n\t * Item can be added as:\n\t *\n\t * \t\tconst context = new SchemaContext( [ '$root' ] );\n\t *\n\t * \t\t// An element.\n\t * \t\tconst fooElement = writer.createElement( 'fooElement' );\n\t * \t\tconst newContext = context.push( fooElement ); // [ '$root', 'fooElement' ]\n\t *\n\t * \t\t// A text node.\n\t * \t\tconst text = writer.createText( 'foobar' );\n\t * \t\tconst newContext = context.push( text ); // [ '$root', '$text' ]\n\t *\n\t * \t\t// A string (element name).\n\t * \t\tconst newContext = context.push( 'barElement' ); // [ '$root', 'barElement' ]\n\t *\n\t * **Note** {@link module:engine/model/node~Node} that is already in the model tree will be added as the only item\n\t * (without ancestors).\n\t *\n\t * @param {String|module:engine/model/node~Node|Array<String|module:engine/model/node~Node>} item An item that will be added\n\t * to the current context.\n\t * @returns {module:engine/model/schema~SchemaContext} A new schema context instance with an additional item.\n\t */\n\tpush( item ) {\n\t\tconst ctx = new SchemaContext( [ item ] );\n\n\t\tctx._items = [ ...this._items, ...ctx._items ];\n\n\t\treturn ctx;\n\t}\n\n\t/**\n\t * Gets an item on the given index.\n\t *\n\t * @returns {module:engine/model/schema~SchemaContextItem}\n\t */\n\tgetItem( index ) {\n\t\treturn this._items[ index ];\n\t}\n\n\t/**\n\t * Returns the names of items.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* getNames() {\n\t\tyield* this._items.map( item => item.name );\n\t}\n\n\t/**\n\t * Checks whether the context ends with the given nodes.\n\t *\n\t *\t\tconst ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\n\t *\n\t *\t\tctx.endsWith( '$text' ); // -> true\n\t *\t\tctx.endsWith( 'paragraph $text' ); // -> true\n\t *\t\tctx.endsWith( '$root' ); // -> false\n\t *\t\tctx.endsWith( 'paragraph' ); // -> false\n\t *\n\t * @param {String} query\n\t * @returns {Boolean}\n\t */\n\tendsWith( query ) {\n\t\treturn Array.from( this.getNames() ).join( ' ' ).endsWith( query );\n\t}\n}\n\n/**\n * The definition of a {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * Contexts can be created in multiple ways:\n *\n * * By defining a **node** – in this cases this node and all its ancestors will be used.\n * * By defining a **position** in the document – in this case all its ancestors will be used.\n * * By defining an **array of nodes** – in this case this array defines the entire context.\n * * By defining a **name of node** - in this case node will be \"mocked\". It is not recommended because context\n * will be unrealistic (e.g. attributes of these nodes are not specified). However, at times this may be the only\n * way to define the context (e.g. when checking some hypothetical situation).\n * * By defining an **array of node names** (potentially, mixed with real nodes) – The same as **name of node**\n * but it is possible to create a path.\n * * By defining a {@link module:engine/model/schema~SchemaContext} instance - in this case the same instance as provided\n * will be return.\n *\n * Examples of context definitions passed to the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`}\n * method:\n *\n *\t\t// Assuming that we have a $root > blockQuote > paragraph structure, the following code\n *\t\t// will check node 'foo' in the following context:\n *\t\t// [ rootElement, blockQuoteElement, paragraphElement ]\n *\t\tconst contextDefinition = paragraphElement;\n * \t\tconst childToCheck = 'foo';\n *\t\tschema.checkChild( contextDefinition, childToCheck );\n *\n *\t\t// Also check in [ rootElement, blockQuoteElement, paragraphElement ].\n *\t\tschema.checkChild( model.createPositionAt( paragraphElement, 0 ), 'foo' );\n *\n *\t\t// Check in [ rootElement, paragraphElement ].\n *\t\tschema.checkChild( [ rootElement, paragraphElement ], 'foo' );\n *\n *\t\t// Check only fakeParagraphElement.\n *\t\tschema.checkChild( 'paragraph', 'foo' );\n *\n *\t\t// Check in [ fakeRootElement, fakeBarElement, paragraphElement ].\n *\t\tschema.checkChild( [ '$root', 'bar', paragraphElement ], 'foo' );\n *\n * All these `checkChild()` calls will fire {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`}\n * events in which `args[ 0 ]` is an instance of the context. Therefore, you can write a listener like this:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\n *\t\t\tconsole.log( Array.from( ctx.getNames() ) );\n *\t\t} );\n *\n * Which will log the following:\n *\n *\t\t[ '$root', 'blockQuote', 'paragraph' ]\n *\t\t[ '$root', 'paragraph' ]\n *\t\t[ '$root', 'bar', 'paragraph' ]\n *\n * Note: When using the {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} method\n * you may want to check whether a text node may have an attribute. A {@link module:engine/model/text~Text} is a\n * correct way to define a context so you can do this:\n *\n *\t\tschema.checkAttribute( textNode, 'bold' );\n *\n * But sometimes you want to check whether a text at a given position might've had some attribute,\n * in which case you can create a context by mising an array of elements with a `'$text'` string:\n *\n *\t\t// Check in [ rootElement, paragraphElement, textNode ].\n *\t\tschema.checkChild( [ ...positionInParagraph.getAncestors(), '$text' ], 'bold' );\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/position~Position|module:engine/model/schema~SchemaContext|\n * String|Array.<String|module:engine/model/node~Node>} module:engine/model/schema~SchemaContextDefinition\n */\n\n/**\n * An item of the {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * It contains 3 properties:\n *\n * * `name` – the name of this item,\n * * `* getAttributeKeys()` – a generator of keys of item attributes,\n * * `getAttribute( keyName )` – a method to get attribute values.\n *\n * The context item interface is a highly simplified version of {@link module:engine/model/node~Node} and its role\n * is to expose only the information which schema checks are able to provide (which is the name of the node and\n * node's attributes).\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\t\t\tconst firstItem = ctx.getItem( 0 );\n *\n *\t\t\tconsole.log( firstItem.name ); // -> '$root'\n *\t\t\tconsole.log( firstItem.getAttribute( 'foo' ) ); // -> 'bar'\n *\t\t\tconsole.log( Array.from( firstItem.getAttributeKeys() ) ); // -> [ 'foo', 'faa' ]\n *\t\t} );\n *\n * @typedef {Object} module:engine/model/schema~SchemaContextItem\n */\n\n/**\n * A structure containing additional metadata describing the attribute.\n *\n * See {@link module:engine/model/schema~Schema#setAttributeProperties `Schema#setAttributeProperties()`} for usage examples.\n *\n * @typedef {Object} module:engine/model/schema~AttributeProperties\n * @property {Boolean} [isFormatting] Indicates that the attribute should be considered as a visual formatting, like `bold`, `italic` or\n * `fontSize` rather than semantic attribute (such as `src`, `listType`, etc.). For example, it is used by the \"Remove format\" feature.\n * @property {Boolean} [copyOnEnter] Indicates that given text attribute should be copied to the next block when enter is pressed.\n */\n\nfunction compileBaseItemRule( sourceItemRules, itemName ) {\n\tconst itemRule = {\n\t\tname: itemName,\n\n\t\tallowIn: [],\n\t\tallowContentOf: [],\n\t\tallowWhere: [],\n\n\t\tallowAttributes: [],\n\t\tallowAttributesOf: [],\n\n\t\tinheritTypesFrom: []\n\t};\n\n\tcopyTypes( sourceItemRules, itemRule );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowIn' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowContentOf' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowWhere' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributes' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributesOf' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'inheritTypesFrom' );\n\n\tmakeInheritAllWork( sourceItemRules, itemRule );\n\n\treturn itemRule;\n}\n\nfunction compileAllowContentOf( compiledDefinitions, itemName ) {\n\tfor ( const allowContentOfItemName of compiledDefinitions[ itemName ].allowContentOf ) {\n\t\t// The allowContentOf property may point to an unregistered element.\n\t\tif ( compiledDefinitions[ allowContentOfItemName ] ) {\n\t\t\tconst allowedChildren = getAllowedChildren( compiledDefinitions, allowContentOfItemName );\n\n\t\t\tallowedChildren.forEach( allowedItem => {\n\t\t\t\tallowedItem.allowIn.push( itemName );\n\t\t\t} );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowContentOf;\n}\n\nfunction compileAllowWhere( compiledDefinitions, itemName ) {\n\tfor ( const allowWhereItemName of compiledDefinitions[ itemName ].allowWhere ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowWhereItemName ];\n\n\t\t// The allowWhere property may point to an unregistered element.\n\t\tif ( inheritFrom ) {\n\t\t\tconst allowedIn = inheritFrom.allowIn;\n\n\t\t\tcompiledDefinitions[ itemName ].allowIn.push( ...allowedIn );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowWhere;\n}\n\nfunction compileAllowAttributesOf( compiledDefinitions, itemName ) {\n\tfor ( const allowAttributeOfItem of compiledDefinitions[ itemName ].allowAttributesOf ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowAttributeOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst inheritAttributes = inheritFrom.allowAttributes;\n\n\t\t\tcompiledDefinitions[ itemName ].allowAttributes.push( ...inheritAttributes );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowAttributesOf;\n}\n\nfunction compileInheritPropertiesFrom( compiledDefinitions, itemName ) {\n\tconst item = compiledDefinitions[ itemName ];\n\n\tfor ( const inheritPropertiesOfItem of item.inheritTypesFrom ) {\n\t\tconst inheritFrom = compiledDefinitions[ inheritPropertiesOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst typeNames = Object.keys( inheritFrom ).filter( name => name.startsWith( 'is' ) );\n\n\t\t\tfor ( const name of typeNames ) {\n\t\t\t\tif ( !( name in item ) ) {\n\t\t\t\t\titem[ name ] = inheritFrom[ name ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdelete item.inheritTypesFrom;\n}\n\n// Remove items which weren't registered (because it may break some checks or we'd need to complicate them).\n// Make sure allowIn doesn't contain repeated values.\nfunction cleanUpAllowIn( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\tconst existingItems = itemRule.allowIn.filter( itemToCheck => compiledDefinitions[ itemToCheck ] );\n\n\titemRule.allowIn = Array.from( new Set( existingItems ) );\n}\n\nfunction cleanUpAllowAttributes( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\titemRule.allowAttributes = Array.from( new Set( itemRule.allowAttributes ) );\n}\n\nfunction copyTypes( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst typeNames = Object.keys( sourceItemRule ).filter( name => name.startsWith( 'is' ) );\n\n\t\tfor ( const name of typeNames ) {\n\t\t\titemRule[ name ] = sourceItemRule[ name ];\n\t\t}\n\t}\n}\n\nfunction copyProperty( sourceItemRules, itemRule, propertyName ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tif ( typeof sourceItemRule[ propertyName ] == 'string' ) {\n\t\t\titemRule[ propertyName ].push( sourceItemRule[ propertyName ] );\n\t\t} else if ( Array.isArray( sourceItemRule[ propertyName ] ) ) {\n\t\t\titemRule[ propertyName ].push( ...sourceItemRule[ propertyName ] );\n\t\t}\n\t}\n}\n\nfunction makeInheritAllWork( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst inheritFrom = sourceItemRule.inheritAllFrom;\n\n\t\tif ( inheritFrom ) {\n\t\t\titemRule.allowContentOf.push( inheritFrom );\n\t\t\titemRule.allowWhere.push( inheritFrom );\n\t\t\titemRule.allowAttributesOf.push( inheritFrom );\n\t\t\titemRule.inheritTypesFrom.push( inheritFrom );\n\t\t}\n\t}\n}\n\nfunction getAllowedChildren( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\treturn getValues( compiledDefinitions ).filter( def => def.allowIn.includes( itemRule.name ) );\n}\n\nfunction getValues( obj ) {\n\treturn Object.keys( obj ).map( key => obj[ key ] );\n}\n\nfunction mapContextItem( ctxItem ) {\n\tif ( typeof ctxItem == 'string' ) {\n\t\treturn {\n\t\t\tname: ctxItem,\n\n\t\t\t* getAttributeKeys() {},\n\n\t\t\tgetAttribute() {}\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\t// '$text' means text nodes and text proxies.\n\t\t\tname: ctxItem.is( 'element' ) ? ctxItem.name : '$text',\n\n\t\t\t* getAttributeKeys() {\n\t\t\t\tyield* ctxItem.getAttributeKeys();\n\t\t\t},\n\n\t\t\tgetAttribute( key ) {\n\t\t\t\treturn ctxItem.getAttribute( key );\n\t\t\t}\n\t\t};\n\t}\n}\n\n// Generator function returning values from provided walkers, switching between them at each iteration. If only one walker\n// is provided it will return data only from that walker.\n//\n// @param {module:engine/module/treewalker~TreeWalker} [backward] Walker iterating in backward direction.\n// @param {module:engine/module/treewalker~TreeWalker} [forward] Walker iterating in forward direction.\n// @returns {Iterable.<Object>} Object returned at each iteration contains `value` and `walker` (informing which walker returned\n// given value) fields.\nfunction* combineWalkers( backward, forward ) {\n\tlet done = false;\n\n\twhile ( !done ) {\n\t\tdone = true;\n\n\t\tif ( backward ) {\n\t\t\tconst step = backward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: backward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( forward ) {\n\t\t\tconst step = forward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: forward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Takes an array of non-intersecting ranges. For each of them gets minimal flat ranges covering that range and returns\n// all those minimal flat ranges.\n//\n// @param {Array.<module:engine/model/range~Range>} ranges Ranges to process.\n// @returns {Iterable.<module:engine/model/range~Range>} Minimal flat ranges of given `ranges`.\nfunction* convertToMinimalFlatRanges( ranges ) {\n\tfor ( const range of ranges ) {\n\t\tyield* range.getMinimalFlatRanges();\n\t}\n}\n\nfunction removeDisallowedAttributeFromNode( schema, node, writer ) {\n\tfor ( const attribute of node.getAttributeKeys() ) {\n\t\tif ( !schema.checkAttribute( node, attribute ) ) {\n\t\t\twriter.removeAttribute( attribute, node );\n\t\t}\n\t}\n}\n"]}]}