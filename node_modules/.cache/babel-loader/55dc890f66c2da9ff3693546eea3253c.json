{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-media-embed/src/mediaembed.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-media-embed/src/mediaembed.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIG1lZGlhLWVtYmVkL21lZGlhZW1iZWQKICovCmltcG9ydCBNZWRpYUVtYmVkRWRpdGluZyBmcm9tICcuL21lZGlhZW1iZWRlZGl0aW5nJzsKaW1wb3J0IEF1dG9NZWRpYUVtYmVkIGZyb20gJy4vYXV0b21lZGlhZW1iZWQnOwppbXBvcnQgTWVkaWFFbWJlZFVJIGZyb20gJy4vbWVkaWFlbWJlZHVpJzsKaW1wb3J0IFBsdWdpbiBmcm9tICdAY2tlZGl0b3IvY2tlZGl0b3I1LWNvcmUvc3JjL3BsdWdpbic7CmltcG9ydCBXaWRnZXQgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS13aWRnZXQvc3JjL3dpZGdldCc7CmltcG9ydCAnLi4vdGhlbWUvbWVkaWFlbWJlZC5jc3MnOwovKioKICogVGhlIG1lZGlhIGVtYmVkIHBsdWdpbi4KICoKICogRm9yIGEgZGV0YWlsZWQgb3ZlcnZpZXcsIGNoZWNrIHRoZSB7QGdsaW5rIGZlYXR1cmVzL21lZGlhLWVtYmVkIE1lZGlhIEVtYmVkIGZlYXR1cmUgZG9jdW1lbnRhdGlvbn0uCiAqCiAqIFRoaXMgaXMgYSAiZ2x1ZSIgcGx1Z2luIHdoaWNoIGxvYWRzIHRoZSBmb2xsb3dpbmcgcGx1Z2luczoKICoKICogKiBUaGUge0BsaW5rIG1vZHVsZTptZWRpYS1lbWJlZC9tZWRpYWVtYmVkZWRpdGluZ35NZWRpYUVtYmVkRWRpdGluZyBtZWRpYSBlbWJlZCBlZGl0aW5nIGZlYXR1cmV9LAogKiAqIFRoZSB7QGxpbmsgbW9kdWxlOm1lZGlhLWVtYmVkL21lZGlhZW1iZWR1aX5NZWRpYUVtYmVkVUkgbWVkaWEgZW1iZWQgVUkgZmVhdHVyZX0gYW5kCiAqICogVGhlIHtAbGluayBtb2R1bGU6bWVkaWEtZW1iZWQvYXV0b21lZGlhZW1iZWR+QXV0b01lZGlhRW1iZWQgYXV0by1tZWRpYSBlbWJlZCBmZWF0dXJlfS4KICoKICogQGV4dGVuZHMgbW9kdWxlOmNvcmUvcGx1Z2luflBsdWdpbgogKi8KCmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhRW1iZWQgZXh0ZW5kcyBQbHVnaW4gewogIC8qKgogICAqIEBpbmhlcml0RG9jCiAgICovCiAgc3RhdGljIGdldCByZXF1aXJlcygpIHsKICAgIHJldHVybiBbTWVkaWFFbWJlZEVkaXRpbmcsIE1lZGlhRW1iZWRVSSwgQXV0b01lZGlhRW1iZWQsIFdpZGdldF07CiAgfQogIC8qKgogICAqIEBpbmhlcml0RG9jCiAgICovCgoKICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7CiAgICByZXR1cm4gJ01lZGlhRW1iZWQnOwogIH0KCn0KLyoqCiAqIFRoZSBtZWRpYSBlbWJlZCBwcm92aWRlciBkZXNjcmlwdG9yLiBVc2VkIGluCiAqIHtAbGluayBtb2R1bGU6bWVkaWEtZW1iZWQvbWVkaWFlbWJlZH5NZWRpYUVtYmVkQ29uZmlnI3Byb3ZpZGVycyBgY29uZmlnLm1lZGlhRW1iZWQucHJvdmlkZXJzYH0gYW5kCiAqIHtAbGluayBtb2R1bGU6bWVkaWEtZW1iZWQvbWVkaWFlbWJlZH5NZWRpYUVtYmVkQ29uZmlnI2V4dHJhUHJvdmlkZXJzIGBjb25maWcubWVkaWFFbWJlZC5leHRyYVByb3ZpZGVyc2B9LgogKgogKiBTZWUge0BsaW5rIG1vZHVsZTptZWRpYS1lbWJlZC9tZWRpYWVtYmVkfk1lZGlhRW1iZWRDb25maWd9IHRvIGxlYXJuIG1vcmUuCiAqCiAqCQl7CiAqCQkJbmFtZTogJ2V4YW1wbGUnLAogKgogKgkJCS8vIFRoZSBmb2xsb3dpbmcgUmVnRXhwIG1hdGNoZXMgaHR0cHM6Ly93d3cuZXhhbXBsZS5jb20vbWVkaWEve21lZGlhIGlkfSwKICoJCQkvLyAoZWl0aGVyIHdpdGggImh0dHAocyk6Ly8iIGFuZCAid3d3IiBvciB3aXRob3V0KSwgc28gdGhlIHZhbGlkIFVSTHMgYXJlOgogKgkJCS8vCiAqCQkJLy8gKiBodHRwczovL3d3dy5leGFtcGxlLmNvbS9tZWRpYS97bWVkaWEgaWR9LAogKgkJCS8vICogaHR0cDovL3d3dy5leGFtcGxlLmNvbS9tZWRpYS97bWVkaWEgaWR9LAogKgkJCS8vICogd3d3LmV4YW1wbGUuY29tL21lZGlhL3ttZWRpYSBpZH0sCiAqCQkJLy8gKiBleGFtcGxlLmNvbS9tZWRpYS97bWVkaWEgaWR9CiAqCQkJdXJsOiAvXmV4YW1wbGVcLmNvbVwvbWVkaWFcLyhcdyspLywKICoKICoJCQkvLyBUaGUgcmVuZGVyaW5nIGZ1bmN0aW9uIG9mIHRoZSBwcm92aWRlci4KICoJCQkvLyBVc2VkIHRvIHJlcHJlc2VudCB0aGUgbWVkaWEgd2hlbiBlZGl0aW5nIHRoZSBjb250ZW50IChpLmUuIGluIHRoZSB2aWV3KQogKgkJCS8vIGFuZCBhbHNvIGluIHRoZSBkYXRhIG91dHB1dCBvZiB0aGUgZWRpdG9yIGlmIHNlbWFudGljIGRhdGEgb3V0cHV0IGlzIGRpc2FibGVkLgogKgkJCWh0bWw6IG1hdGNoID0+IGBUaGUgSFRNTCByZXByZXNlbnRpbmcgdGhlIG1lZGlhIHdpdGggSUQ9JHsgbWF0Y2hbIDEgXSB9LmAKICoJCX0KICoKICogWW91IGNhbiBhbGxvdyBhbnkgc29ydCBvZiBtZWRpYSBpbiB0aGUgZWRpdG9yIHVzaW5nIHRoZSAiYWxsb3figJNhbGwiIGBSZWdFeHBgLgogKiBCdXQgbWluZCB0aGF0LCBzaW5jZSBVUkxzIGFyZSBwcm9jZXNzZWQgaW4gdGhlIG9yZGVyIG9mIGNvbmZpZ3VyYXRpb24sIGlmIG9uZSBvZiB0aGUgcHJldmlvdXMKICogYFJlZ0V4cHNgIG1hdGNoZXMgdGhlIFVSTCwgaXQgd2lsbCBoYXZlIGEgcHJlY2VkZW5jZSBvdmVyIHRoaXMgb25lLgogKgogKgkJewogKgkJCW5hbWU6ICdhbGxvdy1hbGwnLAogKgkJCXVybDogL14uKy8KICoJCX0KICoKICogVG8gaW1wbGVtZW50IHJlc3BvbnNpdmUgbWVkaWEsIHlvdSBjYW4gdXNlIHRoZSBmb2xsb3dpbmcgSFRNTCBzdHJ1Y3R1cmU6CiAqCiAqCQl7CiAqCQkJLi4uCiAqCQkJaHRtbDogbWF0Y2ggPT4KICoJCQkJJzxkaXYgc3R5bGU9InBvc2l0aW9uOnJlbGF0aXZlOyBwYWRkaW5nLWJvdHRvbToxMDAlOyBoZWlnaHQ6MCI+JyArCiAqCQkJCQknPGlmcmFtZSBzcmM9Ii4uLiIgZnJhbWVib3JkZXI9IjAiICcgKwogKgkJCQkJCSdzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7IHdpZHRoOjEwMCU7IGhlaWdodDoxMDAlOyB0b3A6MDsgbGVmdDowIj4nICsKICoJCQkJCSc8L2lmcmFtZT4nICsKICoJCQkJJzwvZGl2PicKICoJCX0KICoKICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOm1lZGlhLWVtYmVkL21lZGlhZW1iZWR+TWVkaWFFbWJlZFByb3ZpZGVyCiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBwcm92aWRlci4gVXNlZCBlLmcuIHdoZW4KICoge0BsaW5rIG1vZHVsZTptZWRpYS1lbWJlZC9tZWRpYWVtYmVkfk1lZGlhRW1iZWRDb25maWcjcmVtb3ZlUHJvdmlkZXJzIHJlbW92aW5nIHByb3ZpZGVyc30uCiAqIEBwcm9wZXJ0eSB7UmVnRXhwfEFycmF5LjxSZWdFeHA+fSB1cmwgVGhlIGBSZWdFeHBgIG9iamVjdCAob3IgYXJyYXkgb2Ygb2JqZWN0cykgZGVmaW5pbmcgdGhlIFVSTCBvZiB0aGUgbWVkaWEuCiAqIElmIGFueSBVUkwgbWF0Y2hlcyB0aGUgYFJlZ0V4cGAsIGl0IGJlY29tZXMgdGhlIG1lZGlhIGluIHRoZSBlZGl0b3IgbW9kZWwsIGFzIGRlZmluZWQgYnkgdGhlIHByb3ZpZGVyLiBUaGUgcmVzdWx0CiAqIG9mIG1hdGNoaW5nIChvdXRwdXQgb2YgYFN0cmluZy5wcm90b3R5cGUubWF0Y2goKWApIGlzIHBhc3NlZCB0byB0aGUgYGh0bWxgIHJlbmRlcmluZyBmdW5jdGlvbiBvZiB0aGUgbWVkaWEuCiAqCiAqICoqTm90ZToqKiBZb3UgZG8gbm90IG5lZWQgdG8gaW5jbHVkZSB0aGUgcHJvdG9jb2wgKGBodHRwOi8vYCwgYGh0dHBzOi8vYCkgYW5kIGB3d3dgIHN1YmRvbWFpbiBpbiB5b3VyIGBSZWdFeHBzYCwKICogdGhleSBhcmUgc3RyaXBwZWQgZnJvbSB0aGUgVVJMcyBiZWZvcmUgbWF0Y2hpbmcgYW55d2F5LgogKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbaHRtbF0gKG9wdGlvbmFsKSBUaGUgcmVuZGVyaW5nIGZ1bmN0aW9uIG9mIHRoZSBtZWRpYS4gVGhlIGZ1bmN0aW9uIHJlY2VpdmVzIHRoZSBlbnRpcmUgbWF0Y2hpbmcKICogYXJyYXkgZnJvbSB0aGUgY29ycmVzcG9uZGluZyBgdXJsYCBgUmVnRXhwYCBhcyBhbiBhcmd1bWVudCwgYWxsb3dpbmcgcmVuZGVyaW5nIGEgZGVkaWNhdGVkCiAqIHByZXZpZXcgb2YgdGhlIG1lZGlhIGlkZW50aWZpZWQgYnkgYSBjZXJ0YWluIElEIG9yIGEgaGFzaC4gV2hlbiBub3QgZGVmaW5lZCwgdGhlIG1lZGlhIGVtYmVkIGZlYXR1cmUKICogd2lsbCB1c2UgYSBnZW5lcmljIG1lZGlhIHJlcHJlc2VudGF0aW9uIGluIHRoZSB2aWV3IGFuZCBvdXRwdXQgZGF0YS4KICogTm90ZSB0aGF0IHdoZW4KICoge0BsaW5rIG1vZHVsZTptZWRpYS1lbWJlZC9tZWRpYWVtYmVkfk1lZGlhRW1iZWRDb25maWcjcHJldmlld3NJbkRhdGEgYGNvbmZpZy5tZWRpYUVtYmVkLnByZXZpZXdzSW5EYXRhYH0KICogaXMgYHRydWVgLCB0aGUgcmVuZGVyaW5nIGZ1bmN0aW9uICoqd2lsbCBhbHdheXMqKiBiZSB1c2VkIGZvciB0aGUgbWVkaWEgaW4gdGhlIGVkaXRvciBkYXRhIG91dHB1dC4KICovCgovKioKICogVGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIHtAbGluayBtb2R1bGU6bWVkaWEtZW1iZWQvbWVkaWFlbWJlZH5NZWRpYUVtYmVkfSBmZWF0dXJlLgogKgogKiBSZWFkIG1vcmUgaW4ge0BsaW5rIG1vZHVsZTptZWRpYS1lbWJlZC9tZWRpYWVtYmVkfk1lZGlhRW1iZWRDb25maWd9LgogKgogKiBAbWVtYmVyIHttb2R1bGU6bWVkaWEtZW1iZWQvbWVkaWFlbWJlZH5NZWRpYUVtYmVkQ29uZmlnfSBtb2R1bGU6Y29yZS9lZGl0b3IvZWRpdG9yY29uZmlnfkVkaXRvckNvbmZpZyNtZWRpYUVtYmVkCiAqLwoKLyoqCiAqIFRoZSBjb25maWd1cmF0aW9uIG9mIHRoZSBtZWRpYSBlbWJlZCBmZWF0dXJlcy4KICoKICogUmVhZCBtb3JlIGFib3V0IHtAZ2xpbmsgZmVhdHVyZXMvbWVkaWEtZW1iZWQjY29uZmlndXJhdGlvbiBjb25maWd1cmluZyB0aGUgbWVkaWEgZW1iZWQgZmVhdHVyZX0uCiAqCiAqCQlDbGFzc2ljRWRpdG9yCiAqCQkJLmNyZWF0ZSggZWRpdG9yRWxlbWVudCwgewogKiAJCQkJbWVkaWFFbWJlZDogLi4uIC8vIE1lZGlhIGVtYmVkIGZlYXR1cmUgb3B0aW9ucy4KICoJCQl9ICkKICoJCQkudGhlbiggLi4uICkKICoJCQkuY2F0Y2goIC4uLiApOwogKgogKiBTZWUge0BsaW5rIG1vZHVsZTpjb3JlL2VkaXRvci9lZGl0b3Jjb25maWd+RWRpdG9yQ29uZmlnIGFsbCBlZGl0b3Igb3B0aW9uc30uCiAqCiAqIEBpbnRlcmZhY2UgTWVkaWFFbWJlZENvbmZpZwogKi8KCi8qKgogKiBUaGUgZGVmYXVsdCBtZWRpYSBwcm92aWRlcnMgc3VwcG9ydGVkIGJ5IHRoZSBlZGl0b3IuCiAqCiAqIFRoZSBuYW1lcyBvZiBwcm92aWRlcnMgd2l0aCByZW5kZXJpbmcgZnVuY3Rpb25zIChwcmV2aWV3cyk6CiAqCiAqICogImRhaWx5bW90aW9uIiwKICogKiAic3BvdGlmeSIsCiAqICogInlvdXR1YmUiLAogKiAqICJ2aW1lbyIKICoKICogVGhlIG5hbWVzIG9mIHByb3ZpZGVycyB3aXRob3V0IHJlbmRlcmluZyBmdW5jdGlvbnM6CiAqCiAqICogImluc3RhZ3JhbSIsCiAqICogInR3aXR0ZXIiLAogKiAqICJnb29nbGVNYXBzIiwKICogKiAiZmxpY2tyIiwKICogKiAiZmFjZWJvb2siCiAqCiAqIFNlZSB0aGUge0BsaW5rIG1vZHVsZTptZWRpYS1lbWJlZC9tZWRpYWVtYmVkfk1lZGlhRW1iZWRQcm92aWRlciBwcm92aWRlciBzeW50YXh9IHRvIGxlYXJuIG1vcmUgYWJvdXQKICogZGlmZmVyZW50IGtpbmRzIG9mIG1lZGlhIGFuZCBtZWRpYSBwcm92aWRlcnMuCiAqCiAqICoqTm90ZSoqOiBUaGUgZGVmYXVsdCBtZWRpYSBwcm92aWRlciBjb25maWd1cmF0aW9uIG1heSBub3Qgc3VwcG9ydCBhbGwgcG9zc2libGUgbWVkaWEgVVJMcywKICogb25seSB0aGUgbW9zdCBjb21tb24gYXJlIGluY2x1ZGVkLgogKgogKiBNZWRpYSB3aXRob3V0IHJlbmRlcmluZyBmdW5jdGlvbnMgYXJlIGFsd2F5cyByZXByZXNlbnRlZCBpbiB0aGUgZGF0YSB1c2luZyB0aGUgInNlbWFudGljIiBtYXJrdXAuIFNlZQogKiB7QGxpbmsgbW9kdWxlOm1lZGlhLWVtYmVkL21lZGlhZW1iZWR+TWVkaWFFbWJlZENvbmZpZyNwcmV2aWV3c0luRGF0YSBgY29uZmlnLm1lZGlhRW1iZWQucHJldmlld3NJbkRhdGFgfSB0bwogKiBsZWFybiBtb3JlIGFib3V0IHBvc3NpYmxlIGRhdGEgb3V0cHV0cy4KICoKICogVGhlIHByaW9yaXR5IG9mIG1lZGlhIHByb3ZpZGVycyBjb3JyZXNwb25kcyB0byB0aGUgb3JkZXIgb2YgY29uZmlndXJhdGlvbi4gVGhlIGZpcnN0IHByb3ZpZGVyCiAqIHRvIG1hdGNoIHRoZSBVUkwgaXMgYWx3YXlzIHVzZWQsIGV2ZW4gaWYgdGhlcmUgYXJlIG90aGVyIHByb3ZpZGVycyB0aGF0IHN1cHBvcnQgYSBwYXJ0aWN1bGFyIFVSTC4KICogVGhlIFVSTCBpcyBuZXZlciBtYXRjaGVkIGFnYWluc3QgdGhlIHJlbWFpbmluZyBwcm92aWRlcnMuCiAqCiAqIFRvIGRpc2NhcmQgKiphbGwqKiBkZWZhdWx0IG1lZGlhIHByb3ZpZGVycywgc2ltcGx5IG92ZXJyaWRlIHRoaXMgY29uZmlndXJhdGlvbiB3aXRoIHlvdXIgb3duCiAqIHtAbGluayBtb2R1bGU6bWVkaWEtZW1iZWQvbWVkaWFlbWJlZH5NZWRpYUVtYmVkUHJvdmlkZXIgZGVmaW5pdGlvbnN9OgogKgogKgkJQ2xhc3NpY0VkaXRvcgogKgkJCS5jcmVhdGUoIGVkaXRvckVsZW1lbnQsIHsKICoJCQkJcGx1Z2luczogWyBNZWRpYUVtYmVkLCAuLi4gXSwKICoJCQkJbWVkaWFFbWJlZDogewogKgkJCQkJcHJvdmlkZXJzOiBbCiAqCQkJCQkJewogKgkJCQkJCQkgbmFtZTogJ215UHJvdmlkZXInLAogKgkJCQkJCQkgdXJsOiAvXmV4YW1wbGVcLmNvbVwvbWVkaWFcLyhcdyspLywKICoJCQkJCQkJIGh0bWw6IG1hdGNoID0+ICcuLi4nCiAqCQkJCQkJfSwKICoJCQkJCQkuLi4KICogCQkJCQldCiAqCQkJCX0KICoJCQl9ICkKICoJCQkudGhlbiggLi4uICkKICoJCQkuY2F0Y2goIC4uLiApOwogKgogKiBZb3UgY2FuIHRha2UgaW5zcGlyYXRpb24gZnJvbSB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIG9mIHRoaXMgZmVhdHVyZSB3aGljaCB5b3UgY2FuIGZpbmQgaW46CiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ja2VkaXRvci9ja2VkaXRvcjUtbWVkaWEtZW1iZWQvYmxvYi9tYXN0ZXIvc3JjL21lZGlhZW1iZWRlZGl0aW5nLmpzCiAqCiAqIFRvICoqZXh0ZW5kKiogdGhlIGxpc3Qgb2YgZGVmYXVsdCBwcm92aWRlcnMsIHVzZQogKiB7QGxpbmsgbW9kdWxlOm1lZGlhLWVtYmVkL21lZGlhZW1iZWR+TWVkaWFFbWJlZENvbmZpZyNleHRyYVByb3ZpZGVycyBgY29uZmlnLm1lZGlhRW1iZWQuZXh0cmFQcm92aWRlcnNgfS4KICoKICogVG8gKipyZW1vdmUqKiBjZXJ0YWluIHByb3ZpZGVycywgdXNlCiAqIHtAbGluayBtb2R1bGU6bWVkaWEtZW1iZWQvbWVkaWFlbWJlZH5NZWRpYUVtYmVkQ29uZmlnI3JlbW92ZVByb3ZpZGVycyBgY29uZmlnLm1lZGlhRW1iZWQucmVtb3ZlUHJvdmlkZXJzYH0uCiAqCiAqIEBtZW1iZXIge0FycmF5Ljxtb2R1bGU6bWVkaWEtZW1iZWQvbWVkaWFlbWJlZH5NZWRpYUVtYmVkUHJvdmlkZXI+fSBtb2R1bGU6bWVkaWEtZW1iZWQvbWVkaWFlbWJlZH5NZWRpYUVtYmVkQ29uZmlnI3Byb3ZpZGVycwogKi8KCi8qKgogKiBUaGUgYWRkaXRpb25hbCBtZWRpYSBwcm92aWRlcnMgc3VwcG9ydGVkIGJ5IHRoZSBlZGl0b3IuIFRoaXMgY29uZmlndXJhdGlvbiBoZWxwcyBleHRlbmQgdGhlIGRlZmF1bHQKICoge0BsaW5rIG1vZHVsZTptZWRpYS1lbWJlZC9tZWRpYWVtYmVkfk1lZGlhRW1iZWRDb25maWcjcHJvdmlkZXJzfS4KICoKICoJCUNsYXNzaWNFZGl0b3IKICoJCQkuY3JlYXRlKCBlZGl0b3JFbGVtZW50LCB7CiAqCQkJCXBsdWdpbnM6IFsgTWVkaWFFbWJlZCwgLi4uIF0sCiAqCQkJCW1lZGlhRW1iZWQ6IHsKICoJCQkJCWV4dHJhUHJvdmlkZXJzOiBbCiAqCQkJCQkJewogKgkJCQkJCQkgbmFtZTogJ2V4dHJhUHJvdmlkZXInLAogKgkJCQkJCQkgdXJsOiAvXmV4YW1wbGVcLmNvbVwvbWVkaWFcLyhcdyspLywKICoJCQkJCQkJIGh0bWw6IG1hdGNoID0+ICcuLi4nCiAqCQkJCQkJfSwKICoJCQkJCQkuLi4KICogCQkJCQldCiAqCQkJCX0KICoJCQl9ICkKICoJCQkudGhlbiggLi4uICkKICoJCQkuY2F0Y2goIC4uLiApOwogKgogKiBTZWUgdGhlIHtAbGluayBtb2R1bGU6bWVkaWEtZW1iZWQvbWVkaWFlbWJlZH5NZWRpYUVtYmVkUHJvdmlkZXIgcHJvdmlkZXIgc3ludGF4fSB0byBsZWFybiBtb3JlLgogKgogKiBAbWVtYmVyIHtBcnJheS48bW9kdWxlOm1lZGlhLWVtYmVkL21lZGlhZW1iZWR+TWVkaWFFbWJlZFByb3ZpZGVyPn0gbW9kdWxlOm1lZGlhLWVtYmVkL21lZGlhZW1iZWR+TWVkaWFFbWJlZENvbmZpZyNleHRyYVByb3ZpZGVycwogKi8KCi8qKgogKiBUaGUgbGlzdCBvZiBtZWRpYSBwcm92aWRlcnMgdGhhdCBzaG91bGQgbm90IGJlIHVzZWQgZGVzcGl0ZSBiZWluZyBhdmFpbGFibGUgaW4KICoge0BsaW5rIG1vZHVsZTptZWRpYS1lbWJlZC9tZWRpYWVtYmVkfk1lZGlhRW1iZWRDb25maWcjcHJvdmlkZXJzIGBjb25maWcubWVkaWFFbWJlZC5wcm92aWRlcnNgfSBhbmQKICoge0BsaW5rIG1vZHVsZTptZWRpYS1lbWJlZC9tZWRpYWVtYmVkfk1lZGlhRW1iZWRDb25maWcjZXh0cmFQcm92aWRlcnMgYGNvbmZpZy5tZWRpYUVtYmVkLmV4dHJhUHJvdmlkZXJzYH0KICoKICoJCW1lZGlhRW1iZWQ6IHsKICoJCQlyZW1vdmVQcm92aWRlcnM6IFsgJ3lvdXR1YmUnLCAndHdpdHRlcicgXQogKgkJfQogKgogKiBAbWVtYmVyIHtBcnJheS48U3RyaW5nPn0gbW9kdWxlOm1lZGlhLWVtYmVkL21lZGlhZW1iZWR+TWVkaWFFbWJlZENvbmZpZyNyZW1vdmVQcm92aWRlcnMKICovCgovKioKICogQ29udHJvbHMgdGhlIGRhdGEgZm9ybWF0IHByb2R1Y2VkIGJ5IHRoZSBmZWF0dXJlLgogKgogKiBXaGVuIGBmYWxzZWAgKGRlZmF1bHQpLCB0aGUgZmVhdHVyZSBwcm9kdWNlcyAic2VtYW50aWMiIGRhdGEsIGkuZS4gaXQgZG9lcyBub3QgaW5jbHVkZSB0aGUgcHJldmlldyBvZgogKiB0aGUgbWVkaWEsIGp1c3QgdGhlIGA8b2VtYmVkPmAgdGFnIHdpdGggdGhlIGB1cmxgIGF0dHJpYnV0ZToKICoKICoJCTxmaWd1cmUgY2xhc3M9Im1lZGlhIj4KICoJCQk8b2VtYmVkIHVybD0iaHR0cHM6Ly91cmwiPjwvb2VtYmVkPgogKgkJPC9maWd1cmU+CiAqCiAqIFdoZW4gYHRydWVgLCB0aGUgbWVkaWEgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIG91dHB1dCBpbiB0aGUgc2FtZSB3YXkgaXQgbG9va3MgaW4gdGhlIGVkaXRvciwKICogaS5lLiB0aGUgbWVkaWEgcHJldmlldyBpcyBzYXZlZCB0byB0aGUgZGF0YWJhc2U6CiAqCiAqCQk8ZmlndXJlIGNsYXNzPSJtZWRpYSI+CiAqCQkJPGRpdiBkYXRhLW9lbWJlZC11cmw9Imh0dHBzOi8vdXJsIj4KICoJCQkJPGlmcmFtZSBzcmM9Imh0dHBzOi8vcHJldmlldyI+PC9pZnJhbWU+CiAqCQkJPC9kaXY+CiAqCQk8L2ZpZ3VyZT4KICoKICogKipOb3RlOioqIE1lZGlhIHdpdGhvdXQgcHJldmlldyBhcmUgYWx3YXlzIHJlcHJlc2VudGVkIGluIHRoZSBkYXRhIHVzaW5nIHRoZSAic2VtYW50aWMiIG1hcmt1cAogKiByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiB0aGUgYHByZXZpZXdzSW5EYXRhYC4gTGVhcm4gbW9yZSBhYm91dCBkaWZmZXJlbnQga2luZHMgb2YgbWVkaWEKICogaW4gdGhlIHtAbGluayBtb2R1bGU6bWVkaWEtZW1iZWQvbWVkaWFlbWJlZH5NZWRpYUVtYmVkQ29uZmlnI3Byb3ZpZGVycyBgY29uZmlnLm1lZGlhRW1iZWQucHJvdmlkZXJzYH0KICogY29uZmlndXJhdGlvbiBkZXNjcmlwdGlvbi4KICoKICogQG1lbWJlciB7Qm9vbGVhbn0gW21vZHVsZTptZWRpYS1lbWJlZC9tZWRpYWVtYmVkfk1lZGlhRW1iZWRDb25maWcjcHJldmlld3NJbkRhdGE9ZmFsc2VdCiAqLw=="},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-media-embed/src/mediaembed.js"],"names":["MediaEmbedEditing","AutoMediaEmbed","MediaEmbedUI","Plugin","Widget","MediaEmbed","requires","pluginName"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,qCAAnB;AACA,OAAOC,MAAP,MAAmB,uCAAnB;AAEA,OAAO,yBAAP;AAEA;;;;;;;;;;;;;;AAaA,eAAe,MAAMC,UAAN,SAAyBF,MAAzB,CAAgC;AAC9C;;;AAGA,aAAWG,QAAX,GAAsB;AACrB,WAAO,CAAEN,iBAAF,EAAqBE,YAArB,EAAmCD,cAAnC,EAAmDG,MAAnD,CAAP;AACA;AAED;;;;;AAGA,aAAWG,UAAX,GAAwB;AACvB,WAAO,YAAP;AACA;;AAb6C;AAgB/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;AAYA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module media-embed/mediaembed\n */\n\nimport MediaEmbedEditing from './mediaembedediting';\nimport AutoMediaEmbed from './automediaembed';\nimport MediaEmbedUI from './mediaembedui';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Widget from '@ckeditor/ckeditor5-widget/src/widget';\n\nimport '../theme/mediaembed.css';\n\n/**\n * The media embed plugin.\n *\n * For a detailed overview, check the {@glink features/media-embed Media Embed feature documentation}.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n *\n * * The {@link module:media-embed/mediaembedediting~MediaEmbedEditing media embed editing feature},\n * * The {@link module:media-embed/mediaembedui~MediaEmbedUI media embed UI feature} and\n * * The {@link module:media-embed/automediaembed~AutoMediaEmbed auto-media embed feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class MediaEmbed extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ MediaEmbedEditing, MediaEmbedUI, AutoMediaEmbed, Widget ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'MediaEmbed';\n\t}\n}\n\n/**\n * The media embed provider descriptor. Used in\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#providers `config.mediaEmbed.providers`} and\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#extraProviders `config.mediaEmbed.extraProviders`}.\n *\n * See {@link module:media-embed/mediaembed~MediaEmbedConfig} to learn more.\n *\n *\t\t{\n *\t\t\tname: 'example',\n *\n *\t\t\t// The following RegExp matches https://www.example.com/media/{media id},\n *\t\t\t// (either with \"http(s)://\" and \"www\" or without), so the valid URLs are:\n *\t\t\t//\n *\t\t\t// * https://www.example.com/media/{media id},\n *\t\t\t// * http://www.example.com/media/{media id},\n *\t\t\t// * www.example.com/media/{media id},\n *\t\t\t// * example.com/media/{media id}\n *\t\t\turl: /^example\\.com\\/media\\/(\\w+)/,\n *\n *\t\t\t// The rendering function of the provider.\n *\t\t\t// Used to represent the media when editing the content (i.e. in the view)\n *\t\t\t// and also in the data output of the editor if semantic data output is disabled.\n *\t\t\thtml: match => `The HTML representing the media with ID=${ match[ 1 ] }.`\n *\t\t}\n *\n * You can allow any sort of media in the editor using the \"allow–all\" `RegExp`.\n * But mind that, since URLs are processed in the order of configuration, if one of the previous\n * `RegExps` matches the URL, it will have a precedence over this one.\n *\n *\t\t{\n *\t\t\tname: 'allow-all',\n *\t\t\turl: /^.+/\n *\t\t}\n *\n * To implement responsive media, you can use the following HTML structure:\n *\n *\t\t{\n *\t\t\t...\n *\t\t\thtml: match =>\n *\t\t\t\t'<div style=\"position:relative; padding-bottom:100%; height:0\">' +\n *\t\t\t\t\t'<iframe src=\"...\" frameborder=\"0\" ' +\n *\t\t\t\t\t\t'style=\"position:absolute; width:100%; height:100%; top:0; left:0\">' +\n *\t\t\t\t\t'</iframe>' +\n *\t\t\t\t'</div>'\n *\t\t}\n *\n * @typedef {Object} module:media-embed/mediaembed~MediaEmbedProvider\n * @property {String} name The name of the provider. Used e.g. when\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#removeProviders removing providers}.\n * @property {RegExp|Array.<RegExp>} url The `RegExp` object (or array of objects) defining the URL of the media.\n * If any URL matches the `RegExp`, it becomes the media in the editor model, as defined by the provider. The result\n * of matching (output of `String.prototype.match()`) is passed to the `html` rendering function of the media.\n *\n * **Note:** You do not need to include the protocol (`http://`, `https://`) and `www` subdomain in your `RegExps`,\n * they are stripped from the URLs before matching anyway.\n * @property {Function} [html] (optional) The rendering function of the media. The function receives the entire matching\n * array from the corresponding `url` `RegExp` as an argument, allowing rendering a dedicated\n * preview of the media identified by a certain ID or a hash. When not defined, the media embed feature\n * will use a generic media representation in the view and output data.\n * Note that when\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#previewsInData `config.mediaEmbed.previewsInData`}\n * is `true`, the rendering function **will always** be used for the media in the editor data output.\n */\n\n/**\n * The configuration of the {@link module:media-embed/mediaembed~MediaEmbed} feature.\n *\n * Read more in {@link module:media-embed/mediaembed~MediaEmbedConfig}.\n *\n * @member {module:media-embed/mediaembed~MediaEmbedConfig} module:core/editor/editorconfig~EditorConfig#mediaEmbed\n */\n\n/**\n * The configuration of the media embed features.\n *\n * Read more about {@glink features/media-embed#configuration configuring the media embed feature}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\tmediaEmbed: ... // Media embed feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface MediaEmbedConfig\n */\n\n/**\n * The default media providers supported by the editor.\n *\n * The names of providers with rendering functions (previews):\n *\n * * \"dailymotion\",\n * * \"spotify\",\n * * \"youtube\",\n * * \"vimeo\"\n *\n * The names of providers without rendering functions:\n *\n * * \"instagram\",\n * * \"twitter\",\n * * \"googleMaps\",\n * * \"flickr\",\n * * \"facebook\"\n *\n * See the {@link module:media-embed/mediaembed~MediaEmbedProvider provider syntax} to learn more about\n * different kinds of media and media providers.\n *\n * **Note**: The default media provider configuration may not support all possible media URLs,\n * only the most common are included.\n *\n * Media without rendering functions are always represented in the data using the \"semantic\" markup. See\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#previewsInData `config.mediaEmbed.previewsInData`} to\n * learn more about possible data outputs.\n *\n * The priority of media providers corresponds to the order of configuration. The first provider\n * to match the URL is always used, even if there are other providers that support a particular URL.\n * The URL is never matched against the remaining providers.\n *\n * To discard **all** default media providers, simply override this configuration with your own\n * {@link module:media-embed/mediaembed~MediaEmbedProvider definitions}:\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tplugins: [ MediaEmbed, ... ],\n *\t\t\t\tmediaEmbed: {\n *\t\t\t\t\tproviders: [\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\t name: 'myProvider',\n *\t\t\t\t\t\t\t url: /^example\\.com\\/media\\/(\\w+)/,\n *\t\t\t\t\t\t\t html: match => '...'\n *\t\t\t\t\t\t},\n *\t\t\t\t\t\t...\n * \t\t\t\t\t]\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * You can take inspiration from the default configuration of this feature which you can find in:\n * https://github.com/ckeditor/ckeditor5-media-embed/blob/master/src/mediaembedediting.js\n *\n * To **extend** the list of default providers, use\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#extraProviders `config.mediaEmbed.extraProviders`}.\n *\n * To **remove** certain providers, use\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#removeProviders `config.mediaEmbed.removeProviders`}.\n *\n * @member {Array.<module:media-embed/mediaembed~MediaEmbedProvider>} module:media-embed/mediaembed~MediaEmbedConfig#providers\n */\n\n/**\n * The additional media providers supported by the editor. This configuration helps extend the default\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#providers}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tplugins: [ MediaEmbed, ... ],\n *\t\t\t\tmediaEmbed: {\n *\t\t\t\t\textraProviders: [\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\t name: 'extraProvider',\n *\t\t\t\t\t\t\t url: /^example\\.com\\/media\\/(\\w+)/,\n *\t\t\t\t\t\t\t html: match => '...'\n *\t\t\t\t\t\t},\n *\t\t\t\t\t\t...\n * \t\t\t\t\t]\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See the {@link module:media-embed/mediaembed~MediaEmbedProvider provider syntax} to learn more.\n *\n * @member {Array.<module:media-embed/mediaembed~MediaEmbedProvider>} module:media-embed/mediaembed~MediaEmbedConfig#extraProviders\n */\n\n/**\n * The list of media providers that should not be used despite being available in\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#providers `config.mediaEmbed.providers`} and\n * {@link module:media-embed/mediaembed~MediaEmbedConfig#extraProviders `config.mediaEmbed.extraProviders`}\n *\n *\t\tmediaEmbed: {\n *\t\t\tremoveProviders: [ 'youtube', 'twitter' ]\n *\t\t}\n *\n * @member {Array.<String>} module:media-embed/mediaembed~MediaEmbedConfig#removeProviders\n */\n\n/**\n * Controls the data format produced by the feature.\n *\n * When `false` (default), the feature produces \"semantic\" data, i.e. it does not include the preview of\n * the media, just the `<oembed>` tag with the `url` attribute:\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<oembed url=\"https://url\"></oembed>\n *\t\t</figure>\n *\n * When `true`, the media is represented in the output in the same way it looks in the editor,\n * i.e. the media preview is saved to the database:\n *\n *\t\t<figure class=\"media\">\n *\t\t\t<div data-oembed-url=\"https://url\">\n *\t\t\t\t<iframe src=\"https://preview\"></iframe>\n *\t\t\t</div>\n *\t\t</figure>\n *\n * **Note:** Media without preview are always represented in the data using the \"semantic\" markup\n * regardless of the value of the `previewsInData`. Learn more about different kinds of media\n * in the {@link module:media-embed/mediaembed~MediaEmbedConfig#providers `config.mediaEmbed.providers`}\n * configuration description.\n *\n * @member {Boolean} [module:media-embed/mediaembed~MediaEmbedConfig#previewsInData=false]\n */\n"]}]}