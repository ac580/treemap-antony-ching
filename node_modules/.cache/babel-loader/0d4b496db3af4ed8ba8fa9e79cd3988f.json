{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js"],"names":["Node","CKEditorError","NodeList","constructor","nodes","_nodes","_insertNodes","Symbol","iterator","length","maxOffset","reduce","sum","node","offsetSize","getNode","index","getNodeIndex","indexOf","getNodeStartOffset","slice","indexToOffset","offsetToIndex","offset","totalOffset","nodeList","splice","_removeNodes","indexStart","howMany","toJSON","map"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/nodelist\n */\n\nimport Node from './node';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Provides an interface to operate on a list of {@link module:engine/model/node~Node nodes}. `NodeList` is used internally\n * in classes like {@link module:engine/model/element~Element Element}\n * or {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n */\nexport default class NodeList {\n\t/**\n\t * Creates an empty node list.\n\t *\n\t * @protected\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes contained in this node list.\n\t */\n\tconstructor( nodes ) {\n\t\t/**\n\t\t * Nodes contained in this node list.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<module:engine/model/node~Node>}\n\t\t */\n\t\tthis._nodes = [];\n\n\t\tif ( nodes ) {\n\t\t\tthis._insertNodes( 0, nodes );\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all nodes contained inside this node list.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._nodes[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Number of nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._nodes.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Gets the node at the given index. Returns `null` if incorrect index was passed.\n\t *\n\t * @param {Number} index Index of node.\n\t * @returns {module:engine/model/node~Node|null} Node at given index.\n\t */\n\tgetNode( index ) {\n\t\treturn this._nodes[ index ] || null;\n\t}\n\n\t/**\n\t * Returns an index of the given node. Returns `null` if given node is not inside this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's index.\n\t */\n\tgetNodeIndex( node ) {\n\t\tconst index = this._nodes.indexOf( node );\n\n\t\treturn index == -1 ? null : index;\n\t}\n\n\t/**\n\t * Returns the starting offset of given node. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes that are before this node in this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Node to look for.\n\t * @returns {Number|null} Node's starting offset.\n\t */\n\tgetNodeStartOffset( node ) {\n\t\tconst index = this.getNodeIndex( node );\n\n\t\treturn index === null ? null : this._nodes.slice( 0, index ).reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Converts index to offset in node list.\n\t *\n\t * Returns starting offset of a node that is at given index. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-index-out-of-bounds` if given index is less than `0` or more than {@link #length}.\n\t *\n\t * @param {Number} index Node's index.\n\t * @returns {Number} Node's starting offset.\n\t */\n\tindexToOffset( index ) {\n\t\tif ( index == this._nodes.length ) {\n\t\t\treturn this.maxOffset;\n\t\t}\n\n\t\tconst node = this._nodes[ index ];\n\n\t\tif ( !node ) {\n\t\t\t/**\n\t\t\t * Given index cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error nodelist-index-out-of-bounds\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-index-out-of-bounds: Given index cannot be found in the node list.', this );\n\t\t}\n\n\t\treturn this.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Converts offset in node list to index.\n\t *\n\t * Returns index of a node that occupies given offset. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-offset-out-of-bounds` if given offset is less than `0` or more than {@link #maxOffset}.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number} Index of a node that occupies given offset.\n\t */\n\toffsetToIndex( offset ) {\n\t\tlet totalOffset = 0;\n\n\t\tfor ( const node of this._nodes ) {\n\t\t\tif ( offset >= totalOffset && offset < totalOffset + node.offsetSize ) {\n\t\t\t\treturn this.getNodeIndex( node );\n\t\t\t}\n\n\t\t\ttotalOffset += node.offsetSize;\n\t\t}\n\n\t\tif ( totalOffset != offset ) {\n\t\t\t/**\n\t\t\t * Given offset cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error model-nodelist-offset-out-of-bounds\n\t\t\t * @param {Number} offset\n\t\t\t * @param {module:engine/model/nodelist~NodeList} nodeList Stringified node list.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-offset-out-of-bounds: Given offset cannot be found in the node list.',\n\t\t\t\tthis,\n\t\t\t\t{\n\t\t\t\t\toffset,\n\t\t\t\t\tnodeList: this\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\treturn this.length;\n\t}\n\n\t/**\n\t * Inserts given nodes at given index.\n\t *\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to be inserted.\n\t */\n\t_insertNodes( index, nodes ) {\n\t\t// Validation.\n\t\tfor ( const node of nodes ) {\n\t\t\tif ( !( node instanceof Node ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to insert an object which is not a Node instance.\n\t\t\t\t *\n\t\t\t\t * @error nodelist-insertNodes-not-node\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-nodelist-insertNodes-not-node: Trying to insert an object which is not a Node instance.',\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._nodes.splice( index, 0, ...nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index.\n\t *\n\t * @protected\n\t * @param {Number} indexStart Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeNodes( indexStart, howMany = 1 ) {\n\t\treturn this._nodes.splice( indexStart, howMany );\n\t}\n\n\t/**\n\t * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes\n\t * are also converted to their plain object representation.\n\t *\n\t * @returns {Array.<module:engine/model/node~Node>} `NodeList` instance converted to `Array`.\n\t */\n\ttoJSON() {\n\t\treturn this._nodes.map( node => node.toJSON() );\n\t}\n}\n"]}]}