{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-table/src/commands/mergecellcommand.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-table/src/commands/mergecellcommand.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-table/src/commands/mergecellcommand.js"],"names":["Command","TableWalker","findAncestor","updateNumericAttribute","MergeCellCommand","constructor","editor","options","direction","isHorizontal","refresh","cellToMerge","_getMergeableCell","value","isEnabled","execute","model","doc","document","tableCell","selection","getFirstPosition","change","writer","isMergeNext","cellToExpand","cellToRemove","removedTableCellRow","parent","mergeTableCells","spanAttribute","cellSpan","parseInt","getAttribute","cellToMergeSpan","setAttribute","setSelection","createRangeIn","childCount","removeEmptyRow","tableUtils","plugins","get","getHorizontalCell","getVerticalCell","span","tableRow","table","horizontalCell","nextSibling","previousSibling","headingColumns","cellOnLeft","cellOnRight","column","leftCellColumn","getCellLocation","rightCellColumn","leftCellSpan","rightCellSpan","isMergeWithBodyCell","isMergeWithHeadCell","cellsAreTouching","undefined","rowIndex","getChildIndex","rowspan","headingRows","currentCellRowSpan","rowOfCellToMerge","tableMap","endRow","currentCellData","find","cell","mergeColumn","cellToMergeData","row","removedRowIndex","overlapsRemovedRow","remove","isEmpty","move","createPositionAt","getChild","is"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/mergecellcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The merge cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'mergeTableCellRight'`, `'mergeTableCellLeft'`,\n * `'mergeTableCellUp'` and `'mergeTableCellDown'` editor commands.\n *\n * To merge a table cell at the current selection with another cell, execute the command corresponding with the preferred direction.\n *\n * For example, to merge with a cell to the right:\n *\n *\t\teditor.execute( 'mergeTableCellRight' );\n *\n * **Note**: If a table cell has a different [`rowspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-rowspan)\n * (for `'mergeTableCellRight'` and `'mergeTableCellLeft'`) or [`colspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-colspan)\n * (for `'mergeTableCellUp'` and `'mergeTableCellDown'`), the command will be disabled.\n *\n * @extends module:core/command~Command\n */\nexport default class MergeCellCommand extends Command {\n\t/**\n\t * Creates a new `MergeCellCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n\t * @param {Object} options\n\t * @param {String} options.direction Indicates which cell to merge with the currently selected one.\n\t * Possible values are: `'left'`, `'right'`, `'up'` and `'down'`.\n\t */\n\tconstructor( editor, options ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The direction that indicates which cell will be merged with the currently selected one.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} #direction\n\t\t */\n\t\tthis.direction = options.direction;\n\n\t\t/**\n\t\t * Whether the merge is horizontal (left/right) or vertical (up/down).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isHorizontal\n\t\t */\n\t\tthis.isHorizontal = this.direction == 'right' || this.direction == 'left';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst cellToMerge = this._getMergeableCell();\n\n\t\tthis.value = cellToMerge;\n\t\tthis.isEnabled = !!cellToMerge;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #direction} value, it will merge the cell that is to the `'left'`, `'right'`, `'up'` or `'down'`.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\t\tconst cellToMerge = this.value;\n\t\tconst direction = this.direction;\n\n\t\tmodel.change( writer => {\n\t\t\tconst isMergeNext = direction == 'right' || direction == 'down';\n\n\t\t\t// The merge mechanism is always the same so sort cells to be merged.\n\t\t\tconst cellToExpand = isMergeNext ? tableCell : cellToMerge;\n\t\t\tconst cellToRemove = isMergeNext ? cellToMerge : tableCell;\n\n\t\t\t// Cache the parent of cell to remove for later check.\n\t\t\tconst removedTableCellRow = cellToRemove.parent;\n\n\t\t\tmergeTableCells( cellToRemove, cellToExpand, writer );\n\n\t\t\tconst spanAttribute = this.isHorizontal ? 'colspan' : 'rowspan';\n\t\t\tconst cellSpan = parseInt( tableCell.getAttribute( spanAttribute ) || 1 );\n\t\t\tconst cellToMergeSpan = parseInt( cellToMerge.getAttribute( spanAttribute ) || 1 );\n\n\t\t\t// Update table cell span attribute and merge set selection on merged contents.\n\t\t\twriter.setAttribute( spanAttribute, cellSpan + cellToMergeSpan, cellToExpand );\n\t\t\twriter.setSelection( writer.createRangeIn( cellToExpand ) );\n\n\t\t\t// Remove empty row after merging.\n\t\t\tif ( !removedTableCellRow.childCount ) {\n\t\t\t\tremoveEmptyRow( removedTableCellRow, writer );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns a cell that can be merged with the current cell depending on the command's direction.\n\t *\n\t * @returns {module:engine/model/element~Element|undefined}\n\t * @private\n\t */\n\t_getMergeableCell() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\t// First get the cell on proper direction.\n\t\tconst cellToMerge = this.isHorizontal ?\n\t\t\tgetHorizontalCell( tableCell, this.direction, tableUtils ) :\n\t\t\tgetVerticalCell( tableCell, this.direction );\n\n\t\tif ( !cellToMerge ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If found check if the span perpendicular to merge direction is equal on both cells.\n\t\tconst spanAttribute = this.isHorizontal ? 'rowspan' : 'colspan';\n\t\tconst span = parseInt( tableCell.getAttribute( spanAttribute ) || 1 );\n\n\t\tconst cellToMergeSpan = parseInt( cellToMerge.getAttribute( spanAttribute ) || 1 );\n\n\t\tif ( cellToMergeSpan === span ) {\n\t\t\treturn cellToMerge;\n\t\t}\n\t}\n}\n\n// Returns the cell that can be merged horizontally.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} direction\n// @returns {module:engine/model/node~Node|null}\nfunction getHorizontalCell( tableCell, direction, tableUtils ) {\n\tconst tableRow = tableCell.parent;\n\tconst table = tableRow.parent;\n\tconst horizontalCell = direction == 'right' ? tableCell.nextSibling : tableCell.previousSibling;\n\tconst headingColumns = table.getAttribute( 'headingColumns' ) || 0;\n\n\tif ( !horizontalCell ) {\n\t\treturn;\n\t}\n\n\t// Sort cells:\n\tconst cellOnLeft = direction == 'right' ? tableCell : horizontalCell;\n\tconst cellOnRight = direction == 'right' ? horizontalCell : tableCell;\n\n\t// Get their column indexes:\n\tconst { column: leftCellColumn } = tableUtils.getCellLocation( cellOnLeft );\n\tconst { column: rightCellColumn } = tableUtils.getCellLocation( cellOnRight );\n\n\tconst leftCellSpan = parseInt( cellOnLeft.getAttribute( 'colspan' ) || 1 );\n\tconst rightCellSpan = parseInt( cellOnRight.getAttribute( 'colspan' ) || 1 );\n\n\t// We cannot merge cells if the result will extend over heading section.\n\tconst isMergeWithBodyCell = direction == 'right' && ( rightCellColumn + rightCellSpan > headingColumns );\n\tconst isMergeWithHeadCell = direction == 'left' && ( leftCellColumn + leftCellSpan > headingColumns - 1 );\n\n\tif ( headingColumns && ( isMergeWithBodyCell || isMergeWithHeadCell ) ) {\n\t\treturn;\n\t}\n\n\t// The cell on the right must have index that is distant to the cell on the left by the left cell's width (colspan).\n\tconst cellsAreTouching = leftCellColumn + leftCellSpan === rightCellColumn;\n\n\t// If the right cell's column index is different it means that there are rowspanned cells between them.\n\treturn cellsAreTouching ? horizontalCell : undefined;\n}\n\n// Returns the cell that can be merged vertically.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} direction\n// @returns {module:engine/model/node~Node|null}\nfunction getVerticalCell( tableCell, direction ) {\n\tconst tableRow = tableCell.parent;\n\tconst table = tableRow.parent;\n\n\tconst rowIndex = table.getChildIndex( tableRow );\n\n\t// Don't search for mergeable cell if direction points out of the table.\n\tif ( ( direction == 'down' && rowIndex === table.childCount - 1 ) || ( direction == 'up' && rowIndex === 0 ) ) {\n\t\treturn;\n\t}\n\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\tconst isMergeWithBodyCell = direction == 'down' && ( rowIndex + rowspan ) === headingRows;\n\tconst isMergeWithHeadCell = direction == 'up' && rowIndex === headingRows;\n\n\t// Don't search for mergeable cell if direction points out of the current table section.\n\tif ( headingRows && ( isMergeWithBodyCell || isMergeWithHeadCell ) ) {\n\t\treturn;\n\t}\n\n\tconst currentCellRowSpan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\tconst rowOfCellToMerge = direction == 'down' ? rowIndex + currentCellRowSpan : rowIndex;\n\n\tconst tableMap = [ ...new TableWalker( table, { endRow: rowOfCellToMerge } ) ];\n\n\tconst currentCellData = tableMap.find( value => value.cell === tableCell );\n\tconst mergeColumn = currentCellData.column;\n\n\tconst cellToMergeData = tableMap.find( ( { row, rowspan, column } ) => {\n\t\tif ( column !== mergeColumn ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( direction == 'down' ) {\n\t\t\t// If merging a cell below the mergeRow is already calculated.\n\t\t\treturn row === rowOfCellToMerge;\n\t\t} else {\n\t\t\t// If merging a cell above calculate if it spans to mergeRow.\n\t\t\treturn rowOfCellToMerge === row + rowspan;\n\t\t}\n\t} );\n\n\treturn cellToMergeData && cellToMergeData.cell;\n}\n\n// Properly removes empty row from a table. Will update `rowspan` attribute of cells that overlaps removed row.\n//\n// @param {module:engine/model/element~Element} removedTableCellRow\n// @param {module:engine/model/writer~Writer} writer\nfunction removeEmptyRow( removedTableCellRow, writer ) {\n\tconst table = removedTableCellRow.parent;\n\n\tconst removedRowIndex = table.getChildIndex( removedTableCellRow );\n\n\tfor ( const { cell, row, rowspan } of new TableWalker( table, { endRow: removedRowIndex } ) ) {\n\t\tconst overlapsRemovedRow = row + rowspan - 1 >= removedRowIndex;\n\n\t\tif ( overlapsRemovedRow ) {\n\t\t\tupdateNumericAttribute( 'rowspan', rowspan - 1, cell, writer );\n\t\t}\n\t}\n\n\twriter.remove( removedTableCellRow );\n}\n\n// Merges two table cells - will ensure that after merging cells with empty paragraph the result table cell will only have one paragraph.\n// If one of the merged table cell is empty the merged table cell will have contents of the non-empty table cell.\n// If both are empty the merged table cell will have only one empty paragraph.\n//\n// @param {module:engine/model/element~Element} cellToRemove\n// @param {module:engine/model/element~Element} cellToExpand\n// @param {module:engine/model/writer~Writer} writer\nfunction mergeTableCells( cellToRemove, cellToExpand, writer ) {\n\tif ( !isEmpty( cellToRemove ) ) {\n\t\tif ( isEmpty( cellToExpand ) ) {\n\t\t\twriter.remove( writer.createRangeIn( cellToExpand ) );\n\t\t}\n\n\t\twriter.move( writer.createRangeIn( cellToRemove ), writer.createPositionAt( cellToExpand, 'end' ) );\n\t}\n\n\t// Remove merged table cell.\n\twriter.remove( cellToRemove );\n}\n\n// Checks if passed table cell contains empty paragraph.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @returns {Boolean}\nfunction isEmpty( tableCell ) {\n\treturn tableCell.childCount == 1 && tableCell.getChild( 0 ).is( 'paragraph' ) && tableCell.getChild( 0 ).isEmpty;\n}\n"]}]}