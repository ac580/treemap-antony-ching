{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-image/src/imageupload/utils.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-image/src/imageupload/utils.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGltYWdlL2ltYWdldXBsb2FkL3V0aWxzCiAqLwoKLyogZ2xvYmFsIGZldGNoLCBGaWxlICovCgovKioKICogQ3JlYXRlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHRlc3QgZm9yIGltYWdlIGZpbGVzLgogKgogKgkJY29uc3QgaW1hZ2VUeXBlID0gY3JlYXRlSW1hZ2VUeXBlUmVnRXhwKCBbICdwbmcnLCAnanBlZycsICdzdmcreG1sJywgJ3ZuZC5taWNyb3NvZnQuaWNvbicgXSApOwogKgogKgkJY29uc29sZS5sb2coICdpcyBzdXBwb3J0ZWQgaW1hZ2UnLCBpbWFnZVR5cGUudGVzdCggZmlsZS50eXBlICkgKTsKICoKICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gdHlwZXMKICogQHJldHVybnMge1JlZ0V4cH0KICovCmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbWFnZVR5cGVSZWdFeHAodHlwZXMpIHsKICAvLyBTYW5pdGl6ZSB0aGUgTUlNRSB0eXBlIG5hbWUgd2hpY2ggbWF5IGluY2x1ZGU6ICIrIiwgIi0iIG9yICIuIi4KICBjb25zdCByZWdFeHBTYWZlTmFtZXMgPSB0eXBlcy5tYXAodHlwZSA9PiB0eXBlLnJlcGxhY2UoJysnLCAnXFwrJykpOwogIHJldHVybiBuZXcgUmVnRXhwKGBeaW1hZ2VcXC8oJHtyZWdFeHBTYWZlTmFtZXMuam9pbignfCcpfSkkYCk7Cn0KLyoqCiAqIENyZWF0ZXMgYSBwcm9taXNlIHRoYXQgZmV0Y2hlcyB0aGUgaW1hZ2UgbG9jYWwgc291cmNlIChCYXNlNjQgb3IgYmxvYikgYW5kIHJlc29sdmVzIHdpdGggYSBgRmlsZWAgb2JqZWN0LgogKgogKiBAcGFyYW0ge21vZHVsZTplbmdpbmUvdmlldy9lbGVtZW50fkVsZW1lbnR9IGltYWdlIEltYWdlIHdob3NlIHNvdXJjZSB0byBmZXRjaC4KICogQHJldHVybnMge1Byb21pc2UuPEZpbGU+fSBBIHByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgd2hlbiBhbiBpbWFnZSBzb3VyY2UgaXMgZmV0Y2hlZCBhbmQgY29udmVydGVkIHRvIGEgYEZpbGVgIGluc3RhbmNlLgogKiBJdCByZXNvbHZlcyB3aXRoIGEgYEZpbGVgIG9iamVjdC4gSWYgdGhlcmUgd2VyZSBhbnkgZXJyb3JzIGR1cmluZyBmaWxlIHByb2Nlc3NpbmcsIHRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQuCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIGZldGNoTG9jYWxJbWFnZShpbWFnZSkgewogIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICBjb25zdCBpbWFnZVNyYyA9IGltYWdlLmdldEF0dHJpYnV0ZSgnc3JjJyk7IC8vIEZldGNoIHdvcmtzIGFzeW5jaHJvbm91c2x5IGFuZCBzbyBkb2VzIG5vdCBibG9jayBicm93c2VyIFVJIHdoZW4gcHJvY2Vzc2luZyBkYXRhLgoKICAgIGZldGNoKGltYWdlU3JjKS50aGVuKHJlc291cmNlID0+IHJlc291cmNlLmJsb2IoKSkudGhlbihibG9iID0+IHsKICAgICAgY29uc3QgbWltZVR5cGUgPSBnZXRJbWFnZU1pbWVUeXBlKGJsb2IsIGltYWdlU3JjKTsKICAgICAgY29uc3QgZXh0ID0gbWltZVR5cGUucmVwbGFjZSgnaW1hZ2UvJywgJycpOwogICAgICBjb25zdCBmaWxlbmFtZSA9IGBpbWFnZS4ke2V4dH1gOwogICAgICBjb25zdCBmaWxlID0gY3JlYXRlRmlsZUZyb21CbG9iKGJsb2IsIGZpbGVuYW1lLCBtaW1lVHlwZSk7CiAgICAgIGZpbGUgPyByZXNvbHZlKGZpbGUpIDogcmVqZWN0KCk7CiAgICB9KS5jYXRjaChyZWplY3QpOwogIH0pOwp9Ci8qKgogKiBDaGVja3Mgd2hldGhlciBhIGdpdmVuIG5vZGUgaXMgYW4gaW1hZ2UgZWxlbWVudCB3aXRoIGEgbG9jYWwgc291cmNlIChCYXNlNjQgb3IgYmxvYikuCiAqCiAqIEBwYXJhbSB7bW9kdWxlOmVuZ2luZS92aWV3L25vZGV+Tm9kZX0gbm9kZSBUaGUgbm9kZSB0byBjaGVjay4KICogQHJldHVybnMge0Jvb2xlYW59CiAqLwoKZXhwb3J0IGZ1bmN0aW9uIGlzTG9jYWxJbWFnZShub2RlKSB7CiAgaWYgKCFub2RlLmlzKCdlbGVtZW50JywgJ2ltZycpIHx8ICFub2RlLmdldEF0dHJpYnV0ZSgnc3JjJykpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHJldHVybiBub2RlLmdldEF0dHJpYnV0ZSgnc3JjJykubWF0Y2goL15kYXRhOmltYWdlXC9cdys7YmFzZTY0LC9nKSB8fCBub2RlLmdldEF0dHJpYnV0ZSgnc3JjJykubWF0Y2goL15ibG9iOi9nKTsKfSAvLyBFeHRyYWN0cyBhbiBpbWFnZSB0eXBlIGJhc2VkIG9uIGl0cyBibG9iIHJlcHJlc2VudGF0aW9uIG9yIGl0cyBzb3VyY2UuCi8vCi8vIEBwYXJhbSB7U3RyaW5nfSBzcmMgSW1hZ2UgYHNyY2AgYXR0cmlidXRlIHZhbHVlLgovLyBAcGFyYW0ge0Jsb2J9IGJsb2IgSW1hZ2UgYmxvYiByZXByZXNlbnRhdGlvbi4KLy8gQHJldHVybnMge1N0cmluZ30KCmZ1bmN0aW9uIGdldEltYWdlTWltZVR5cGUoYmxvYiwgc3JjKSB7CiAgaWYgKGJsb2IudHlwZSkgewogICAgcmV0dXJuIGJsb2IudHlwZTsKICB9IGVsc2UgaWYgKHNyYy5tYXRjaCgvZGF0YTooaW1hZ2VcL1x3Kyk7YmFzZTY0LykpIHsKICAgIHJldHVybiBzcmMubWF0Y2goL2RhdGE6KGltYWdlXC9cdyspO2Jhc2U2NC8pWzFdLnRvTG93ZXJDYXNlKCk7CiAgfSBlbHNlIHsKICAgIC8vIEZhbGxiYWNrIHRvICdqcGVnJyBhcyBjb21tb24gZXh0ZW5zaW9uLgogICAgcmV0dXJuICdpbWFnZS9qcGVnJzsKICB9Cn0gLy8gQ3JlYXRlcyBhIGBGaWxlYCBpbnN0YW5jZSBmcm9tIHRoZSBnaXZlbiBgQmxvYmAgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBmaWxlIG5hbWUuCi8vCi8vIEBwYXJhbSB7QmxvYn0gYmxvYiBUaGUgYEJsb2JgIGluc3RhbmNlIGZyb20gd2hpY2ggdGhlIGZpbGUgd2lsbCBiZSBjcmVhdGVkLgovLyBAcGFyYW0ge1N0cmluZ30gZmlsZW5hbWUgVGhlIGZpbGUgbmFtZSB1c2VkIGR1cmluZyB0aGUgZmlsZSBjcmVhdGlvbi4KLy8gQHBhcmFtIHtTdHJpbmd9IG1pbWVUeXBlIFRoZSBmaWxlIE1JTUUgdHlwZS4KLy8gQHJldHVybnMge0ZpbGV8bnVsbH0gVGhlIGBGaWxlYCBpbnN0YW5jZSBjcmVhdGVkIGZyb20gdGhlIGdpdmVuIGJsb2Igb3IgYG51bGxgIGlmIGBGaWxlIEFQSWAgaXMgbm90IGF2YWlsYWJsZS4KCgpmdW5jdGlvbiBjcmVhdGVGaWxlRnJvbUJsb2IoYmxvYiwgZmlsZW5hbWUsIG1pbWVUeXBlKSB7CiAgdHJ5IHsKICAgIHJldHVybiBuZXcgRmlsZShbYmxvYl0sIGZpbGVuYW1lLCB7CiAgICAgIHR5cGU6IG1pbWVUeXBlCiAgICB9KTsKICB9IGNhdGNoIChlcnIpIHsKICAgIC8vIEVkZ2UgZG9lcyBub3Qgc3VwcG9ydCBgRmlsZWAgY29uc3RydWN0b3IgQVRNLCBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvOTU1MTU0Ni8uCiAgICAvLyBIb3dldmVyLCB0aGUgYEZpbGVgIGZ1bmN0aW9uIGlzIHByZXNlbnQgKHNvIGNhbm5vdCBiZSBjaGVja2VkIHdpdGggYCF3aW5kb3cuRmlsZWAgb3IgYHR5cGVvZiBGaWxlID09PSAnZnVuY3Rpb24nYCksIGJ1dAogICAgLy8gY2FsbGluZyBpdCB3aXRoIGBuZXcgRmlsZSggLi4uIClgIHRocm93cyBhbiBlcnJvci4gVGhpcyB0cnktY2F0Y2ggcHJldmVudHMgdGhhdC4gQWxzbyB3aGVuIHRoZSBmdW5jdGlvbiB3aWxsCiAgICAvLyBiZSBpbXBsZW1lbnRlZCBjb3JyZWN0bHkgaW4gRWRnZSB0aGUgY29kZSB3aWxsIHN0YXJ0IHdvcmtpbmcgd2l0aG91dCBhbnkgY2hhbmdlcyAoc2VlICMyNDcpLgogICAgcmV0dXJuIG51bGw7CiAgfQp9"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-image/src/imageupload/utils.js"],"names":["createImageTypeRegExp","types","regExpSafeNames","map","type","replace","RegExp","join","fetchLocalImage","image","Promise","resolve","reject","imageSrc","getAttribute","fetch","then","resource","blob","mimeType","getImageMimeType","ext","filename","file","createFileFromBlob","catch","isLocalImage","node","is","match","src","toLowerCase","File","err"],"mappings":"AAAA;;;;;AAKA;;;;AAIA;;AAEA;;;;;;;;;;AAUA,OAAO,SAASA,qBAAT,CAAgCC,KAAhC,EAAwC;AAC9C;AACA,QAAMC,eAAe,GAAGD,KAAK,CAACE,GAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,OAAL,CAAc,GAAd,EAAmB,KAAnB,CAAnB,CAAxB;AAEA,SAAO,IAAIC,MAAJ,CAAa,aAAaJ,eAAe,CAACK,IAAhB,CAAsB,GAAtB,CAA6B,IAAvD,CAAP;AACA;AAED;;;;;;;;AAOA,OAAO,SAASC,eAAT,CAA0BC,KAA1B,EAAkC;AACxC,SAAO,IAAIC,OAAJ,CAAa,CAAEC,OAAF,EAAWC,MAAX,KAAuB;AAC1C,UAAMC,QAAQ,GAAGJ,KAAK,CAACK,YAAN,CAAoB,KAApB,CAAjB,CAD0C,CAG1C;;AACAC,IAAAA,KAAK,CAAEF,QAAF,CAAL,CACEG,IADF,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEEF,IAFF,CAEQE,IAAI,IAAI;AACd,YAAMC,QAAQ,GAAGC,gBAAgB,CAAEF,IAAF,EAAQL,QAAR,CAAjC;AACA,YAAMQ,GAAG,GAAGF,QAAQ,CAACd,OAAT,CAAkB,QAAlB,EAA4B,EAA5B,CAAZ;AACA,YAAMiB,QAAQ,GAAI,SAASD,GAAK,EAAhC;AACA,YAAME,IAAI,GAAGC,kBAAkB,CAAEN,IAAF,EAAQI,QAAR,EAAkBH,QAAlB,CAA/B;AAEAI,MAAAA,IAAI,GAAGZ,OAAO,CAAEY,IAAF,CAAV,GAAqBX,MAAM,EAA/B;AACA,KATF,EAUEa,KAVF,CAUSb,MAVT;AAWA,GAfM,CAAP;AAgBA;AAED;;;;;;;AAMA,OAAO,SAASc,YAAT,CAAuBC,IAAvB,EAA8B;AACpC,MAAK,CAACA,IAAI,CAACC,EAAL,CAAS,SAAT,EAAoB,KAApB,CAAD,IAAgC,CAACD,IAAI,CAACb,YAAL,CAAmB,KAAnB,CAAtC,EAAmE;AAClE,WAAO,KAAP;AACA;;AAED,SAAOa,IAAI,CAACb,YAAL,CAAmB,KAAnB,EAA2Be,KAA3B,CAAkC,2BAAlC,KACNF,IAAI,CAACb,YAAL,CAAmB,KAAnB,EAA2Be,KAA3B,CAAkC,SAAlC,CADD;AAEA,C,CAED;AACA;AACA;AACA;AACA;;AACA,SAAST,gBAAT,CAA2BF,IAA3B,EAAiCY,GAAjC,EAAuC;AACtC,MAAKZ,IAAI,CAACd,IAAV,EAAiB;AAChB,WAAOc,IAAI,CAACd,IAAZ;AACA,GAFD,MAEO,IAAK0B,GAAG,CAACD,KAAJ,CAAW,0BAAX,CAAL,EAA+C;AACrD,WAAOC,GAAG,CAACD,KAAJ,CAAW,0BAAX,EAAyC,CAAzC,EAA6CE,WAA7C,EAAP;AACA,GAFM,MAEA;AACN;AACA,WAAO,YAAP;AACA;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,kBAAT,CAA6BN,IAA7B,EAAmCI,QAAnC,EAA6CH,QAA7C,EAAwD;AACvD,MAAI;AACH,WAAO,IAAIa,IAAJ,CAAU,CAAEd,IAAF,CAAV,EAAoBI,QAApB,EAA8B;AAAElB,MAAAA,IAAI,EAAEe;AAAR,KAA9B,CAAP;AACA,GAFD,CAEE,OAAQc,GAAR,EAAc;AACf;AACA;AACA;AACA;AACA,WAAO,IAAP;AACA;AACD","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload/utils\n */\n\n/* global fetch, File */\n\n/**\n * Creates a regular expression used to test for image files.\n *\n *\t\tconst imageType = createImageTypeRegExp( [ 'png', 'jpeg', 'svg+xml', 'vnd.microsoft.icon' ] );\n *\n *\t\tconsole.log( 'is supported image', imageType.test( file.type ) );\n *\n * @param {Array.<String>} types\n * @returns {RegExp}\n */\nexport function createImageTypeRegExp( types ) {\n\t// Sanitize the MIME type name which may include: \"+\", \"-\" or \".\".\n\tconst regExpSafeNames = types.map( type => type.replace( '+', '\\\\+' ) );\n\n\treturn new RegExp( `^image\\\\/(${ regExpSafeNames.join( '|' ) })$` );\n}\n\n/**\n * Creates a promise that fetches the image local source (Base64 or blob) and resolves with a `File` object.\n *\n * @param {module:engine/view/element~Element} image Image whose source to fetch.\n * @returns {Promise.<File>} A promise which resolves when an image source is fetched and converted to a `File` instance.\n * It resolves with a `File` object. If there were any errors during file processing, the promise will be rejected.\n */\nexport function fetchLocalImage( image ) {\n\treturn new Promise( ( resolve, reject ) => {\n\t\tconst imageSrc = image.getAttribute( 'src' );\n\n\t\t// Fetch works asynchronously and so does not block browser UI when processing data.\n\t\tfetch( imageSrc )\n\t\t\t.then( resource => resource.blob() )\n\t\t\t.then( blob => {\n\t\t\t\tconst mimeType = getImageMimeType( blob, imageSrc );\n\t\t\t\tconst ext = mimeType.replace( 'image/', '' );\n\t\t\t\tconst filename = `image.${ ext }`;\n\t\t\t\tconst file = createFileFromBlob( blob, filename, mimeType );\n\n\t\t\t\tfile ? resolve( file ) : reject();\n\t\t\t} )\n\t\t\t.catch( reject );\n\t} );\n}\n\n/**\n * Checks whether a given node is an image element with a local source (Base64 or blob).\n *\n * @param {module:engine/view/node~Node} node The node to check.\n * @returns {Boolean}\n */\nexport function isLocalImage( node ) {\n\tif ( !node.is( 'element', 'img' ) || !node.getAttribute( 'src' ) ) {\n\t\treturn false;\n\t}\n\n\treturn node.getAttribute( 'src' ).match( /^data:image\\/\\w+;base64,/g ) ||\n\t\tnode.getAttribute( 'src' ).match( /^blob:/g );\n}\n\n// Extracts an image type based on its blob representation or its source.\n//\n// @param {String} src Image `src` attribute value.\n// @param {Blob} blob Image blob representation.\n// @returns {String}\nfunction getImageMimeType( blob, src ) {\n\tif ( blob.type ) {\n\t\treturn blob.type;\n\t} else if ( src.match( /data:(image\\/\\w+);base64/ ) ) {\n\t\treturn src.match( /data:(image\\/\\w+);base64/ )[ 1 ].toLowerCase();\n\t} else {\n\t\t// Fallback to 'jpeg' as common extension.\n\t\treturn 'image/jpeg';\n\t}\n}\n\n// Creates a `File` instance from the given `Blob` instance using the specified file name.\n//\n// @param {Blob} blob The `Blob` instance from which the file will be created.\n// @param {String} filename The file name used during the file creation.\n// @param {String} mimeType The file MIME type.\n// @returns {File|null} The `File` instance created from the given blob or `null` if `File API` is not available.\nfunction createFileFromBlob( blob, filename, mimeType ) {\n\ttry {\n\t\treturn new File( [ blob ], filename, { type: mimeType } );\n\t} catch ( err ) {\n\t\t// Edge does not support `File` constructor ATM, see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9551546/.\n\t\t// However, the `File` function is present (so cannot be checked with `!window.File` or `typeof File === 'function'`), but\n\t\t// calling it with `new File( ... )` throws an error. This try-catch prevents that. Also when the function will\n\t\t// be implemented correctly in Edge the code will start working without any changes (see #247).\n\t\treturn null;\n\t}\n}\n"]}]}