{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBTZXQgb2YgdXRpbHMgcmVsYXRlZCB0byBrZXlib2FyZCBzdXBwb3J0LgogKgogKiBAbW9kdWxlIHV0aWxzL2tleWJvYXJkCiAqLwppbXBvcnQgQ0tFZGl0b3JFcnJvciBmcm9tICcuL2NrZWRpdG9yZXJyb3InOwppbXBvcnQgZW52IGZyb20gJy4vZW52JzsKY29uc3QgbWFjR2x5cGhzVG9Nb2RpZmllcnMgPSB7CiAgJ+KMmCc6ICdjdHJsJywKICAn4oenJzogJ3NoaWZ0JywKICAn4oylJzogJ2FsdCcKfTsKY29uc3QgbW9kaWZpZXJzVG9NYWNHbHlwaHMgPSB7CiAgJ2N0cmwnOiAn4oyYJywKICAnc2hpZnQnOiAn4oenJywKICAnYWx0JzogJ+KMpScKfTsKLyoqCiAqIE9iamVjdCB3aXRoIGBrZXlOYW1lID0+IGtleUNvZGVgIHBhaXJzIGZvciBhIHNldCBvZiBrbm93biBrZXlzLgogKgogKiBDb250YWluczoKICoKICogKiBgYS16YCwKICogKiBgMC05YCwKICogKiBgZjEtZjEyYCwKICogKiBgYXJyb3cobGVmdHx1cHxyaWdodHxib3R0b20pYCwKICogKiBgYmFja3NwYWNlYCwgYGRlbGV0ZWAsIGBlbnRlcmAsIGBlc2NgLCBgdGFiYCwKICogKiBgY3RybGAsIGBjbWRgLCBgc2hpZnRgLCBgYWx0YC4KICovCgpleHBvcnQgY29uc3Qga2V5Q29kZXMgPSBnZW5lcmF0ZUtub3duS2V5Q29kZXMoKTsKLyoqCiAqIENvbnZlcnRzIGEga2V5IG5hbWUgb3IgYSB7QGxpbmsgbW9kdWxlOnV0aWxzL2tleWJvYXJkfktleXN0cm9rZUluZm8ga2V5c3Ryb2tlIGluZm99IGludG8gYSBrZXkgY29kZS4KICoKICogTm90ZTogS2V5IG5hbWVzIGFyZSBtYXRjaGVkIHdpdGgge0BsaW5rIG1vZHVsZTp1dGlscy9rZXlib2FyZH5rZXlDb2Rlc30gaW4gYSBjYXNlLWluc2Vuc2l0aXZlIHdheS4KICoKICogQHBhcmFtIHtTdHJpbmd8bW9kdWxlOnV0aWxzL2tleWJvYXJkfktleXN0cm9rZUluZm99IEtleSBuYW1lIChzZWUge0BsaW5rIG1vZHVsZTp1dGlscy9rZXlib2FyZH5rZXlDb2Rlc30pCiAqIG9yIGEga2V5c3Ryb2tlIGRhdGEgb2JqZWN0LgogKiBAcmV0dXJucyB7TnVtYmVyfSBLZXkgb3Iga2V5c3Ryb2tlIGNvZGUuCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIGdldENvZGUoa2V5KSB7CiAgbGV0IGtleUNvZGU7CgogIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnKSB7CiAgICBrZXlDb2RlID0ga2V5Q29kZXNba2V5LnRvTG93ZXJDYXNlKCldOwoKICAgIGlmICgha2V5Q29kZSkgewogICAgICAvKioKICAgICAgICogVW5rbm93biBrZXkgbmFtZS4gT25seSBrZXkgbmFtZXMgY29udGFpbmVkIGJ5IHRoZSB7QGxpbmsgbW9kdWxlOnV0aWxzL2tleWJvYXJkfmtleUNvZGVzfSBjYW4gYmUgdXNlZC4KICAgICAgICoKICAgICAgICogQGVycnJvciBrZXlib2FyZC11bmtub3duLWtleQogICAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5CiAgICAgICAqLwogICAgICB0aHJvdyBuZXcgQ0tFZGl0b3JFcnJvcigna2V5Ym9hcmQtdW5rbm93bi1rZXk6IFVua25vd24ga2V5IG5hbWUuJywgbnVsbCwgewogICAgICAgIGtleQogICAgICB9KTsKICAgIH0KICB9IGVsc2UgewogICAga2V5Q29kZSA9IGtleS5rZXlDb2RlICsgKGtleS5hbHRLZXkgPyBrZXlDb2Rlcy5hbHQgOiAwKSArIChrZXkuY3RybEtleSA/IGtleUNvZGVzLmN0cmwgOiAwKSArIChrZXkuc2hpZnRLZXkgPyBrZXlDb2Rlcy5zaGlmdCA6IDApOwogIH0KCiAgcmV0dXJuIGtleUNvZGU7Cn0KLyoqCiAqIFBhcnNlcyBrZXlzdHJva2UgYW5kIHJldHVybnMgYSBrZXlzdHJva2UgY29kZSB0aGF0IHdpbGwgbWF0Y2ggdGhlIGNvZGUgcmV0dXJuZWQgYnkKICogbGluayB7QGxpbmsgbW9kdWxlOnV0aWxzL2tleWJvYXJkLmdldENvZGV9IGZvciBhIGNvcnJlc3BvbmRpbmcge0BsaW5rIG1vZHVsZTp1dGlscy9rZXlib2FyZH5LZXlzdHJva2VJbmZvIGtleXN0cm9rZSBpbmZvfS4KICoKICogVGhlIGtleXN0cm9rZSBjYW4gYmUgcGFzc2VkIGluIHR3byBmb3JtYXRzOgogKgogKiAqIGFzIGEgc2luZ2xlIHN0cmluZyDigJMgZS5nLiBgY3RybCArIEFgLAogKiAqIGFzIGFuIGFycmF5IG9mIHtAbGluayBtb2R1bGU6dXRpbHMva2V5Ym9hcmR+a2V5Q29kZXMga25vd24ga2V5IG5hbWVzfSBhbmQga2V5IGNvZGVzIOKAkyBlLmcuOgogKiAgICogYFsgJ2N0cmwnLCAzMiBdYCAoY3RybCArIHNwYWNlKSwKICogICAqIGBbICdjdHJsJywgJ2EnIF1gIChjdHJsICsgQSkuCiAqCiAqIE5vdGU6IEtleSBuYW1lcyBhcmUgbWF0Y2hlZCB3aXRoIHtAbGluayBtb2R1bGU6dXRpbHMva2V5Ym9hcmR+a2V5Q29kZXN9IGluIGEgY2FzZS1pbnNlbnNpdGl2ZSB3YXkuCiAqCiAqIE5vdGU6IE9ubHkga2V5c3Ryb2tlcyB3aXRoIGEgc2luZ2xlIG5vbi1tb2RpZmllciBrZXkgYXJlIHN1cHBvcnRlZCAoZS5nLiBgY3RybCtBYCBpcyBPSywgYnV0IGBjdHJsK0ErQmAgaXMgbm90KS4KICoKICogQHBhcmFtIHtTdHJpbmd8QXJyYXkuPE51bWJlcnxTdHJpbmc+fSBrZXlzdHJva2UgS2V5c3Ryb2tlIGRlZmluaXRpb24uCiAqIEByZXR1cm5zIHtOdW1iZXJ9IEtleXN0cm9rZSBjb2RlLgogKi8KCmV4cG9ydCBmdW5jdGlvbiBwYXJzZUtleXN0cm9rZShrZXlzdHJva2UpIHsKICBpZiAodHlwZW9mIGtleXN0cm9rZSA9PSAnc3RyaW5nJykgewogICAga2V5c3Ryb2tlID0gc3BsaXRLZXlzdHJva2VUZXh0KGtleXN0cm9rZSk7CiAgfQoKICByZXR1cm4ga2V5c3Ryb2tlLm1hcChrZXkgPT4gdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGdldENvZGUoa2V5KSA6IGtleSkucmVkdWNlKChrZXksIHN1bSkgPT4gc3VtICsga2V5LCAwKTsKfQovKioKICogSXQgdHJhbnNsYXRlcyBhbnkga2V5c3Ryb2tlIHN0cmluZyB0ZXh0IGxpa2UgYCJDVFJMK0EiYCB0byBhbgogKiBlbnZpcm9ubWVudOKAk3NwZWNpZmljIGtleXN0cm9rZSwgaS5lLiBgIuKMmEEiYCBvbiBNYWMgT1NYLgogKgogKiBAcGFyYW0ge1N0cmluZ30ga2V5c3Ryb2tlIEtleXN0cm9rZSB0ZXh0LgogKiBAcmV0dXJucyB7U3RyaW5nfSBLZXlzdHJva2UgdGV4dCBzcGVjaWZpYyBmb3IgdGhlIGVudmlyb25tZW50LgogKi8KCmV4cG9ydCBmdW5jdGlvbiBnZXRFbnZLZXlzdHJva2VUZXh0KGtleXN0cm9rZSkgewogIGlmICghZW52LmlzTWFjKSB7CiAgICByZXR1cm4ga2V5c3Ryb2tlOwogIH0KCiAgcmV0dXJuIHNwbGl0S2V5c3Ryb2tlVGV4dChrZXlzdHJva2UpIC8vIFJlcGxhY2UgbW9kaWZpZXJzIChlLmcuICJjdHJsIikgd2l0aCBNYWMgZ2x5cGhzIChlLmcuICLijJgiKSBmaXJzdC4KICAubWFwKGtleSA9PiBtb2RpZmllcnNUb01hY0dseXBoc1trZXkudG9Mb3dlckNhc2UoKV0gfHwga2V5KSAvLyBEZWNpZGUgd2hldGhlciB0byBwdXQgIisiIGJldHdlZW4ga2V5cyBpbiB0aGUga2V5c3Ryb2tlIG9yIG5vdC4KICAucmVkdWNlKCh2YWx1ZSwga2V5KSA9PiB7CiAgICBpZiAodmFsdWUuc2xpY2UoLTEpIGluIG1hY0dseXBoc1RvTW9kaWZpZXJzKSB7CiAgICAgIHJldHVybiB2YWx1ZSArIGtleTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiB2YWx1ZSArICcrJyArIGtleTsKICAgIH0KICB9KTsKfQoKZnVuY3Rpb24gZ2VuZXJhdGVLbm93bktleUNvZGVzKCkgewogIGNvbnN0IGtleUNvZGVzID0gewogICAgYXJyb3dsZWZ0OiAzNywKICAgIGFycm93dXA6IDM4LAogICAgYXJyb3dyaWdodDogMzksCiAgICBhcnJvd2Rvd246IDQwLAogICAgYmFja3NwYWNlOiA4LAogICAgZGVsZXRlOiA0NiwKICAgIGVudGVyOiAxMywKICAgIHNwYWNlOiAzMiwKICAgIGVzYzogMjcsCiAgICB0YWI6IDksCiAgICAvLyBUaGUgaWRlYSBhYm91dCB0aGVzZSBudW1iZXJzIGlzIHRoYXQgdGhleSBkbyBub3QgY29sbGlkZSB3aXRoIGFueSByZWFsIGtleSBjb2Rlcywgc28gd2UgY2FuIHVzZSB0aGVtCiAgICAvLyBsaWtlIGJpdCBtYXNrcy4KICAgIGN0cmw6IDB4MTEwMDAwLAogICAgLy8gSGFzIHRoZSBzYW1lIGNvZGUgYXMgY3RybCwgYmVjYXVzZSB0aGVpciBiZWhhdmlvdXIgc2hvdWxkIGJlIHVuaWZpZWQgYWNyb3NzIHRoZSBlZGl0b3IuCiAgICAvLyBTZWUgaHR0cDovL2NrZWRpdG9yLmdpdGh1Yi5pby9lZGl0b3ItcmVjb21tZW5kYXRpb25zL2dlbmVyYWwtcG9saWNpZXMjY3RybC12cy1jbWQKICAgIGNtZDogMHgxMTAwMDAsCiAgICBzaGlmdDogMHgyMjAwMDAsCiAgICBhbHQ6IDB4NDQwMDAwCiAgfTsgLy8gYS16CgogIGZvciAobGV0IGNvZGUgPSA2NTsgY29kZSA8PSA5MDsgY29kZSsrKSB7CiAgICBjb25zdCBsZXR0ZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpOwogICAga2V5Q29kZXNbbGV0dGVyLnRvTG93ZXJDYXNlKCldID0gY29kZTsKICB9IC8vIDAtOQoKCiAgZm9yIChsZXQgY29kZSA9IDQ4OyBjb2RlIDw9IDU3OyBjb2RlKyspIHsKICAgIGtleUNvZGVzW2NvZGUgLSA0OF0gPSBjb2RlOwogIH0gLy8gRjEtRjEyCgoKICBmb3IgKGxldCBjb2RlID0gMTEyOyBjb2RlIDw9IDEyMzsgY29kZSsrKSB7CiAgICBrZXlDb2Rlc1snZicgKyAoY29kZSAtIDExMSldID0gY29kZTsKICB9CgogIHJldHVybiBrZXlDb2RlczsKfQoKZnVuY3Rpb24gc3BsaXRLZXlzdHJva2VUZXh0KGtleXN0cm9rZSkgewogIHJldHVybiBrZXlzdHJva2Uuc3BsaXQoL1xzKlwrXHMqLyk7Cn0KLyoqCiAqIEluZm9ybWF0aW9uIGFib3V0IGEga2V5c3Ryb2tlLgogKgogKiBAaW50ZXJmYWNlIG1vZHVsZTp1dGlscy9rZXlib2FyZH5LZXlzdHJva2VJbmZvCiAqLwoKLyoqCiAqIFRoZSBba2V5IGNvZGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L2tleUNvZGUpLgogKgogKiBAbWVtYmVyIHtOdW1iZXJ9IG1vZHVsZTp1dGlscy9rZXlib2FyZH5LZXlzdHJva2VJbmZvI2tleUNvZGUKICovCgovKioKICogV2hldGhlciB0aGUgPGtiZD5BbHQ8L2tiZD4gbW9kaWZpZXIgd2FzIHByZXNzZWQuCiAqCiAqIEBtZW1iZXIge0JvbGVhbn0gbW9kdWxlOnV0aWxzL2tleWJvYXJkfktleXN0cm9rZUluZm8jYWx0S2V5CiAqLwoKLyoqCiAqIFdoZXRoZXIgdGhlIDxrYmQ+Q3RybDwva2JkPiBvciA8a2JkPkNtZDwva2JkPiBtb2RpZmllciB3YXMgcHJlc3NlZC4KICoKICogQG1lbWJlciB7Qm9sZWFufSBtb2R1bGU6dXRpbHMva2V5Ym9hcmR+S2V5c3Ryb2tlSW5mbyNjdHJsS2V5CiAqLwoKLyoqCiAqIFdoZXRoZXIgdGhlIDxrYmQ+U2hpZnQ8L2tiZD4gbW9kaWZpZXIgd2FzIHByZXNzZWQuCiAqCiAqIEBtZW1iZXIge0JvbGVhbn0gbW9kdWxlOnV0aWxzL2tleWJvYXJkfktleXN0cm9rZUluZm8jc2hpZnRLZXkKICov"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js"],"names":["CKEditorError","env","macGlyphsToModifiers","modifiersToMacGlyphs","keyCodes","generateKnownKeyCodes","getCode","key","keyCode","toLowerCase","altKey","alt","ctrlKey","ctrl","shiftKey","shift","parseKeystroke","keystroke","splitKeystrokeText","map","reduce","sum","getEnvKeystrokeText","isMac","value","slice","arrowleft","arrowup","arrowright","arrowdown","backspace","delete","enter","space","esc","tab","cmd","code","letter","String","fromCharCode","split"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils related to keyboard support.\n *\n * @module utils/keyboard\n */\n\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\n\nconst macGlyphsToModifiers = {\n\t'⌘': 'ctrl',\n\t'⇧': 'shift',\n\t'⌥': 'alt'\n};\n\nconst modifiersToMacGlyphs = {\n\t'ctrl': '⌘',\n\t'shift': '⇧',\n\t'alt': '⌥'\n};\n\n/**\n * Object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\nexport const keyCodes = generateKnownKeyCodes();\n\n/**\n * Converts a key name or a {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * @param {String|module:utils/keyboard~KeystrokeInfo} Key name (see {@link module:utils/keyboard~keyCodes})\n * or a keystroke data object.\n * @returns {Number} Key or keystroke code.\n */\nexport function getCode( key ) {\n\tlet keyCode;\n\n\tif ( typeof key == 'string' ) {\n\t\tkeyCode = keyCodes[ key.toLowerCase() ];\n\n\t\tif ( !keyCode ) {\n\t\t\t/**\n\t\t\t * Unknown key name. Only key names contained by the {@link module:utils/keyboard~keyCodes} can be used.\n\t\t\t *\n\t\t\t * @errror keyboard-unknown-key\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'keyboard-unknown-key: Unknown key name.',\n\t\t\t\tnull, { key }\n\t\t\t);\n\t\t}\n\t} else {\n\t\tkeyCode = key.keyCode +\n\t\t\t( key.altKey ? keyCodes.alt : 0 ) +\n\t\t\t( key.ctrlKey ? keyCodes.ctrl : 0 ) +\n\t\t\t( key.shiftKey ? keyCodes.shift : 0 );\n\t}\n\n\treturn keyCode;\n}\n\n/**\n * Parses keystroke and returns a keystroke code that will match the code returned by\n * link {@link module:utils/keyboard.getCode} for a corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * @param {String|Array.<Number|String>} keystroke Keystroke definition.\n * @returns {Number} Keystroke code.\n */\nexport function parseKeystroke( keystroke ) {\n\tif ( typeof keystroke == 'string' ) {\n\t\tkeystroke = splitKeystrokeText( keystroke );\n\t}\n\n\treturn keystroke\n\t\t.map( key => ( typeof key == 'string' ) ? getCode( key ) : key )\n\t\t.reduce( ( key, sum ) => sum + key, 0 );\n}\n\n/**\n * It translates any keystroke string text like `\"CTRL+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on Mac OSX.\n *\n * @param {String} keystroke Keystroke text.\n * @returns {String} Keystroke text specific for the environment.\n */\nexport function getEnvKeystrokeText( keystroke ) {\n\tif ( !env.isMac ) {\n\t\treturn keystroke;\n\t}\n\n\treturn splitKeystrokeText( keystroke )\n\t\t// Replace modifiers (e.g. \"ctrl\") with Mac glyphs (e.g. \"⌘\") first.\n\t\t.map( key => modifiersToMacGlyphs[ key.toLowerCase() ] || key )\n\n\t\t// Decide whether to put \"+\" between keys in the keystroke or not.\n\t\t.reduce( ( value, key ) => {\n\t\t\tif ( value.slice( -1 ) in macGlyphsToModifiers ) {\n\t\t\t\treturn value + key;\n\t\t\t} else {\n\t\t\t\treturn value + '+' + key;\n\t\t\t}\n\t\t} );\n}\n\nfunction generateKnownKeyCodes() {\n\tconst keyCodes = {\n\t\tarrowleft: 37,\n\t\tarrowup: 38,\n\t\tarrowright: 39,\n\t\tarrowdown: 40,\n\t\tbackspace: 8,\n\t\tdelete: 46,\n\t\tenter: 13,\n\t\tspace: 32,\n\t\tesc: 27,\n\t\ttab: 9,\n\n\t\t// The idea about these numbers is that they do not collide with any real key codes, so we can use them\n\t\t// like bit masks.\n\t\tctrl: 0x110000,\n\t\t// Has the same code as ctrl, because their behaviour should be unified across the editor.\n\t\t// See http://ckeditor.github.io/editor-recommendations/general-policies#ctrl-vs-cmd\n\t\tcmd: 0x110000,\n\t\tshift: 0x220000,\n\t\talt: 0x440000\n\t};\n\n\t// a-z\n\tfor ( let code = 65; code <= 90; code++ ) {\n\t\tconst letter = String.fromCharCode( code );\n\n\t\tkeyCodes[ letter.toLowerCase() ] = code;\n\t}\n\n\t// 0-9\n\tfor ( let code = 48; code <= 57; code++ ) {\n\t\tkeyCodes[ code - 48 ] = code;\n\t}\n\n\t// F1-F12\n\tfor ( let code = 112; code <= 123; code++ ) {\n\t\tkeyCodes[ 'f' + ( code - 111 ) ] = code;\n\t}\n\n\treturn keyCodes;\n}\n\nfunction splitKeystrokeText( keystroke ) {\n\treturn keystroke.split( /\\s*\\+\\s*/ );\n}\n\n/**\n * Information about a keystroke.\n *\n * @interface module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * The [key code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode).\n *\n * @member {Number} module:utils/keyboard~KeystrokeInfo#keyCode\n */\n\n/**\n * Whether the <kbd>Alt</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#altKey\n */\n\n/**\n * Whether the <kbd>Ctrl</kbd> or <kbd>Cmd</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#ctrlKey\n */\n\n/**\n * Whether the <kbd>Shift</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#shiftKey\n */\n"]}]}