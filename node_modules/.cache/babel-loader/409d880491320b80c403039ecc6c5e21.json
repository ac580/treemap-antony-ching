{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-clipboard/src/clipboard.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-clipboard/src/clipboard.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-clipboard/src/clipboard.js"],"names":["Plugin","ClipboardObserver","plainTextToHtml","normalizeClipboardHtml","viewToPlainText","HtmlDataProcessor","Clipboard","pluginName","init","editor","modelDocument","model","document","view","editing","viewDocument","_htmlDataProcessor","addObserver","listenTo","evt","isReadOnly","stop","priority","data","dataTransfer","content","getData","toView","fire","scrollToTheSelection","isEmpty","dataController","modelFragment","toModel","childCount","insertContent","onCopyCut","preventDefault","getSelectedContent","selection","method","name","setData","toData","deleteContent"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboard\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport ClipboardObserver from './clipboardobserver';\n\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext.js';\n\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\n\n/**\n * The clipboard feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through the clipboard pipeline in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with serialized editor's data.\n *\n * Read more about the clipboard integration in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive} guide.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Clipboard extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Clipboard';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst modelDocument = editor.model.document;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t/**\n\t\t * Data processor used to convert pasted HTML to a view structure.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/htmldataprocessor~HtmlDataProcessor} #_htmlDataProcessor\n\t\t */\n\t\tthis._htmlDataProcessor = new HtmlDataProcessor();\n\n\t\tview.addObserver( ClipboardObserver );\n\n\t\t// The clipboard paste pipeline.\n\n\t\t// Pasting and dropping is disabled when editor is read-only.\n\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\tthis.listenTo( viewDocument, 'clipboardInput', evt => {\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardInput', ( evt, data ) => {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\t\t\tlet content = '';\n\n\t\t\tif ( dataTransfer.getData( 'text/html' ) ) {\n\t\t\t\tcontent = normalizeClipboardHtml( dataTransfer.getData( 'text/html' ) );\n\t\t\t} else if ( dataTransfer.getData( 'text/plain' ) ) {\n\t\t\t\tcontent = plainTextToHtml( dataTransfer.getData( 'text/plain' ) );\n\t\t\t}\n\n\t\t\tcontent = this._htmlDataProcessor.toView( content );\n\n\t\t\tthis.fire( 'inputTransformation', { content, dataTransfer } );\n\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( this, 'inputTransformation', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tconst dataController = this.editor.data;\n\t\t\t\tconst model = this.editor.model;\n\n\t\t\t\t// Convert the pasted content to a model document fragment.\n\t\t\t\t// Conversion is contextual, but in this case we need an \"all allowed\" context and for that\n\t\t\t\t// we use the $clipboardHolder item.\n\t\t\t\tconst modelFragment = dataController.toModel( data.content, '$clipboardHolder' );\n\n\t\t\t\tif ( modelFragment.childCount == 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmodel.insertContent( modelFragment );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// The clipboard copy/cut pipeline.\n\n\t\tfunction onCopyCut( evt, data ) {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\n\t\t\tdata.preventDefault();\n\n\t\t\tconst content = editor.data.toView( editor.model.getSelectedContent( modelDocument.selection ) );\n\n\t\t\tviewDocument.fire( 'clipboardOutput', { dataTransfer, content, method: evt.name } );\n\t\t}\n\n\t\tthis.listenTo( viewDocument, 'copy', onCopyCut, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'cut', ( evt, data ) => {\n\t\t\t// Cutting is disabled when editor is read-only.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t} else {\n\t\t\t\tonCopyCut( evt, data );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardOutput', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tdata.dataTransfer.setData( 'text/html', this._htmlDataProcessor.toData( data.content ) );\n\t\t\t\tdata.dataTransfer.setData( 'text/plain', viewToPlainText( data.content ) );\n\t\t\t}\n\n\t\t\tif ( data.method == 'cut' ) {\n\t\t\t\teditor.model.deleteContent( modelDocument.selection );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t}\n}\n\n/**\n * Fired with a `content` and `dataTransfer` objects. The `content` which comes from the clipboard (was pasted or dropped)\n * should be processed in order to be inserted into the editor. The `dataTransfer` object is available\n * in case the transformation functions needs access to a raw clipboard data.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:clipboard/clipboard~Clipboard#event:inputTransformation\n * @param {Object} data Event data.\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content Event data. Content to be inserted into the editor.\n * It can be modified by the event listeners. Read more about the clipboard pipelines in\n * {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n */\n\n/**\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n * with a copy of selected content. The content can be processed before it ends up in the clipboard.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#output-pipeline \"clipboard output pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardOutput\n * @param {module:clipboard/clipboard~ClipboardOutputEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\n *\n * @class module:clipboard/clipboard~ClipboardOutputEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboard~ClipboardOutputEventData#dataTransfer\n */\n\n/**\n * Content to be put into the clipboard. It can be modified by the event listeners.\n * Read more about the clipboard pipelines in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n *\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboard~ClipboardOutputEventData#content\n */\n\n/**\n * Whether the event was triggered by copy or cut operation.\n *\n * @member {'copy'|'cut'} module:clipboard/clipboard~ClipboardOutputEventData#method\n */\n"]}]}