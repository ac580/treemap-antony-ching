{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-utils/src/dom/getresizeobserver.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-utils/src/dom/getresizeobserver.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-utils/src/dom/getresizeobserver.js"],"names":["mix","global","Rect","DomEmitterMixin","RESIZE_CHECK_INTERVAL","getResizeObserver","callback","window","ResizeObserver","ResizeObserverPolyfill","constructor","_callback","_elements","Set","_previousRects","Map","_periodicCheckTimeout","observe","element","add","size","_startPeriodicCheck","unobserve","delete","_stopPeriodicCheck","disconnect","forEach","periodicCheck","_checkElementRectsAndExecuteCallback","setTimeout","listenTo","clearTimeout","stopListening","clear","entries","_hasRectChanged","push","target","contentRect","get","length","ownerDocument","body","contains","currentRect","previousRect","hasChanged","isEqual","set"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getresizeobserver\n */\n\n/* globals setTimeout, clearTimeout */\n\nimport mix from '../mix';\nimport global from './global';\nimport Rect from './rect';\nimport DomEmitterMixin from './emittermixin';\n\nconst RESIZE_CHECK_INTERVAL = 100;\n\n/**\n * Returns an instance of [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver).\n * In browsers that support the `ResizeObserver` API, the native observer instance is returned.\n * In other browsers, a polyfilled instance is returned instead with a compatible API.\n *\n * [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) about the native API.\n *\n * @param {Function} callback A function called when any observed element was resized. Refer to the\n * native [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) API to\n * learn more.\n * @returns {module:utils/dom/getresizeobserver~ResizeObserver} An observer instance.\n */\nexport default function getResizeObserver( callback ) {\n\t// TODO: One day, the `ResizeObserver` API will be supported in all modern web browsers.\n\t// When it happens, this module will no longer make sense and should be removed and\n\t// the native implementation should be used across the project to save bytes.\n\t// Check out https://caniuse.com/#feat=resizeobserver.\n\tif ( typeof global.window.ResizeObserver === 'function' ) {\n\t\treturn new global.window.ResizeObserver( callback );\n\t} else {\n\t\treturn new ResizeObserverPolyfill( callback );\n\t}\n}\n\n/**\n * A polyfill class for the native [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver).\n *\n * @private\n * @mixes module:utils/domemittermixin~DomEmitterMixin\n */\nclass ResizeObserverPolyfill {\n\t/**\n\t * Creates an instance of the {@link module:utils/dom/getresizeobserver~ResizeObserverPolyfill} class.\n\t *\n\t * It synchronously reacts to resize of the window to check if observed elements' geometry changed.\n\t *\n\t * Additionally, the polyfilled observer uses a timeout to check if observed elements' geometry has changed\n\t * in some other way (dynamic layouts, scrollbars showing up, etc.), so its response can also be asynchronous.\n\t *\n\t * @param {Function} callback A function called when any observed element was resized. Refer to the\n\t * native [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) API to\n\t * learn more.\n\t */\n\tconstructor( callback ) {\n\t\t/**\n\t\t * A function called when any observed {@link #_elements element} was resized.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Function}\n\t\t */\n\t\tthis._callback = callback;\n\n\t\t/**\n\t\t * DOM elements currently observed by the observer instance.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Set}\n\t\t */\n\t\tthis._elements = new Set();\n\n\t\t/**\n\t\t * Cached DOM {@link #_elements elements} bounding rects to compare to upon the next check.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Map.<HTMLElement,module:utils/dom/rect~Rect>}\n\t\t */\n\t\tthis._previousRects = new Map();\n\n\t\t/**\n\t\t * An UID of the current timeout upon which the observed elements rects\n\t\t * will be compared to the {@link #_previousRects previous rects} from the past.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Map.<HTMLElement,module:utils/dom/rect~Rect>}\n\t\t */\n\t\tthis._periodicCheckTimeout = null;\n\t}\n\n\t/**\n\t * Starts observing a DOM element.\n\t *\n\t * Learn more in the\n\t * [native method documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe).\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tobserve( element ) {\n\t\tthis._elements.add( element );\n\n\t\tif ( this._elements.size === 1 ) {\n\t\t\tthis._startPeriodicCheck();\n\t\t}\n\t}\n\n\t/**\n\t * Stops observing a DOM element.\n\t *\n\t * Learn more in the\n\t * [native method documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/unobserve).\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tunobserve( element ) {\n\t\tthis._elements.delete( element );\n\t\tthis._previousRects.delete( element );\n\n\t\tif ( !this._elements.size ) {\n\t\t\tthis._stopPeriodicCheck();\n\t\t}\n\t}\n\n\t/**\n\t * Stops observing all observed DOM elements.\n\t *\n\t * Learn more in the\n\t * [native method documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/disconnect).\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tdisconnect() {\n\t\tthis._elements.forEach( element => this.unobserve( element ) );\n\t}\n\n\t/**\n\t * When called, the observer calls the {@link #_callback resize callback} for all observed\n\t * {@link #_elements elements} but also starts checking periodically for changes in the elements' geometry.\n\t * If some are detected, {@link #_callback resize callback} is called for relevant elements that were resized.\n\t *\n\t * @protected\n\t */\n\t_startPeriodicCheck() {\n\t\tconst periodicCheck = () => {\n\t\t\tthis._checkElementRectsAndExecuteCallback();\n\t\t\tthis._periodicCheckTimeout = setTimeout( periodicCheck, RESIZE_CHECK_INTERVAL );\n\t\t};\n\n\t\tthis.listenTo( global.window, 'resize', () => {\n\t\t\tthis._checkElementRectsAndExecuteCallback();\n\t\t} );\n\n\t\tperiodicCheck();\n\t}\n\n\t/**\n\t * Stops checking for changes in all observed {@link #_elements elements} geometry.\n\t *\n\t * @protected\n\t */\n\t_stopPeriodicCheck() {\n\t\tclearTimeout( this._periodicCheckTimeout );\n\t\tthis.stopListening();\n\t\tthis._previousRects.clear();\n\t}\n\n\t/**\n\t * Checks if the geometry of any of the {@link #_elements element} has changed. If so, executes\n\t * the {@link #_callback resize callback} with element geometry data.\n\t *\n\t * @protected\n\t */\n\t_checkElementRectsAndExecuteCallback() {\n\t\tconst entries = [];\n\n\t\tfor ( const element of this._elements ) {\n\t\t\tif ( this._hasRectChanged( element ) ) {\n\t\t\t\tentries.push( {\n\t\t\t\t\ttarget: element,\n\t\t\t\t\tcontentRect: this._previousRects.get( element )\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\tif ( entries.length ) {\n\t\t\tthis._callback( entries );\n\t\t}\n\t}\n\n\t/**\n\t * Compares the DOM element geometry to the {@link #_previousRects cached geometry} from the past.\n\t * Returns `true` if geometry has changed or the element is checked for the first time.\n\t *\n\t * @protected\n\t * @param {HTMLElement} element\n\t * @returns {Boolean}\n\t */\n\t_hasRectChanged( element ) {\n\t\tif ( !element.ownerDocument.body.contains( element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst currentRect = new Rect( element );\n\t\tconst previousRect = this._previousRects.get( element );\n\n\t\t// The first check should always yield true despite no Previous rect to compare to.\n\t\t// The native ResizeObserver does that and... that makes sense. Sort of.\n\t\tconst hasChanged = !previousRect || !previousRect.isEqual( currentRect );\n\n\t\tthis._previousRects.set( element, currentRect );\n\n\t\treturn hasChanged;\n\t}\n}\n\nmix( ResizeObserverPolyfill, DomEmitterMixin );\n\n/**\n * A resize observer object (either native or {@link module:utils/dom/getresizeobserver~getResizeObserver polyfilled})\n * offering the [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) API.\n *\n * @typedef {Function} module:utils/dom/getresizeobserver~ResizeObserver\n */\n"]}]}