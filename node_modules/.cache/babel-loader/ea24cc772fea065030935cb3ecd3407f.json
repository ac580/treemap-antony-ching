{"remainingRequest":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js!/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-font/src/fontfamily/utils.js","dependencies":[{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-font/src/fontfamily/utils.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-dev-webpack-plugin/lib/translatesourceloader.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antonyching/Desktop/project/new-builder-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDE5LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZQogKi8KCi8qKgogKiBAbW9kdWxlIGZvbnQvZm9udGZhbWlseS91dGlscwogKi8KCi8qKgogKiBOb3JtYWxpemVzIHRoZSB7QGxpbmsgbW9kdWxlOmZvbnQvZm9udGZhbWlseX5Gb250RmFtaWx5Q29uZmlnI29wdGlvbnMgY29uZmlndXJhdGlvbiBvcHRpb25zfQogKiB0byB0aGUge0BsaW5rIG1vZHVsZTpmb250L2ZvbnRmYW1pbHl+Rm9udEZhbWlseU9wdGlvbn0gZm9ybWF0LgogKgogKiBAcGFyYW0ge0FycmF5LjxTdHJpbmd8T2JqZWN0Pn0gY29uZmlndXJlZE9wdGlvbnMgQW4gYXJyYXkgb2Ygb3B0aW9ucyB0YWtlbiBmcm9tIHRoZSBjb25maWd1cmF0aW9uLgogKiBAcmV0dXJucyB7QXJyYXkuPG1vZHVsZTpmb250L2ZvbnRmYW1pbHl+Rm9udEZhbWlseU9wdGlvbj59CiAqLwpleHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplT3B0aW9ucyhjb25maWd1cmVkT3B0aW9ucykgewogIC8vIENvbnZlcnQgb3B0aW9ucyB0byBvYmplY3RzLgogIHJldHVybiBjb25maWd1cmVkT3B0aW9ucy5tYXAoZ2V0T3B0aW9uRGVmaW5pdGlvbikgLy8gRmlsdGVyIG91dCB1bmRlZmluZWQgdmFsdWVzIHRoYXQgYGdldE9wdGlvbkRlZmluaXRpb25gIG1pZ2h0IHJldHVybi4KICAuZmlsdGVyKG9wdGlvbiA9PiAhIW9wdGlvbik7Cn0gLy8gUmV0dXJucyBhbiBvcHRpb24gZGVmaW5pdGlvbiBlaXRoZXIgY3JlYXRlZCBmcm9tIHN0cmluZyBzaG9ydGN1dC4KLy8gSWYgb2JqZWN0IGlzIHBhc3NlZCB0aGVuIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGl0IHdpdGhvdXQgYWx0ZXJuYXRpbmcgaXQuIFJldHVybnMgdW5kZWZpbmVkIGZvciBpdGVtIHRoYW4gY2Fubm90IGJlIHBhcnNlZC4KLy8KLy8gQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBvcHRpb24KLy8gQHJldHVybnMge3VuZGVmaW5lZHxtb2R1bGU6Zm9udC9mb250ZmFtaWx5fkZvbnRGYW1pbHlPcHRpb259CgpmdW5jdGlvbiBnZXRPcHRpb25EZWZpbml0aW9uKG9wdGlvbikgewogIC8vIFRyZWF0IGFueSBvYmplY3QgYXMgZnVsbCBpdGVtIGRlZmluaXRpb24gcHJvdmlkZWQgYnkgdXNlciBpbiBjb25maWd1cmF0aW9uLgogIGlmICh0eXBlb2Ygb3B0aW9uID09PSAnb2JqZWN0JykgewogICAgcmV0dXJuIG9wdGlvbjsKICB9IC8vIEhhbmRsZSAnZGVmYXVsdCcgc3RyaW5nIGFzIGEgc3BlY2lhbCBjYXNlLiBJdCB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHRoZSBmb250RmFtaWx5IGF0dHJpYnV0ZS4KCgogIGlmIChvcHRpb24gPT09ICdkZWZhdWx0JykgewogICAgcmV0dXJuIHsKICAgICAgdGl0bGU6ICdEZWZhdWx0JywKICAgICAgbW9kZWw6IHVuZGVmaW5lZAogICAgfTsKICB9IC8vIElnbm9yZSB2YWx1ZXMgdGhhdCB3ZSBjYW5ub3QgcGFyc2UgdG8gYSBkZWZpbml0aW9uLgoKCiAgaWYgKHR5cGVvZiBvcHRpb24gIT09ICdzdHJpbmcnKSB7CiAgICByZXR1cm47CiAgfSAvLyBSZXR1cm4gZm9udCBmYW1pbHkgZGVmaW5pdGlvbiBmcm9tIGZvbnQgc3RyaW5nLgoKCiAgcmV0dXJuIGdlbmVyYXRlRm9udFByZXNldChvcHRpb24pOwp9IC8vIENyZWF0ZXMgYSBwcmVkZWZpbmVkIHByZXNldCBmb3IgcGl4ZWwgc2l6ZS4gSXQgZGVjb25zdHJ1Y3RzIGZvbnQtZmFtaWx5IGxpa2Ugc3RyaW5nIGludG8gZnVsbCBjb25maWd1cmF0aW9uIG9wdGlvbi4KLy8gQSBmb250IGRlZmluaXRpb24gaXMgcGFzc2VkIGFzIGNvbWEgZGVsaW1pdGVkIHNldCBvZiBmb250IGZhbWlseSBuYW1lcy4gRm9udCBuYW1lcyBtaWdodCBiZSBxdW90ZWQuCi8vCi8vIEBwYXJhbSB7U3RyaW5nfSBBIGZvbnQgZGVmaW5pdGlvbiBmb3JtIGNvbmZpZ3VyYXRpb24uCgoKZnVuY3Rpb24gZ2VuZXJhdGVGb250UHJlc2V0KGZvbnREZWZpbml0aW9uKSB7CiAgLy8gUmVtb3ZlIHF1b3RlcyBmcm9tIGZvbnQgbmFtZXMuIFRoZXkgd2lsbCBiZSBub3JtYWxpemVkIGxhdGVyLgogIGNvbnN0IGZvbnROYW1lcyA9IGZvbnREZWZpbml0aW9uLnJlcGxhY2UoLyJ8Jy9nLCAnJykuc3BsaXQoJywnKTsgLy8gVGhlIGZpcnN0IG1hdGNoZWQgZm9udCBuYW1lIHdpbGwgYmUgdXNlZCBhcyBkcm9wZG93biBsaXN0IGl0ZW0gdGl0bGUgYW5kIGFzIG1vZGVsIHZhbHVlLgoKICBjb25zdCBmaXJzdEZvbnROYW1lID0gZm9udE5hbWVzWzBdOyAvLyBDU1MtY29tcGF0aWJsZSBmb250IG5hbWVzLgoKICBjb25zdCBjc3NGb250TmFtZXMgPSBmb250TmFtZXMubWFwKG5vcm1hbGl6ZUZvbnROYW1lRm9yQ1NTKS5qb2luKCcsICcpOwogIHJldHVybiB7CiAgICB0aXRsZTogZmlyc3RGb250TmFtZSwKICAgIG1vZGVsOiBmaXJzdEZvbnROYW1lLAogICAgdmlldzogewogICAgICBuYW1lOiAnc3BhbicsCiAgICAgIHN0eWxlczogewogICAgICAgICdmb250LWZhbWlseSc6IGNzc0ZvbnROYW1lcwogICAgICB9LAogICAgICBwcmlvcml0eTogNwogICAgfQogIH07Cn0gLy8gTm9ybWFsaXplcyBmb250IG5hbWUgZm9yIHRoZSBzdHlsZSBhdHRyaWJ1dGUuIEl0IGFkZHMgYnJhY2VzICgnKSBpZiBmb250IG5hbWUgY29udGFpbnMgc3BhY2VzLgovLwovLyBAcGFyYW0ge1N0cmluZ30gZm9udE5hbWUKLy8gQHJldHVybnMge1N0cmluZ30KCgpmdW5jdGlvbiBub3JtYWxpemVGb250TmFtZUZvckNTUyhmb250TmFtZSkgewogIGZvbnROYW1lID0gZm9udE5hbWUudHJpbSgpOyAvLyBDb21wb3VuZCBmb250IG5hbWVzIHNob3VsZCBiZSBxdW90ZWQuCgogIGlmIChmb250TmFtZS5pbmRleE9mKCcgJykgPiAwKSB7CiAgICBmb250TmFtZSA9IGAnJHtmb250TmFtZX0nYDsKICB9CgogIHJldHVybiBmb250TmFtZTsKfQ=="},{"version":3,"sources":["/Users/antonyching/Desktop/project/new-builder-demo/node_modules/@ckeditor/ckeditor5-font/src/fontfamily/utils.js"],"names":["normalizeOptions","configuredOptions","map","getOptionDefinition","filter","option","title","model","undefined","generateFontPreset","fontDefinition","fontNames","replace","split","firstFontName","cssFontNames","normalizeFontNameForCSS","join","view","name","styles","priority","fontName","trim","indexOf"],"mappings":"AAAA;;;;;AAKA;;;;AAIA;;;;;;;AAOA,OAAO,SAASA,gBAAT,CAA2BC,iBAA3B,EAA+C;AACrD;AACA,SAAOA,iBAAiB,CACtBC,GADK,CACAC,mBADA,EAEN;AAFM,GAGLC,MAHK,CAGGC,MAAM,IAAI,CAAC,CAACA,MAHf,CAAP;AAIA,C,CAED;AACA;AACA;AACA;AACA;;AACA,SAASF,mBAAT,CAA8BE,MAA9B,EAAuC;AACtC;AACA,MAAK,OAAOA,MAAP,KAAkB,QAAvB,EAAkC;AACjC,WAAOA,MAAP;AACA,GAJqC,CAMtC;;;AACA,MAAKA,MAAM,KAAK,SAAhB,EAA4B;AAC3B,WAAO;AACNC,MAAAA,KAAK,EAAE,SADD;AAENC,MAAAA,KAAK,EAAEC;AAFD,KAAP;AAIA,GAZqC,CActC;;;AACA,MAAK,OAAOH,MAAP,KAAkB,QAAvB,EAAkC;AACjC;AACA,GAjBqC,CAmBtC;;;AACA,SAAOI,kBAAkB,CAAEJ,MAAF,CAAzB;AACA,C,CAED;AACA;AACA;AACA;;;AACA,SAASI,kBAAT,CAA6BC,cAA7B,EAA8C;AAC7C;AACA,QAAMC,SAAS,GAAGD,cAAc,CAACE,OAAf,CAAwB,MAAxB,EAAgC,EAAhC,EAAqCC,KAArC,CAA4C,GAA5C,CAAlB,CAF6C,CAI7C;;AACA,QAAMC,aAAa,GAAGH,SAAS,CAAE,CAAF,CAA/B,CAL6C,CAO7C;;AACA,QAAMI,YAAY,GAAGJ,SAAS,CAACT,GAAV,CAAec,uBAAf,EAAyCC,IAAzC,CAA+C,IAA/C,CAArB;AAEA,SAAO;AACNX,IAAAA,KAAK,EAAEQ,aADD;AAENP,IAAAA,KAAK,EAAEO,aAFD;AAGNI,IAAAA,IAAI,EAAE;AACLC,MAAAA,IAAI,EAAE,MADD;AAELC,MAAAA,MAAM,EAAE;AACP,uBAAeL;AADR,OAFH;AAKLM,MAAAA,QAAQ,EAAE;AALL;AAHA,GAAP;AAWA,C,CAED;AACA;AACA;AACA;;;AACA,SAASL,uBAAT,CAAkCM,QAAlC,EAA6C;AAC5CA,EAAAA,QAAQ,GAAGA,QAAQ,CAACC,IAAT,EAAX,CAD4C,CAG5C;;AACA,MAAKD,QAAQ,CAACE,OAAT,CAAkB,GAAlB,IAA0B,CAA/B,EAAmC;AAClCF,IAAAA,QAAQ,GAAI,IAAIA,QAAU,GAA1B;AACA;;AAED,SAAOA,QAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontfamily/utils\n */\n\n/**\n * Normalizes the {@link module:font/fontfamily~FontFamilyConfig#options configuration options}\n * to the {@link module:font/fontfamily~FontFamilyOption} format.\n *\n * @param {Array.<String|Object>} configuredOptions An array of options taken from the configuration.\n * @returns {Array.<module:font/fontfamily~FontFamilyOption>}\n */\nexport function normalizeOptions( configuredOptions ) {\n\t// Convert options to objects.\n\treturn configuredOptions\n\t\t.map( getOptionDefinition )\n\t\t// Filter out undefined values that `getOptionDefinition` might return.\n\t\t.filter( option => !!option );\n}\n\n// Returns an option definition either created from string shortcut.\n// If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\n//\n// @param {String|Object} option\n// @returns {undefined|module:font/fontfamily~FontFamilyOption}\nfunction getOptionDefinition( option ) {\n\t// Treat any object as full item definition provided by user in configuration.\n\tif ( typeof option === 'object' ) {\n\t\treturn option;\n\t}\n\n\t// Handle 'default' string as a special case. It will be used to remove the fontFamily attribute.\n\tif ( option === 'default' ) {\n\t\treturn {\n\t\t\ttitle: 'Default',\n\t\t\tmodel: undefined\n\t\t};\n\t}\n\n\t// Ignore values that we cannot parse to a definition.\n\tif ( typeof option !== 'string' ) {\n\t\treturn;\n\t}\n\n\t// Return font family definition from font string.\n\treturn generateFontPreset( option );\n}\n\n// Creates a predefined preset for pixel size. It deconstructs font-family like string into full configuration option.\n// A font definition is passed as coma delimited set of font family names. Font names might be quoted.\n//\n// @param {String} A font definition form configuration.\nfunction generateFontPreset( fontDefinition ) {\n\t// Remove quotes from font names. They will be normalized later.\n\tconst fontNames = fontDefinition.replace( /\"|'/g, '' ).split( ',' );\n\n\t// The first matched font name will be used as dropdown list item title and as model value.\n\tconst firstFontName = fontNames[ 0 ];\n\n\t// CSS-compatible font names.\n\tconst cssFontNames = fontNames.map( normalizeFontNameForCSS ).join( ', ' );\n\n\treturn {\n\t\ttitle: firstFontName,\n\t\tmodel: firstFontName,\n\t\tview: {\n\t\t\tname: 'span',\n\t\t\tstyles: {\n\t\t\t\t'font-family': cssFontNames\n\t\t\t},\n\t\t\tpriority: 7\n\t\t}\n\t};\n}\n\n// Normalizes font name for the style attribute. It adds braces (') if font name contains spaces.\n//\n// @param {String} fontName\n// @returns {String}\nfunction normalizeFontNameForCSS( fontName ) {\n\tfontName = fontName.trim();\n\n\t// Compound font names should be quoted.\n\tif ( fontName.indexOf( ' ' ) > 0 ) {\n\t\tfontName = `'${ fontName }'`;\n\t}\n\n\treturn fontName;\n}\n"]}]}